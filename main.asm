INCLUDE "hardware.inc"
INCLUDE "vram.asm"
INCLUDE "macros.asm"
INCLUDE "charmap.asm"
INCLUDE "constants.asm"

SECTION "ROM Bank $00", ROM0[$00]

Func_0:
	ld de, MBC5RomBank
	ld a, $06 ; TODO: Bank(?)
	ld [de], a
	ld a, [hli]
	ld [$dde9], a
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	ret nz
	push hl
	ld a, Bank(Func_1a902)
	ld [de], a
	jp Func_1a902

; Adds a BCD value to the player's score.
; Input: c = value to add
AddScore:
	ld a, [hScore]
	add c
	daa
	ld [hScore], a
	ld a, [hScore + 1]
	adc b
	daa
	ld [hScore + 1], a
	ret

; Waits for VBlank period or immediately returns if LCD is disabled.
WaitUntilSafeToAccessVRAM:
	ld a, [rLCDC]
	add a
	ret nc ; return if LCD is disabled
	call WaitVBlank
	sub a
	ld [rLCDC], a
	ret

WaitHBlankStart:
	; Waits for the next HBlank period to begin.
	ld a, [rSTAT]
	and STATF_LCD
	jr z, WaitHBlankStart ; If we're already in the middle of HBlank, wait until it's over.
	; fallthrough

SECTION "rst 38", ROM0 [$38]

WaitNextHBlank_:
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, WaitNextHBlank_
	ret

WaitNextHBlank:
	rst $38

; Hardware interrupts
SECTION "vblank", ROM0 [$40]
	reti

INCBIN "baserom.gbc", $41, $48 - $41

SECTION "hblank", ROM0 [$48]
	reti

INCBIN "baserom.gbc", $49, $50 - $49

SECTION "timer",  ROM0 [$50]
	reti

INCBIN "baserom.gbc", $51, $58 - $51

SECTION "serial", ROM0 [$58]
	reti

INCBIN "baserom.gbc", $59, $60 - $59

SECTION "joypad", ROM0 [$60]
	reti

SECTION "Home", ROM0 [$61]

INCBIN "baserom.gbc", $61, $68 - $61

; Waits until the VBlank period is entered.
WaitVBlank:
	ld a, [rLY]
	cp SCRN_Y + 1
	jr c, WaitVBlank
	ret

UpdateFrameCounter:
	ld a, [hPaused]
	and a
	ret nz
	ld hl, hFrameCounter
	inc [hl]
	ret

ResetFrameCounter:
	sub a
	ld [hFrameCounter], a
	ret

LoadCGBPalettesHome:
	ld a, Bank(LoadCGBPalettes)
	ld [MBC5RomBank], a
	jp LoadCGBPalettes

; The Warner Bros. Background banner graphics are only stored in ROM
; with the top-left quadrant. Since the other three quadrants are symmetric,
; this code unpacks the tiledata as such.
LoadWarnerBrosBannerQuadrants:
	push hl
	ld bc, $8830
	ld de, $8940
.asm_8b
	ld l, $09
.asm_8d
	ld a, [bc]
	inc bc
	add a
	rr h
	add a
	rr h
	add a
	rr h
	add a
	rr h
	add a
	rr h
	add a
	rr h
	add a
	rr h
	add a
	rr h
	ld a, h
	ld [de], a
	inc de
	ld a, c
	and $0f
	jr nz, .asm_8d
	ld a, e
	sub $20
	ld e, a
	ld a, d
	sbc 0
	ld d, a
	dec l
	jr nz, .asm_8d
	ld a, c
	add $90
	ld c, a
	ld a, b
	adc $00
	ld b, a
	ld a, e
	add $b0
	ld e, a
	ld a, d
	adc $01
	ld d, a
	ld a, b
	cp $90
	jr nz, .asm_8b
	ld bc, $8830
	ld de, $96de
	ld h, $07
.asm_d7
	ld l, $12
.asm_d9
	ld a, [bc]
	inc bc
	ld [de], a
	inc de
	ld a, [bc]
	inc bc
	ld [de], a
	dec de
	dec de
	dec de
	ld a, c
	and $0f
	jr nz, .asm_d9
	ld a, e
	add $20
	ld e, a
	ld a, d
	adc $00
	ld d, a
	dec l
	jr nz, .asm_d9
	ld a, e
	sub $40
	ld e, a
	ld a, d
	sbc $02
	ld d, a
	dec h
	jr nz, .asm_d7
	pop hl
	ret

SECTION "Entry", ROM0 [$100]

Func_100:
	nop
	jp Start


SECTION "Header", ROM0 [$104]

	; The header is generated by rgbfix.
	; The space here is allocated to prevent code from being overwritten.
	ds $150 - $104

SECTION "Main", ROM0

Start:
	ld [hGameBoyColorDetection], a
Start_:
	di
	ld sp, wStack
	ld a, Bank(ResetInitialData)
	ld [MBC5RomBank], a
	call ResetInitialData
	call ResetPlayerData
	call Func_3e31
	call SetInitialScreen
	jp InitNextScreen

Func_16a:
	ld bc, $da00
	ld de, $da80
.asm_170
	ld a, [bc]
	ld [$ff8a], a
	ld a, [de]
	ld [bc], a
	inc c
	ld a, [$ff8a]
	ld [de], a
	inc e
	jr nz, .asm_170
	call Func_3e51
	call WriteDMACodeToHRAM
	call Func_3dce
	call Func_3c72
	call ResetFrameCounter
	ld hl, Data_1aa1a
	call LoadCGBPalettesHome
	ld hl, vBGMap
	ld bc, $400
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	jr nz, .asm_1b1
	ld d, $da
.asm_19f
	sub a
	ld [rVBK], a
	ld e, [hl]
	ld a, 1
	ld [rVBK], a
	ld a, [de]
	ld [hli], a
	dec bc
	ld a, c
	or b
	jr nz, .asm_19f
	sub a
	ld [rVBK], a
.asm_1b1
	ld a, Bank(Func_17b59)
	ld [MBC5RomBank], a
	jp Func_17b59

Func_1b9:
	ld a, $c7
	ld [rLCDC], a
.asm_1bd
	ld a, [$defd]
	ld c, a
	ld b, $00
	ld hl, $3def
	add hl, bc
	ld a, [hl]
	and $0c
	srl a
	srl a
	ld b, a
	swap a
	or b
	ld b, a
	ld a, [hl]
	and $c0
	or b
	ld [rBGP], a
	sub a
	ld [rSCY], a
	ld hl, $d37
	ld c, $38
	ld b, $8e
	call Func_cdf
	ld hl, $d4f
	ld c, $18
	ld b, $8e
	call Func_cdf
	ld hl, $d37
	call Func_cae
.asm_1f6
	ld a, [rLY]
	cp 55
	jr nz, .asm_1f6
	call WaitHBlankStart
	ld a, [$defd]
	ld c, a
	ld b, $00
	ld hl, $3def
	add hl, bc
	ld a, [hli]
	ld [rBGP], a
	ld a, $70
	ld [rSCY], a
	ld hl, $d4f
	call Func_cae
	call ClearOAMBufferHome
	call TickMusicEngineHome
	call ReadJoyPadHome
	call WaitVBlank
	ld a, Bank(Func_f585)
	ld [MBC5RomBank], a
	call Func_f585
	call TryInitNextScreenHome
	call UpdateFrameCounter
	jp .asm_1bd

Func_233:
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	ret nz
	ld hl, vBGMap
	ld b, $da
.asm_23d
	sub a
	ld [rVBK], a
	ld c, [hl]
	ld a, 1
	ld [rVBK], a
	ld a, [bc]
	ld [hli], a
	ld a, h
	cp $9c
	jr nz, .asm_23d
	sub a
	ld [rVBK], a
	ret

Func_250:
	ld a, [hEXTRALetters]
	cp 5 ; check if player obtained all 5 EXTRA letters
	jp nz, InitNextScreen
	push hl
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	ld hl, $7740
	jr nz, .asm_264
	ld hl, $77f6
.asm_264
	call LoadData
	call Func_3e51
	ld a, Bank(Func_17ba8)
	ld [MBC5RomBank], a
	call Func_17ba8
	ld hl, $775e
	call LoadData
	ld a, Bank(Func_17be2)
	ld [MBC5RomBank], a
	call Func_17be2
	pop hl
	ld a, $06
	ld [MBC5RomBank], a
	ld bc, $ddd9
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld hl, $ddde
	sub a
	ld [hli], a
	ld [hli], a
	ld a, Bank(Func_7b8a)
	ld [MBC5RomBank], a
	call Func_7b8a
	call WriteDMACodeToHRAM
	call Func_3dce
	call Func_3c72
	call ResetFrameCounter
	ld a, Bank(Func_17bf9)
	ld [MBC5RomBank], a
	call Func_17bf9
	ld hl, BonusScreenGBCPalettes
	call LoadCGBPalettesHome
	ld c, $00
	call Func_1023
	call Func_fb4
	call Func_233
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
.asm_2cc
	call ReadJoyPadHome
	call TryTogglePause
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	jr nz, .asm_31c
.asm_2d8
	ld a, [rLY]
	cp 51
	jr nz, .asm_2d8
	ld a, $80
	ld [rBCPS], a
	ld hl, Data_361
	call WaitHBlankStart
	ld a, [hli]
	ld [rBCPD], a
	ld a, [hli]
	ld [rBCPD], a
	ld a, [hli]
	ld [rBCPD], a
	ld a, [hli]
	ld [rBCPD], a
	ld a, [hli]
	ld [rBCPD], a
	ld a, [hli]
	ld [rBCPD], a
.asm_2fa
	ld a, [rLY]
	cp 69
	jr nz, .asm_2fa
	ld a, $80
	ld [rBCPS], a
	ld hl, Data_367
	call WaitHBlankStart
	ld a, [hli]
	ld [rBCPD], a
	ld a, [hli]
	ld [rBCPD], a
	ld a, [hli]
	ld [rBCPD], a
	ld a, [hli]
	ld [rBCPD], a
	ld a, [hli]
	ld [rBCPD], a
	ld a, [hli]
	ld [rBCPD], a
.asm_31c
	call TickMusicEngineHome
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	jr nz, .asm_347
.asm_325
	ld a, [rLY]
	cp 119
	jr nz, .asm_325
	ld a, $80
	ld [rBCPS], a
	ld hl, Data_36d
	call WaitHBlankStart
	ld a, [hli]
	ld [rBCPD], a
	ld a, [hli]
	ld [rBCPD], a
	ld a, [hli]
	ld [rBCPD], a
	ld a, [hli]
	ld [rBCPD], a
	ld a, [hli]
	ld [rBCPD], a
	ld a, [hli]
	ld [rBCPD], a
.asm_347
	call WaitVBlank
	call Func_373
	call ClearOAMBufferHome
	call TryInitNextScreenHome
	ld a, Bank(Func_795e)
	ld [MBC5RomBank], a
	call Func_795e
	call UpdateFrameCounter
	jp .asm_2cc

Data_361:
	RGB(31, 25, 11)
	RGB(20, 12, 5)
	RGB(11, 5, 0)

Data_367:
	RGB(31, 30, 5)
	RGB(19, 18, 3)
	RGB(10, 7, 0)

Data_36d:
	RGB(31, 20, 16)
	RGB(22, 8, 6)
	RGB(13, 3, 1)

Func_373:
	ld a, Bank(Func_17c3a)
	ld [MBC5RomBank], a
	call Func_17c3a
	ld a, $04
	ld [MBC5RomBank], a
	call Func_3153
	call Func_3153
	ret

Func_387:
	call LoadWarnerBrosBannerQuadrants
	call Func_3e51
	call WriteDMACodeToHRAM
	call Func_3dce
	call Func_3c72
	call ResetFrameCounter
	ld hl, $c528
	ld a, [hli]
	ld h, [hl]
	ld l, a
	call Func_3a42
	ld hl, LevelSummaryScreenGBCPalettes
	call LoadCGBPalettesHome
	ld a, Bank(Func_17c82)
	ld [MBC5RomBank], a
	call Func_17c82
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINOFF | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
.asm_3b4
	call TickMusicEngineHome
	call WaitVBlank
	call Func_433
	ld a, $05
	ld [MBC5RomBank], a
	ld hl, $731c
	ld bc, $0
	call Func_3ca6
	call ClearOAMBufferHome
	call TryInitNextScreenHome
	call ReadJoyPadHome
	call UpdateFrameCounter
	ld a, Bank(Func_17ca6)
	ld [MBC5RomBank], a
	call Func_17ca6
	ld a, [hEXTRALetters]
	cp 5
	jr nz, .asm_3f4
	ld a, [hFrameCounter]
	bit 4, a
	jr nz, .asm_3f4
	ld bc, $8044
	ld hl, $7b43
	call Func_3ca6
.asm_3f4
	ld hl, $de80
	ld a, [hl]
	and a
	jr z, .asm_3ff
	dec [hl]
	jp .asm_3b4
.asm_3ff
	ld a, [hNumCarrots]
	and a
	jr z, .asm_420
	ld a, [hFrameCounter]
	and 7
	jp nz, .asm_3b4
	ld a, [hNumCarrots]
	sub 1
	daa
	ld [hNumCarrots], a
	ld bc, $2
	call AddScore
	ld a, $0f
	call Func_3e1b
	jp .asm_3b4
.asm_420
	ld a, [wNewKeys]
	and PADF_START | PADF_A
	jp z, .asm_3b4
	ld a, $08
	call Func_3e1b
	call Func_3ddc
	jp .asm_3b4

Func_433:
	ld a, [hFrameCounter]
	and $3
	ret nz
	ld a, $05
	ld [MBC5RomBank], a
	ld hl, $dda2
	ld bc, $80e0
	ld de, $4280
	ld a, $12
	call Func_2f9e
	ret

Func_44c:
	push hl
	ld hl, $76f4
	call LoadData
	call Func_3e51
	pop hl
	call LoadWarnerBrosBannerQuadrants
	ld a, $06
	ld [MBC5RomBank], a
	ld bc, $ddc9
	ld a, [wDifficultySetting]
	and a
	jr z, .asm_46b
	inc hl
	inc hl
	inc hl
.asm_46b
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hl]
	ld [bc], a
	call WriteDMACodeToHRAM
	call Func_3dce
	call Func_3c72
	call ResetFrameCounter
	ld hl, $c526
	ld a, [hli]
	ld h, [hl]
	ld l, a
	call Func_3a42
	sub a
	ld [rSCY], a
	ld [rSCX], a
	ld hl, Data_1a9e6
	call LoadCGBPalettesHome
	call Func_d67
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINOFF | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
.asm_49a
	call TickMusicEngineHome
	call WaitVBlank
	ld a, $05
	ld [MBC5RomBank], a
	ld hl, $731c
	ld bc, $0
	call Func_3ca6
	call ClearOAMBufferHome
	call TryInitNextScreenHome
	call ReadJoyPadHome
	call UpdateFrameCounter
	ld a, $05
	ld [MBC5RomBank], a
	ld hl, $ddc9
	ld de, $6e86
	ld b, $03
.asm_4c7
	push bc
	ld a, [de]
	inc de
	ld b, a
	ld a, [de]
	inc de
	ld c, a
	push de
	ld a, [hli]
	push hl
	add a
	ld l, a
	ld h, $00
	ld de, $6df1
	add hl, de
	ld a, [hli]
	ld h, [hl]
	ld l, a
	call Func_3ca6
	pop hl
	pop de
	pop bc
	dec b
	jr nz, .asm_4c7
	ld a, [wNewKeys]
	and PADF_START | PADF_A
	jp z, .asm_49a
	ld a, $08
	call Func_3e1b
	call Func_3ddc
	jp .asm_49a

RunInfogramesCopyrightScreen:
	call Func_fb4
	call Func_3dce
	call ResetFrameCounter
	sub a
	ld [rSCY], a
	ld [rSCX], a
	ld hl, InfogramesCopyrightScreenGBCPalettes
	call LoadCGBPalettesHome
	ld hl, vBGMap
	ld bc, $400
	call Func_10e9
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINOFF | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJOFF | LCDCF_BGON
	ld [rLCDC], a
.delayFrame
	call WaitVBlank
	call TryInitNextScreenHome
	call UpdateFrameCounter
	sub a
.delayNextVBlank
	dec a
	jr nz, .delayNextVBlank
	ld a, [hFrameCounter]
	and a
	jr nz, .delayFrame
	call Func_3ddc
	jr .delayFrame

RunWarnerBrosCopyrightScreen:
	call LoadWarnerBrosBannerQuadrants
	call Func_3e51
	call Func_3bb4
	call WriteDMACodeToHRAM
	call Func_3dce
	sub a
	ld [rSCY], a
	ld [rSCX], a
	ld hl, WarnerBrosCopyrightScreenGBCPalettes
	call LoadCGBPalettesHome
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINOFF | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
.asm_54e
	call TickMusicEngineHome
	call Func_3a82
	call WaitVBlank
	ld a, [$deee]
	cp $c5
	jr nc, .asm_56c
	ld a, $05
	ld [MBC5RomBank], a
	ld hl, $7861
	ld bc, $5c39
	call Func_3ca6
.asm_56c
	call ClearOAMBufferHome
	call TryInitNextScreenHome
	ld a, %10010000
	ld [rOBP0], a
	ld a, [$def2]
	and a
	jr nz, .asm_54e
	ld hl, $def6
	dec [hl]
	jr nz, .asm_54e
	call Func_3ddc
	jr .asm_54e


Func_587:
	call LoadWarnerBrosBannerQuadrants
	call Func_3e51
	call Func_3bb4
	call WriteDMACodeToHRAM
	call Func_3dce
	sub a
	ld [rSCY], a
	ld [rSCX], a
	ld hl, Data_1ab36
	call LoadCGBPalettesHome
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINOFF | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
.asm_5a5
	call TickMusicEngineHome
	call Func_3a82
	call WaitVBlank
	call ClearOAMBufferHome
	call TryInitNextScreenHome
	ld a, [$def2]
	and a
	jr nz, .asm_5a5
	ld hl, $def6
	dec [hl]
	jr nz, .asm_5a5
	ld a, $03
	ld [wCurScreen], a
	call Func_3ddc
	jr .asm_5a5

Func_5ca:
	call LoadWarnerBrosBannerQuadrants
	call Func_3e51
	call WriteDMACodeToHRAM
	call Func_3dce
	call Func_3c72
	ld hl, $c502
	ld a, [hli]
	ld h, [hl]
	ld l, a
	call Func_3a4d
	sub a
	ld [rSCY], a
	ld [rSCX], a
	ld hl, WarnerBrosCopyrightScreenGBCPalettes
	call LoadCGBPalettesHome
	call Func_d67
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINOFF | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
Func_5f4:
	call TickMusicEngineHome
	call WaitVBlank
	ld a, $05
	ld [MBC5RomBank], a
	ld hl, $731c
	ld bc, $0
	call Func_3ca6
	call ClearOAMBufferHome
	call TryInitNextScreenHome
	call ReadJoyPadHome
	ld a, [wLanguageSetting]
	swap a
	add 55
	ld b, a
	ld c, $14
	ld hl, $6db3
	ld a, $05
	ld [MBC5RomBank], a
	call Func_3ca6
	ld a, [$defc]
	and a
	jp nz, Func_5f4
	ld hl, wLanguageSetting
	ld a, [wNewKeys]
	bit PADB_SELECT, a
	jr nz, .moveCursorDown
	add a ; check if down pressed (PADF_DOWN)
	jr nc, .checkUpPressed
.moveCursorDown
	inc [hl]
	jr .resolveCursor
.checkUpPressed
	add a
	jr nc, .ok
	dec [hl]
.resolveCursor
	ld b, 3 ; num languages
	ld a, [hl]
	cp $ff
	jr nz, .checkMax
	dec b
	ld [hl], b
	jr .redraw
.checkMax
	cp b
	jr c, .redraw
	ld [hl], $00
.redraw
	ld a, $07
	call Func_3e1b
.ok
	ld a, [wNewKeys]
	and PADF_START | PADF_A
	jp z, Func_5f4
	ld a, $08
	call Func_3e1b
	call Func_3ddc
	jp Func_5f4

Func_669:
	call LoadWarnerBrosBannerQuadrants
	call Func_3e51
	call WriteDMACodeToHRAM
	call Func_3dce
	call Func_3c72
	call ResetFrameCounter
	ld hl, $c504
	ld a, [hli]
	ld h, [hl]
	ld l, a
	call Func_3a42
	ld hl, $dee6
	sub a
	ld [hli], a
	ld [hl], a
	sub a
	ld [rSCY], a
	ld [rSCX], a
	ld hl, Data_1a9e6
	call LoadCGBPalettesHome
	call Func_d67
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINOFF | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
.asm_69c
	call TickMusicEngineHome
	call WaitVBlank
	ld a, $05
	ld [MBC5RomBank], a
	ld hl, $731c
	ld bc, $0
	call Func_3ca6
	call ClearOAMBufferHome
	call TryInitNextScreenHome
	call ReadJoyPadHome
	call UpdateFrameCounter
	ld a, Bank(Func_17cfd)
	ld [MBC5RomBank], a
	call Func_17cfd
	ld a, [$defc]
	and a
	jp nz, .asm_69c
	ld hl, wPasswordEntryCursor
	ld a, [hl]
	and a
	jp z, .asm_76d
	add $e7
	ld c, a
	ld a, $de
	adc $00
	ld b, a
	ld a, [wNewKeys]
	bit PADB_A, a
	jr nz, .asm_6e5
	add a
	jr nc, .asm_6ea
.asm_6e5
	ld a, [bc]
	inc a
	ld [bc], a
	jr .asm_6fc
.asm_6ea
	add a
	jr nc, .asm_6f2
	ld a, [bc]
	dec a
	ld [bc], a
	jr .asm_6fc
.asm_6f2
	add a
	jr nc, .asm_6f8
	dec [hl]
	jr .asm_6fc
.asm_6f8
	add a
	jr nc, .asm_6fc
	inc [hl]
.asm_6fc
	ld a, [hl]
	and a
	jr nz, .asm_704
	ld [hl], $03
	jr .asm_70a
.asm_704
	cp $04
	jr nz, .asm_70a
	ld [hl], $01
.asm_70a
	ld a, [bc]
	cp $05
	jr nz, .asm_713
	sub a
	ld [bc], a
	jr .asm_71a
.asm_713
	cp $ff
	jr nz, .asm_71a
	ld a, $04
	ld [bc], a
.asm_71a
	ld a, [wNewKeys]
	and PADF_START | PADF_B
	jp z, .asm_69c
	ld a, $08
	call Func_3e1b
	ld a, Bank(Passwords)
	ld [MBC5RomBank], a
	ld hl, Passwords
	ld a, [hli]
	ld d, a
.asm_731
	ld e, $03
	ld bc, wPasswordCharacters
.asm_736
	ld a, [bc]
	inc c
	cp [hl]
	jr nz, .asm_756
	inc hl
	dec e
	jr nz, .asm_736
	ld a, [hli]
	cp $ff
	jr nz, .asm_749
	ld [wEnableLevelSkip], a
	jr .asm_79b
.asm_749
	ld [wCurScreen], a
	ld a, [hl]
	ld [wDifficultySetting], a
	call Func_3ddc
	jp .asm_69c
.asm_756
	inc e
	inc e
	ld c, e
	ld b, $00
	add hl, bc
	dec d
	jr nz, .asm_731
	ld hl, wPasswordCharacters
	sub a
	ld [hli], a
	ld [hli], a
	ld [hl], a
	sub a
	ld [wPasswordEntryCursor], a
	jp .asm_69c
.asm_76d
	ld hl, $dee6
	ld a, [wNewKeys]
	bit PADB_SELECT, a
	jr nz, .asm_77a
	add a
	jr nc, .asm_77d
.asm_77a
	inc [hl]
	jr .asm_781
.asm_77d
	add a
	jr nc, .asm_794
	dec [hl]
.asm_781
	ld a, [hl]
	inc a
	jr nz, .asm_789
	ld [hl], $02
	jr .asm_78f
.asm_789
	cp $04
	jr nz, .asm_78f
	ld [hl], $00
.asm_78f
	ld a, $07
	call Func_3e1b
.asm_794
	ld a, [wNewKeys]
	bit PADB_B, a
	jr z, .asm_7a5
.asm_79b
	ld a, SCREEN_TITLESCREEN - 1
	ld [wCurScreen], a
	call Func_3ddc
	jr .asm_7c1
.asm_7a5
	and PADF_LEFT | PADF_RIGHT | PADF_A
	jp z, .asm_69c
	ld hl, $dee6
	ld a, [hli]
	and a
	jr nz, .asm_7b5
	ld [hl], $01
	jr .asm_7c1
.asm_7b5
	ld hl, wDifficultySetting
	dec a
	jr nz, .asm_7be
	ld hl, $defe
.asm_7be
	ld a, [hl]
	cpl
	ld [hl], a
.asm_7c1
	ld a, $08
	call Func_3e1b
	jp .asm_69c

Func_7c9:
	call Func_fb4
	call Func_3e51
	call Func_2c73
	call WriteDMACodeToHRAM
	call Func_3dce
	call Func_3c72
	call ResetFrameCounter
	ld a, Bank(Func_17d6e)
	ld [MBC5RomBank], a
	call Func_17d6e
	ld a, $09
	ld [MBC5RomBank], a
	ld hl, $4000
	ld bc, $82a0
	ld de, $500
.asm_7f4
	ld a, [hli]
	ld [bc], a
	inc bc
	dec de
	ld a, e
	or d
	jr nz, .asm_7f4
	ld hl, TitlescreenGBCPalettes
	call LoadCGBPalettesHome
	ld hl, vBGMap
	ld bc, $400
	call Func_10e9
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	jr nz, .asm_822
	ld a, 1
	ld [rVBK], a
	ld hl, vBGMap
	ld b, $e0
.asm_81a
	sub a
	ld [hli], a
	dec b
	jr nz, .asm_81a
	sub a
	ld [rVBK], a
.asm_822
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINOFF | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
.asm_826
	ld a, [$defd]
	ld c, a
	ld b, $00
	ld hl, $3def
	add hl, bc
	ld a, [hl]
	and $0c
	srl a
	srl a
	ld b, a
	swap a
	or b
	ld b, a
	ld a, [hl]
	and $c0
	or b
	ld [rBGP], a
	ld hl, $ded2
	ld a, [hFrameCounter]
	and $03
	jr nz, .asm_851
	inc [hl]
	bit 7, [hl]
	jr z, .asm_851
	inc [hl]
.asm_851
	ld a, [hli]
	add a
	jr c, .asm_858
	dec [hl]
	jr .asm_859
.asm_858
	inc [hl]
.asm_859
	ld a, [hl]
	cp $ff
	jr nz, .asm_861
	inc [hl]
	jr .asm_866
.asm_861
	cp $39
	jr nz, .asm_866
	dec [hl]
.asm_866
	sub a
	ld [rSCY], a
	sub a
	ld [rSCX], a
	call TickMusicEngineHome
	call ReadJoyPadHome
	call Func_2c2b
	ld a, $05
	ld [MBC5RomBank], a
	ld hl, $6eab
	ld de, $ded8
	ld a, $07
	ld [$ff8a], a
.asm_884
	ld a, [de]
	add [hl]
	ld [de], a
	inc e
	inc hl
	ld a, [de]
	adc [hl]
	cp $a0
	jr c, .asm_895
	cp $e0
	jr nc, .asm_895
	add $c0
.asm_895
	ld [de], a
	inc e
	inc hl
	ld c, a
	ld a, [hli]
	ld b, a
	push de
	push hl
	ld a, [hli]
	ld h, [hl]
	ld l, a
	call Func_3ca6
	pop hl
	pop de
	inc hl
	inc hl
	ld a, [$ff8a]
	dec a
	ld [$ff8a], a
	jr nz, .asm_884
.asm_8ae
	ld a, [rLY]
	cp 55
	jr nz, .asm_8ae
	call WaitHBlankStart
	ld a, [$dec7]
	ld [rSCX], a
	ld a, 112
	ld [rSCY], a
	ld a, [$defd]
	ld c, a
	ld b, $00
	ld hl, $3def
	add hl, bc
	ld a, [hl]
	ld [rBGP], a
	ld a, [$ded2]
	cp $70
	jr c, .asm_8d9
	ld sp, $c000
	jr .asm_8f9
.asm_8d9
	cp $60
	jr c, .asm_8e7
	ld sp, $c3c0
	ld a, $01
	ld [$ded4], a
	jr .asm_8f9
.asm_8e7
	ld hl, $6f1e
	and $1e
	ld c, a
	ld b, $00
	add hl, bc
	ld a, $05
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
.asm_8f9
	ld hl, $96c0
	ld b, $28
.waitCurrentHBlankFinish
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .waitCurrentHBlankFinish
.waitHBlankStart
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .waitHBlankStart
	pop de
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	pop de
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	pop de
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	pop de
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	dec b
	jr nz, .waitCurrentHBlankFinish
	ld sp, wStack
	ld a, [$ded4]
	and a
	jr z, .asm_94a
	ld c, a
	ld b, $00
	ld hl, $6ef8
	add hl, bc
	ld a, $05
	ld [MBC5RomBank], a
	ld b, [hl]
	ld c, $3c
	ld hl, $6eea
	call Func_3ca6
	ld hl, $ded4
	inc [hl]
	ld a, [hl]
	cp $26
	jr c, .asm_94a
	sub a
	ld [hl], a
.asm_94a
	ld hl, $ded5
	ld a, [$ded2]
	cp $4e
	jr nc, .asm_95b
.asm_954
	ld a, $e8
	ld [hli], a
	sub a
	ld [hl], a
	jr .asm_9a3
.asm_95b
	cp $78
	jr nc, .asm_98b
	ld a, [hFrameCounter]
	rra
	jr nc, .asm_965
	inc [hl]
.asm_965
	ld a, [hli]
	ld c, a
	inc [hl]
	ld a, [hl]
	cp $30
	jr c, .asm_96f
	sub a
	ld [hl], a
.asm_96f
	and $f8
	srl a
	srl a
	ld e, a
	ld d, $00
	ld hl, $6f3e
	add hl, de
	ld a, $05
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld b, $70
	call Func_3ca6
	jr .asm_9a3
.asm_98b
	cp $c8
	jr nc, .asm_954
	ld a, [hFrameCounter]
	rra
	jr nc, .asm_995
	dec [hl]
.asm_995
	ld c, [hl]
	ld b, $70
	ld hl, $6fe6
	ld a, $05
	ld [MBC5RomBank], a
	call Func_3ca6
.asm_9a3
	ld a, [rLY]
	cp 112
	jr nz, .asm_9a3
	ld a, [$dec9]
	ld [rSCX], a
.asm_9ae
	ld a, [rLY]
	cp 118
	jr nz, .asm_9ae
	ld a, [$decb]
	ld [rSCX], a
.asm_9b9
	ld a, [rLY]
	cp 128
	jr nz, .asm_9b9
	ld a, [$decd]
	ld [rSCX], a
	call WaitVBlank
	call TryInitNextScreenHome
	call ClearOAMBufferHome
	call UpdateFrameCounter
	ld a, $05
	ld [MBC5RomBank], a
	ld a, [$ded7]
	ld hl, $6ff8
	and a
	jr nz, .asm_9e1
	ld hl, $702a
.asm_9e1
	ld bc, $5034
	call Func_3ca6
	ld a, [$defc]
	and a
	jp nz, .asm_826
	ld a, [hFrameCounter]
	and $1c
	srl a
	srl a
	ld c, a
	ld b, $00
	ld hl, $705c
	add hl, bc
	ld a, [hl]
	ld [rOBP1], a
	ld a, [wNewKeys]
	and PADF_DOWN | PADF_UP | PADF_SELECT
	jr z, .asm_a12
	ld hl, $ded7
	ld a, [hl]
	cpl
	ld [hl], a
	ld a, $07
	call Func_3e1b
.asm_a12
	ld a, [wNewKeys]
	and PADF_START | PADF_A
	jp z, .asm_826
	ld a, $08
	call Func_3e1b
	ld hl, $ded7
	ld a, [hl]
	and a
	ld a, $05
	jr z, .asm_a2a
	ld a, $04
.asm_a2a
	ld [wCurScreen], a
	call Func_3ddc
	jp .asm_826

Func_a33:
	call Func_fb4
	ld bc, $deb6
	ld a, [bc]
	and a
	jp nz, InitNextScreen
	cpl
	ld [bc], a
	call Func_3e51
	call WriteDMACodeToHRAM
	call Func_3dce
	call Func_3c72
	call ResetFrameCounter
	ld hl, $c506
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, [wLanguageSetting]
	add a
	ld c, a
	ld b, $00
	add hl, bc
	ld a, [hli]
	ld c, a
	ld b, [hl]
	ld hl, $deb7
	ld a, $ff
	ld [hli], a
	sub a
	ld [hli], a
	ld [hli], a
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	sub a
	ld [hli], a
	ld [hli], a
	ld a, $00
	ld [hli], a
	ld a, $98
	ld [hli], a
	sub a
	ld [hli], a
	ld [hli], a
	ld a, $28
	ld [hli], a
	ld [hl], $00
	ld hl, vBGMap
	ld bc, $2a0
.asm_a84
	ld a, $80
	ld [hli], a
	dec bc
	ld a, c
	or b
	jr nz, .asm_a84
	ld a, $05
	ld [MBC5RomBank], a
	ld hl, $7064
	ld bc, $9b80
	ld de, $9b90
.asm_a9a
	ld a, [hli]
	ld [de], a
	inc de
	ld a, [hli]
	ld [bc], a
	inc bc
	ld a, c
	and $03
	jr nz, .asm_a9a
	ld a, c
	add $1c
	ld c, a
	ld a, b
	adc $00
	ld b, a
	ld a, e
	add $1c
	ld e, a
	ld a, d
	adc $00
	ld d, a
	ld a, b
	cp $9c
	jr nz, .asm_a9a
	sub a
	ld [rSCY], a
	ld [rSCX], a
	ld hl, Data_1aa1a
	call LoadCGBPalettesHome
	ld hl, vBGMap
	ld bc, $400
	call Func_10e9
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	jr nz, .asm_ae8
	ld a, 1
	ld [rVBK], a
	ld hl, vBGMap
	ld bc, $2a0
.asm_ade
	sub a
	ld [hli], a
	dec bc
	ld a, c
	or b
	jr nz, .asm_ade
	sub a
	ld [rVBK], a
.asm_ae8
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINOFF | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
.asm_aec
	ld a, [$defd]
	ld c, a
	ld b, $00
	ld hl, $3def
	add hl, bc
	ld a, [hl]
	and $0c
	srl a
	srl a
	ld b, a
	swap a
	or b
	ld b, a
	ld a, [hl]
	and $c0
	or b
	ld [rBGP], a
	ld a, [$deb9]
	ld [rSCY], a
	ld hl, $d37
	ld a, [$dec2]
	add $24
	ld c, a
	ld b, $8e
	call Func_cdf
	ld hl, $d4f
	ld a, [$dec2]
	ld c, a
	ld b, $8e
	call Func_cdf
	ld hl, $d37
	call Func_cae
.asm_b2d
	ld a, [rLY]
	cp 55
	jr nz, .asm_b2d
	call WaitHBlankStart
	ld a, [$defd]
	ld c, a
	ld b, $00
	ld hl, $3def
	add hl, bc
	ld a, [hli]
	ld [rBGP], a
	ld a, [hl]
	ld [rOBP0], a
	ld a, 112
	ld [rSCY], a
	ld hl, $d4f
	call Func_cae
	ld hl, $deb7
	ld a, [hli]
	and a
	jr z, .asm_b5c
	dec l
	dec [hl]
	jp .asm_c09
.asm_b5c
	ld a, [hl]
	add a
	jr c, .asm_b66
	jr z, .asm_b72
	dec [hl]
	jp .asm_c09
.asm_b66
	ld a, [hFrameCounter]
	rra
	jp c, .asm_c09
	inc [hl]
	inc l
	inc [hl]
	jp .asm_c09
.asm_b72
	inc l
	inc l
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a
	ld a, [hli]
	ld e, a
	ld d, [hl]
	ld a, [bc]
	cp $ff
	jr nz, .asm_b88
	ld a, $7f
	ld [$deb8], a
	jp .asm_c09
.asm_b88
	and a
	jr nz, .asm_bb2
	ld a, d
	cp $20
	jr nz, .asm_ba1
	inc l
	ld a, [hl]
	add $40
	ld [hli], a
	ld a, [hl]
	adc $00
	ld [hld], a
	dec l
	ld a, $f0
	ld [$deb8], a
	jr .asm_ba9
.asm_ba1
	add $10
	ld [hl], a
	ld a, $20
	ld [$deb8], a
.asm_ba9
	sub a
	dec l
	ld [hld], a
	inc bc
	ld a, b
	ld [hld], a
	ld [hl], c
	jr .asm_c09
.asm_bb2
	inc l
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, d
	add a
	add a
	add l
	ld l, a
	ld a, h
	adc $00
	ld h, a
	ld a, e
	srl a
	srl a
	srl a
	add l
	ld l, a
	ld a, h
	adc $00
	ld h, a
	call WaitHBlankStart
	ld a, [bc]
	sub $40
	add a
	add $80
	ld [hl], a
	push af
	ld a, l
	add $20
	ld l, a
	pop af
	inc a
	ld [hl], a
	ld a, e
	and a
	jr nz, .asm_be8
.asm_be2
	sub a
	call Func_d0f
	jr .asm_bf4
.asm_be8
	ld a, e
	sub $08
	ld e, a
	dec bc
	ld a, $11
	call Func_d0f
	jr .asm_be2
.asm_bf4
	ld a, [hFrameCounter]
	and $03
	jr nz, .asm_c09
	ld hl, $deba
	ld a, [hl]
	add $01
	ld [hli], a
	ld a, [hl]
	adc $00
	ld [hli], a
	ld a, [hl]
	add $08
	ld [hl], a
.asm_c09
	ld hl, $dec0
	ld a, [hFrameCounter]
	and $07
	jr nz, .asm_c13
	inc [hl]
.asm_c13
	ld a, [hli]
	cp $18
	jr nc, .asm_c1c
	ld [hl], $01
	jr .asm_c4e
.asm_c1c
	cp $20
	jr nc, .asm_c24
	sub a
	ld [hl], a
	jr .asm_c4e
.asm_c24
	cp $a0
	jr nc, .asm_c2c
	ld [hl], $01
	jr .asm_c4e
.asm_c2c
	cp $b4
	jr c, .asm_c37
	ld [hl], $01
	call Func_3ddc
	jr .asm_c4e
.asm_c37
	ld a, [$dec3]
	inc a
	cp $06
	jr c, .asm_c41
	sub a
	inc [hl]
.asm_c41
	ld [$dec3], a
	ld a, [hl]
	cp $0a
	jr c, .asm_c4c
	ld a, $02
	ld [hl], a
.asm_c4c
	inc l
	inc [hl]
.asm_c4e
	call ClearOAMBufferHome
	call TickMusicEngineHome
	call ReadJoyPadHome
	call WaitVBlank
	call TryInitNextScreenHome
	call UpdateFrameCounter
	ld a, [$defc]
	and a
	jp nz, .asm_aec
	ld a, $50
	ld [rOBP0], a
	ld a, $90
	ld [rOBP1], a
	ld a, [wNewKeys]
	and PADF_START | PADF_A
	jp z, .asm_aec
	call Func_3ddc
	jp .asm_aec

Func_c7d:
	ld a, [hli]
	ld e, a
	ld a, [hli]
	ld d, a
	ld a, [hli]
	ld [$ff8a], a
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [$dec1]
	add a
	add l
	ld l, a
	ld a, h
	adc $00
	ld h, a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, l
	ld [$ff8e], a
	ld a, h
	ld [$ff8f], a
	dec hl
	ld a, [hli]
	ld [$ff8b], a
	ld a, [hl]
	and $1f
	ld [$ff8c], a
	add a
	add a
	ld [$ff8d], a
	ld a, [hli]
	and $e0
	ld h, [hl]
	ld l, a
	ret

Func_cae:
	call Func_c7d
	ld sp, hl
	ld h, d
	ld l, e
.waitCurrentHBlankFinish
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .waitCurrentHBlankFinish
.waitHBlankStart
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .waitHBlankStart
	pop de
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	pop de
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	pop de
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	pop de
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	ld a, [$ff8d]
	dec a
	ld [$ff8d], a
	jr nz, .waitCurrentHBlankFinish
	ld sp, wStack - 2
	ret

Func_cdf:
	call Func_c7d
	ld hl, $ff8e
	ld a, [hli]
	ld h, [hl]
	ld l, a
	inc hl
	inc hl
	ld a, [hActiveSprites]
	ld e, a
	ld d, $df
.asm_cef
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [$ff8a]
	ld [de], a
	inc e
	add $02
	ld [$ff8a], a
	ld a, [$ff8b]
	ld [de], a
	inc e
	inc hl
	ld a, [$ff8c]
	dec a
	ld [$ff8c], a
	jr nz, .asm_cef
	ld a, e
	ld [hActiveSprites], a
	ret

Func_d0f:
	ld [$ff8a], a
	ld a, [bc]
	and a
	ret z
	cp $ff
	ret z
	inc bc
	sub $40
	add a
	add $80
	ld [$ff8b], a
	ld a, [hActiveSprites]
	ld l, a
	ld h, $df
	ld a, d
	add $10
	ld [hli], a
	ld a, e
	add $08
	ld e, a
	ld [hli], a
	ld a, [$ff8b]
	ld [hli], a
	ld a, [$ff8a]
	ld [hli], a
	ld a, l
	ld [hActiveSprites], a
	ret

INCBIN "baserom.gbc", $d37, $d67 - $d37

Func_d67:
	ld hl, vBGMap
	ld bc, $400
.asm_d6d
	ld a, $7f
	ld [hli], a
	dec bc
	ld a, c
	or b
	jr nz, .asm_d6d
	ld hl, $9841
	ld bc, $e
	ld a, $83
	ld d, $0e
.asm_d7f
	ld e, $12
.asm_d81
	ld [hli], a
	inc a
	dec e
	jr nz, .asm_d81
	add hl, bc
	dec d
	jr nz, .asm_d7f
	ret

Func_d8b:
	push hl
	ld hl, $71b2
	call LoadData
	call Func_3e51
	pop hl
	call LoadWarnerBrosBannerQuadrants
	ld a, $06
	ld [MBC5RomBank], a
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a
	push hl
	ld h, b
	ld l, c
	call LoadCGBPalettesHome
	pop hl
	ld a, $06
	ld [MBC5RomBank], a
	ld a, [hli]
	ld [$ddc4], a
	ld a, [hli]
	ld [$ddc5], a
	ld a, [hli]
	ld [$ddc6], a
	ld a, [hli]
	ld [$ddc7], a
	ld a, [hli]
	ld [$ddc8], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	call Func_3a42
	call WriteDMACodeToHRAM
	call Func_3dce
	call Func_3c72
	call ResetFrameCounter
	ld hl, $dec0
	ld a, $80
	ld [hli], a
	ld a, $02
	ld [hli], a
	ld [hl], $bc
	sub a
	ld [$dec3], a
	sub a
	ld [rSCY], a
	ld [rSCX], a
	call Func_d67
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINOFF | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
.asm_df2
	call WaitVBlank
	call TryInitNextScreenHome
	ld a, $90
	ld [rOBP0], a
	call ReadJoyPadHome
	call UpdateFrameCounter
	ld a, $05
	ld [MBC5RomBank], a
	ld hl, $731c
	ld bc, $0
	call Func_3ca6
	ld a, $03
	ld [MBC5RomBank], a
	ld hl, $ddc5
	ld a, [hFrameCounter]
	bit 5, a
	jr z, .asm_e21
	ld hl, $ddc7
.asm_e21
	ld bc, $6840
	ld a, [hli]
	ld h, [hl]
	ld l, a
	call Func_3ca6
	ld hl, $dec0
	ld a, [hli]
	and a
	jr z, .asm_e35
	dec l
	dec [hl]
	jr .asm_e41
.asm_e35
	inc l
	ld a, [hl]
	cp $b0
	jr nz, .asm_e40
	call Func_3ddc
	jr .asm_e41
.asm_e40
	inc [hl]
.asm_e41
	call ClearOAMBufferHome
	call TickMusicEngineHome
	ld a, [$defc]
	and a
	jp nz, .asm_df2
	ld a, [wNewKeys]
	and PADF_START | PADF_A
	jp z, .asm_df2
	call Func_3ddc
	jp .asm_df2

RunStudioCreditsScreen:
	ld bc, wInCreditsScene
	ld a, $ff
	ld [bc], a
	inc c
	ld a, $01
	ld [bc], a
	inc c
	sub a
	ld [bc], a
	inc c
	ld a, $56
	ld [bc], a
	inc c
	ld a, $76
	ld [bc], a
	jr asm_e77
RunStudioScreen:
	sub a
	ld [wInCreditsScene], a
asm_e77:
	push hl
	ld hl, StudioScreenData
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	jr nz, .load
	ld hl, StudioScreenData_GBC
.load
	call LoadData
	call Func_3e51
	call Func_fb4
	ld hl, StudioScreenGBCPalettes
	call LoadCGBPalettesHome
	pop hl
	call Func_2b6d
	ld bc, $ff9c
	ld a, [bc]
	sub $08
	ld [bc], a
	inc c
	ld a, [bc]
	sbc 0
	ld [bc], a
	call Func_1965
	call Func_39f1
	call Func_2342
	call Func_3335
	call Func_392e
	call Func_2d73
	call Func_3dce
	call Func_3c72
	call WriteDMACodeToHRAM
	call ResetFrameCounter
	call Func_31e1
	sub a
	ld [$de84], a
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	jr nz, .asm_ed7
	ld hl, $9b00
	ld bc, $100
	call Func_10e9
.asm_ed7
	ld hl, $9b00
.asm_eda
	ld a, [hl]
	sub $b8
	ld [hli], a
	ld a, l
	and a
	jr nz, .asm_eda
	ld a, 144
	ld [rWY], a
	ld a, 165
	ld [rWX], a
	ld a, [wInCreditsScene]
	and a
	jr z, .initLCDC
	ld hl, Data_1b77d
	call LoadData
.initLCDC
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
.mainLoop:
	call ClearOAMBufferHome
	ld a, [wInCreditsScene]
	and a
	jr nz, .tryInitNextScreen
	call ReadJoyPadHome
	call TryTogglePause
.tryInitNextScreen
	call TryInitNextScreenHome
.waitPastCeiling
	ld a, [rLY]
	cp 31
	jr nz, .waitPastCeiling
	call WaitHBlankStart
	ld a, [hCameraXOffset]
	ld [rSCX], a
	ld a, [hCameraYOffset]
	ld [rSCY], a
	call TickMusicEngineHome
	ld a, [wInCreditsScene]
	and a
	jr z, .asm_f49
	ld a, Bank(Func_f610)
	ld [MBC5RomBank], a
	call Func_f610
	ld a, [hFrameCounter]
	rra
	jr c, .asm_f55
	ld hl, $dde3
	ld a, [hli]
	ld [$ffa4], a
	ld a, [hFrameCounter]
	and $03
	jr nz, .asm_f55
	inc [hl]
	jr nz, .asm_f55
	dec l
	ld a, [hl]
	cpl
	inc a
	ld [hl], a
	jr .asm_f55
.asm_f49
	call HandlePlayerInput
	call Func_1940
	call Func_235e
	call PrepareCameraUpdate
.asm_f55
	call Func_2a84
	ld a, [wInCreditsScene]
	and a
	jr nz, .asm_f61
	call Func_2c9f
.asm_f61
	call Func_3939
	call Func_3252
.waitFloor
	ld a, [rLY]
	cp 111
	jr nz, .waitFloor
	call WaitHBlankStart
	ld hl, hCameraXOffset + 1
	ld a, [hld]
	ld b, a
	ld a, [hl]
	srl b
	rra
	srl b
	rra
	add [hl]
	ld [rSCX], a
	ld a, 112
	ld [rSCY], a
.waitSecondaryFloor
	ld a, [rLY]
	cp 118
	jr nz, .waitSecondaryFloor
	call WaitHBlankStart
	ld hl, hCameraXOffset + 1
	ld a, [hld]
	ld b, a
	ld a, [hl]
	srl b
	rra
	add [hl]
	ld [rSCX], a
	call Func_2e27
	ld a, 192
	ld [rSCY], a
	ld hl, hCameraXOffset + 1
	ld a, [hld]
	ld b, a
	ld a, [hl]
	srl b
	rra
	srl b
	rra
	add [hl]
	ld [rSCX], a
	call UpdateFrameCounter
	jp .mainLoop

Func_fb4:
	ld bc, $da00
	ld de, $da80
.asm_fba
	ld a, [bc]
	ld [$ff8a], a
	ld a, [de]
	ld [bc], a
	inc c
	ld a, [$ff8a]
	ld [de], a
	inc e
	jr nz, .asm_fba
	ld bc, $d900
	ld de, $d980
.asm_fcc
	ld a, [bc]
	ld [$ff8a], a
	ld a, [de]
	ld [bc], a
	inc c
	ld a, [$ff8a]
	ld [de], a
	inc e
	jr nz, .asm_fcc
	ret

Func_fd9:
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	ret nz
	push hl
	ld a, 1
	ld [rVBK], a
	ld a, $04
	ld [MBC5RomBank], a
	ld bc, $4100
	ld de, $8340
	call Decompress
	sub a
	ld [rVBK], a
	pop hl
	ld b, h
	ld c, l
	ld d, $06
	ld a, 1
	ld [rVBK], a
.asm_ffd
	ld a, [bc]
	or $08
	ld [bc], a
	inc bc
	dec d
	jr nz, .asm_ffd
	sub a
	ld [rVBK], a
	ld b, $60
.asm_100a
	ld a, [hl]
	cp $a0
	jr c, .asm_101e
	cp $b3
	jr nc, .asm_101e
	ld a, 1
	ld [rVBK], a
	ld a, [hl]
	or $08
	ld [hl], a
	sub a
	ld [rVBK], a
.asm_101e
	inc hl
	dec b
	jr nz, .asm_100a
	ret

Func_1023:
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	ret nz
	ld a, 1
	ld [rVBK], a
	ld de, vBGWin
	ld b, $60
.asm_1031
	ld a, c
	ld [de], a
	inc de
	dec b
	jr nz, .asm_1031
	sub a
	ld [rVBK], a
	ret

Func_103b:
	call Func_fb4
	call Func_0
	ld a, [$dde9]
	ld c, a
	call Func_1023
	ld bc, $c602
	ld a, [bc]
	sub $40
	ld [bc], a
	inc c
	ld a, [bc]
	sbc $00
	ld [bc], a
	call Func_2b6d
	call Func_1965
	call Func_39f1
	call Func_3e51
	call Func_2fe2
	call Func_2342
	call Func_3335
	call Func_392e
	call Func_18d1
	call Func_2d73
	call Func_3dce
	call Func_3c72
	call WriteDMACodeToHRAM
	call ResetFrameCounter
	call Func_31e1
	sub a
	ld [$de84], a
	ld a, 120
	ld [rWY], a
	ld a, 7
	ld [rWX], a
	ld hl, vBGWin
	call Func_fd9
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
.asm_1097
	call ClearOAMBufferHome
	call ReadJoyPadHome
	call TryTogglePause
	call TryInitNextScreenHome
	call TickMusicEngineHome
	call HandlePlayerInput
	call Func_1940
	call Func_235e
	call PrepareCameraUpdate
	call Func_2a84
	call Func_3939
	call Func_173b
	call Func_3252
	call Func_2c9f
	call Func_2e21
	call UpdateFrameCounter
	jr .asm_1097

Func_10c9:
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	jr nz, .asm_10d1
	ld b, d
	ld c, e
.asm_10d1
	ld hl, $9a00
	ld de, vBGWin
.asm_10d7
	ld a, [hl]
	sub b
	ld [hli], a
	ld a, [de]
	sub c
	ld [de], a
	inc de
	ld a, l
	cp $a0
	jr nz, .asm_10d7
	ld a, h
	cp $9b
	jr nz, .asm_10d7
	ret

Func_10e9:
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	ret nz
	ld d, $d9
.loop
	sub a
	ld [rVBK], a
	ld e, [hl]
	ld a, 1
	ld [rVBK], a
	ld a, [de]
	ld [hli], a
	dec bc
	ld a, c
	or b
	jr nz, .loop
	sub a
	ld [rVBK], a
	ret

Func_1103:
	call Func_fb4
	call Func_11fc
	call Func_2b6d
	call Func_1965
	call Func_39f1
	call Func_3e51
	call Func_2fe2
	call Func_2342
	call Func_2c73
	call Func_3335
	call Func_392e
	call Func_18d1
	call Func_2d73
	call Func_3dce
	call Func_3c72
	call WriteDMACodeToHRAM
	call ResetFrameCounter
	ld a, -1
	ld [hForcedSideScrollSpeed], a
	call Func_31e1
	ld a, 56
	ld [$de83], a
	ld [rWY], a
	ld a, $b0
	ld [$de82], a
	ld a, 165
	ld [rWX], a
	ld hl, $9a00
	ld bc, $160
	call Func_10e9
	ld bc, $2987
	ld de, $298e
	call Func_10c9
	ld a, $6f
	ld [$de81], a
	ld a, $78
	ld [$de84], a
	ld hl, $2de5
	call Func_2d62
	ld hl, $9ba0
	call Func_fd9
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
.asm_1179
	ld a, 128
	ld [rSCY], a
	ld a, [$dec7]
	ld [rSCX], a
	ld hl, $de82
	ld a, [hli]
	cp $a6
	jr c, .asm_1194
	ld a, $a5
	ld [rWX], a
	ld a, $90
	ld [rWY], a
	jr .asm_1199
.asm_1194
	ld [rWX], a
	ld a, [hl]
	ld [rWY], a
.asm_1199
	call ClearOAMBufferHome
	call ReadJoyPadHome
	call TryTogglePause
	call Func_1722
	call Func_162d
	call TryInitNextScreenHome
	call TickMusicEngineHome
	call Func_173b
	call HandlePlayerInput
	call Func_2c2b
.asm_11b7
	ld a, [rLY]
	cp 72
	jr nz, .asm_11b7
	ld a, [$dec9]
	ld [rSCX], a
	call Func_1940
.asm_11c5
	ld a, [rLY]
	cp 76
	jr nz, .asm_11c5
	ld a, [$decb]
	ld [rSCX], a
	call Func_235e
.asm_11d3
	ld a, [rLY]
	cp 87
	jr nz, .asm_11d3
	call WaitHBlankStart
	ld a, [hCameraYOffset]
	ld [rSCY], a
	ld a, [hCameraXOffset]
	ld [rSCX], a
	call PrepareCameraUpdate
	call Func_2a84
	call Func_3939
	call Func_3252
	call Func_2c9f
	call Func_2e21
	call UpdateFrameCounter
	jp .asm_1179

Func_11fc:
	call Func_0
	ld a, [hli]
	ld [$ddea], a
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	ret nz
	ld a, 1
	ld [rVBK], a
	ld bc, vBGWin
	ld de, $400
.asm_1212
	ld a, [$ddea]
	ld [bc], a
	inc bc
	dec de
	ld a, e
	or d
	jr nz, .asm_1212
	ld bc, $9ba0
	ld d, $60
.asm_1221
	ld a, [$dde9]
	ld [bc], a
	inc bc
	dec d
	jr nz, .asm_1221
	sub a
	ld [rVBK], a
	ret

Func_122d:
	call Func_fb4
	call Func_11fc
	call Func_2b6d
	call Func_1965
	call Func_39f1
	call Func_3e51
	call Func_2fe2
	call Func_2342
	call Func_2c73
	call Func_3335
	call Func_392e
	call Func_18d1
	call Func_2d73
	call Func_3dce
	call Func_3c72
	call WriteDMACodeToHRAM
	call ResetFrameCounter
	ld a, -1
	ld [hForcedSideScrollSpeed], a
	call Func_31e1
	ld a, 64
	ld [$de83], a
	ld [rWY], a
	ld a, $b8
	ld [$de82], a
	ld a, 165
	ld [rWX], a
	ld hl, $9a00
	ld bc, $1a0
	call Func_10e9
	ld bc, $1886
	ld de, $1881
	call Func_10c9
	ld a, $7f
	ld [$de81], a
	ld a, $78
	ld [$de84], a
	ld hl, $2de5
	call Func_2d62
	ld hl, $9ba0
	call Func_fd9
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
.asm_12a3
	ld a, 128
	ld [rSCY], a
	ld a, [$dec7]
	ld [rSCX], a
	ld hl, $de82
	ld a, [hli]
	cp $a6
	jr c, .asm_12be
	ld a, 165
	ld [rWX], a
	ld a, 144
	ld [rWY], a
	jr .asm_12c3
.asm_12be
	ld [rWX], a
	ld a, [hl]
	ld [rWY], a
.asm_12c3
	call ClearOAMBufferHome
	call ReadJoyPadHome
	call TryTogglePause
	call Func_1722
	call TickMusicEngineHome
	call HandlePlayerInput
	call Func_1940
	call Func_235e
	call PrepareCameraUpdate
	call Func_2a84
	call Func_3939
	call Func_173b
.asm_12e7
	ld a, [rLY]
	cp 72
	jr nz, .asm_12e7
	ld a, [$dec9]
	ld [rSCX], a
	call TryInitNextScreenHome
	call Func_2c2b
.asm_12f8
	ld a, [rLY]
	cp 80
	jr nz, .asm_12f8
	ld a, [$decb]
	ld [rSCX], a
	call Func_3252
.asm_1306
	ld a, [rLY]
	cp 96
	jr nz, .asm_1306
	ld a, [$decd]
	ld [rSCX], a
	call Func_16d2
.asm_1314
	ld a, [rLY]
	cp 103
	jr nz, .asm_1314
	call WaitHBlankStart
	ld a, [hCameraYOffset]
	ld [rSCY], a
	ld a, [hCameraXOffset]
	ld [rSCX], a
	call Func_2c9f
	call Func_2e21
	call UpdateFrameCounter
	jp .asm_12a3


Func_1331:
	call Func_fb4
	call Func_11fc
	call Func_2b6d
	call Func_1965
	call Func_39f1
	call Func_3e51
	call Func_2fe2
	call Func_2342
	call Func_2c73
	call Func_3335
	call Func_392e
	call Func_18d1
	call Func_2d73
	call Func_3dce
	call Func_3c72
	call WriteDMACodeToHRAM
	call ResetFrameCounter
	ld a, 1
	ld [hForcedSideScrollSpeed], a
	call Func_31e1
	ld hl, $9a00
	ld bc, $120
	call Func_10e9
	ld hl, $9a00
	ld bc, $120
.asm_137a
	ld a, [hl]
	sub $09
	ld [hli], a
	dec bc
	ld a, c
	or b
	jr nz, .asm_137a
	ld hl, $9b20
	ld bc, $80
	ld d, $c4
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	jr nz, .asm_13a6
	push hl
	push bc
	ld a, 1
	ld [rVBK], a
.asm_1397
	ld a, $01
	ld [hli], a
	dec bc
	ld a, c
	or b
	jr nz, .asm_1397
	sub a
	ld [rVBK], a
	pop bc
	pop hl
	ld d, $c5
.asm_13a6
	ld a, [hl]
	sub d
	ld [hli], a
	dec bc
	ld a, c
	or b
	jr nz, .asm_13a6
	ld a, $00
	ld [$de82], a
	ld a, $38
	ld [$de81], a
	ld a, $78
	ld [$de84], a
	ld hl, $2de5
	call Func_2d62
	ld a, 144
	ld [rWY], a
	ld a, 7
	ld [rWX], a
	sub a
	ld [$ddc3], a
	ld a, [$ffad]
	set 5, a
	ld [$ffad], a
	ld hl, $9ba0
	call Func_fd9
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
.asm_13df
	ld a, $80
	ld [rSCY], a
	ld a, [$dec7]
	ld [rSCX], a
	call ClearOAMBufferHome
	call ReadJoyPadHome
	call TryTogglePause
	call TryInitNextScreenHome
	call HandlePlayerInput
	call Func_1940
	call Func_235e
	call TickMusicEngineHome
	call PrepareCameraUpdate
	call Func_2a84
	call Func_2c2b
	call Func_1722
	call Func_16fc
.asm_140f
	ld a, [rLY]
	cp 72
	jr nz, .asm_140f
	ld a, [$de82]
	cpl
	inc a
	ld [rSCX], a
	call Func_3939
	call Func_173b
	call Func_3252
.asm_1425
	ld a, [rLY]
	cp 103
	jr nz, .asm_1425
	call WaitHBlankStart
	ld a, [hCameraYOffset]
	ld [rSCY], a
	ld a, [hCameraXOffset]
	ld [rSCX], a
	call Func_2c9f
	call Func_2e21
	call UpdateFrameCounter
	jp .asm_13df

Func_1442:
	call Func_fb4
	call Func_11fc
	call Func_2b6d
	call Func_1965
	call Func_39f1
	call Func_3e51
	call Func_2fe2
	call Func_2342
	call Func_3335
	call Func_392e
	call Func_18d1
	call Func_2d73
	call Func_3dce
	call Func_3c72
	call WriteDMACodeToHRAM
	call ResetFrameCounter
	ld a, -2
	ld [hForcedSideScrollSpeed], a
	call Func_31e1
	ld a, 24
	ld [$de83], a
	ld [rWY], a
	ld a, $b0
	ld [$de82], a
	ld a, 165
	ld [rWX], a
	ld hl, vBGWin
	ld bc, $100
	call Func_10e9
	ld hl, vBGWin
	ld bc, $100
.asm_1498
	ld a, [hl]
	sub $a2
	ld [hli], a
	dec bc
	ld a, c
	or b
	jr nz, .asm_1498
	ld a, $90
	ld [$de81], a
	ld a, $78
	ld [$de84], a
	ld hl, $2de5
	call Func_2d62
	ld hl, $9ba0
	call Func_fd9
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
.asm_14bb
	ld hl, $de82
	ld a, [hli]
	cp 166
	jr c, .asm_14cd
	ld a, 165
	ld [rWX], a
	ld a, 144
	ld [rWY], a
	jr .asm_14d2
.asm_14cd
	ld [rWX], a
	ld a, [hl]
	ld [rWY], a
.asm_14d2
	ld a, $90
	ld [rOBP1], a
	call ClearOAMBufferHome
	call ReadJoyPadHome
	call TryTogglePause
	call TryInitNextScreenHome
	call Func_1722
	call Func_1704
	call TickMusicEngineHome
	call HandlePlayerInput
	call Func_1940
	call Func_235e
	call PrepareCameraUpdate
	call Func_2a84
	call Func_3939
	call Func_173b
.asm_1500
	ld a, [rLY]
	cp 88
	jr nz, .asm_1500
	ld a, 176
	ld [rWX], a
	call Func_3252
	call Func_2c9f
	call Func_2e21
	call UpdateFrameCounter
	jr .asm_14bb

Func_1518:
	call Func_fb4
	call Func_11fc
	call Func_2b6d
	call Func_1965
	call Func_39f1
	call Func_3e51
	call Func_2fe2
	call Func_2342
	call Func_2c73
	call Func_3335
	call Func_392e
	call Func_18d1
	call Func_2d73
	call Func_3dce
	call Func_3c72
	call WriteDMACodeToHRAM
	call ResetFrameCounter
	ld a, -1
	ld [hForcedSideScrollSpeed], a
	call Func_31e1
	ld a, 48
	ld [$de83], a
	ld [rWY], a
	ld a, $b8
	ld [$de82], a
	ld a, 165
	ld [rWX], a
	ld hl, $9a00
	ld bc, $1a0
	call Func_10e9
	call Func_fb4
	ld a, $14
	ld [MBC5RomBank], a
	ld bc, $7100
	ld de, $d9af
	call Decompress
	call Func_fb4
	ld hl, vBGWin
	ld bc, $100
	call Func_10e9
	ld bc, $b7c
	ld de, $c7e
	call Func_10c9
	ld a, $87
	ld [$de81], a
	ld a, $78
	ld [$de84], a
	ld hl, $2de5
	call Func_2d62
	ld hl, $9ba0
	call Func_fd9
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
.asm_15ab
	ld a, 128
	ld [rSCY], a
	ld a, [$dec7]
	ld [rSCX], a
	ld hl, $de82
	ld a, [hli]
	cp 166
	jr c, .asm_15c6
	ld a, 165
	ld [rWX], a
	ld a, 144
	ld [rWY], a
	jr .asm_15cb
.asm_15c6
	ld [rWX], a
	ld a, [hl]
	ld [rWY], a
.asm_15cb
	call ClearOAMBufferHome
	call ReadJoyPadHome
	call TryTogglePause
	call Func_1722
	call TickMusicEngineHome
	call HandlePlayerInput
	call Func_1940
	call Func_235e
	call PrepareCameraUpdate
	call Func_2a84
.asm_15e9
	ld a, [rLY]
	cp 64
	jr nz, .asm_15e9
	ld a, [$dec9]
	ld [rSCX], a
	call Func_3939
	call Func_173b
	call Func_3252
.asm_15fd
	ld a, [rLY]
	cp 103
	jr nz, .asm_15fd
	call WaitHBlankStart
	ld a, [hCameraYOffset]
	ld [rSCY], a
	ld a, [hCameraXOffset]
	ld [rSCX], a
	call TryInitNextScreenHome
	call Func_2c2b
	call Func_170c
.asm_1617
	ld a, [rLY]
	cp 112
	jr nz, .asm_1617
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINOFF | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
	call Func_2c9f
	call Func_2e21
	call UpdateFrameCounter
	jp .asm_15ab

Func_162d:
	ld a, [hPaused]
	and a
	ret nz
	ld a, $05
	ld [MBC5RomBank], a
	ld hl, $de82
	ld a, [hli]
	ld c, a
	ld b, [hl]
	ld hl, $7396
	call Func_3ca6
	ld a, [$ffad]
	bit 2, a
	ret nz
	ld hl, $de82
	ld a, [hld]
	cp [hl]
	ld a, [hFrameCounter]
	jr nc, .asm_1652
	cpl
	inc a
.asm_1652
	and $0c
	srl a
	srl a
	ld b, a
	ld c, $00
	ld hl, $7800
	add hl, bc
	ld a, $02
	ld [MBC5RomBank], a
	ld sp, hl
	ld d, $15
	ld hl, $8e90
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	jr nz, .waitCurrentHBlankFinish
	ld hl, $8e20
.waitCurrentHBlankFinish
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .waitCurrentHBlankFinish
.waitHBlankStart
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .waitHBlankStart
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	dec d
	jr nz, .waitCurrentHBlankFinish
.waitCurrentHBlankFinish2
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .waitCurrentHBlankFinish2
.waitHBlankStart2
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .waitHBlankStart2
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld [hl], b
	ld sp, $dffe
	ld a, [$de82]
	sub $10
	ld c, a
	ld a, [hCameraXOffset]
	add c
	ld c, a
	ld a, [hCameraXOffset + 1]
	adc $00
	ld b, a
	ld a, [$ffdd]
	sub c
	ld a, [$ffde]
	sbc b
	ret c
	call Func_1ae2
	ret

Func_16d2:
	ld a, [hPaused]
	and a
	ret nz
	ld a, $05
	ld [MBC5RomBank], a
	ld a, [hFrameCounter]
	and $1c
	srl a
	srl a
	add $f2
	ld l, a
	ld a, $73
	adc $00
	ld h, a
	ld a, [hl]
	ld [$de83], a
	ld hl, $de82
	ld a, [hli]
	ld c, a
	ld b, [hl]
	ld hl, $73bc
	call Func_3ca6
	ret

Func_16fc:
	ld a, Bank(Func_173fa)
	ld [MBC5RomBank], a
	jp Func_173fa

Func_1704:
	ld a, Bank(Func_177a1)
	ld [MBC5RomBank], a
	jp Func_177a1

Func_170c:
	ld a, [hPaused]
	and a
	ret nz
	ld a, $05
	ld [MBC5RomBank], a
	ld hl, $de82
	ld a, [hli]
	ld c, a
	ld b, [hl]
	ld hl, $7ad6
	call Func_3ca6
	ret

Func_1722:
	ld a, [hPaused]
	and a
	ret nz
	ld a, [$ffad]
	bit 2, a
	ret nz
	ld a, [hFrameCounter]
	rra
	ret c
	ld hl, $de81
	ld a, [hli]
	cp [hl]
	ret z
	jr c, .asm_1739
	inc [hl]
	ret
.asm_1739
	dec [hl]
	ret

Func_173b:
	ld a, [hPaused]
	and a
	ret nz
	ld hl, $ddad
	call Func_1748
	ld hl, $ddb8
Func_1748:
	ld a, [hli]
	add [hl]
	bit 7, a
	jr nz, .asm_1754
	cp $28
	jr c, .asm_1754
	ld a, $28
.asm_1754
	ld [hli], a
	ld e, a
	or [hl]
	ret z
	ld a, [hli]
	ld d, a
	ld [$ff8a], a
	ld a, [hFrameCounter]
	rra
	jr c, .asm_1763
	sra d
.asm_1763
	ld a, [hli]
	ld c, a
	ld a, [hld]
	ld b, a
	ld a, d
	bit 7, a
	ld d, $ff
	jr nz, .asm_1770
	ld d, $00
.asm_1770
	add c
	ld c, a
	ld [hli], a
	ld a, b
	adc d
	ld b, a
	ld [hli], a
	ld d, $00
	ld a, e
	add a
	jr nc, .asm_177f
	ld d, $ff
.asm_177f
	ld e, d
	add a
	rl e
	add a
	rl e
	add a
	rl e
	add [hl]
	ld [hli], a
	ld a, [hl]
	adc e
	ld [hli], a
	ld e, a
	ld a, [hl]
	adc d
	ld [hli], a
	ld d, a
	push hl
	ld a, [$ffb6]
	and a
	jr nz, .asm_17e2
	ld a, [$ffb0]
	cp $21
	jr z, .asm_17e2
	ld a, [$ffae]
	bit 1, a
	jr nz, .asm_17e2
	ld a, [$ffdd]
	sub c
	ld l, a
	ld a, [$ffde]
	sbc b
	jr nz, .asm_17e2
	ld a, l
	cp $10
	jr nc, .asm_17e2
	ld a, [hPlayerYPos]
	sub e
	ld a, [hPlayerYPos + 1]
	sbc d
	jr z, .asm_17c7
	inc a
	jr nz, .asm_17e2
	ld a, [hPlayerYPos]
	sub e
	cp $f8
	jr c, .asm_17e2
	jr .asm_17dc
.asm_17c7
	ld a, [$ffaf]
	rra
	jr nc, .asm_17d5
	ld a, [hPlayerYPos]
	sub e
	cp $0f
	jr nc, .asm_17e2
	jr .asm_17dc
.asm_17d5
	ld a, [hPlayerYPos]
	sub e
	cp $1e
	jr nc, .asm_17e2
.asm_17dc
	ld a, [$ffad]
	set 1, a
	ld [$ffad], a
.asm_17e2
	pop hl
	push hl
	push bc
	push de
	ld a, [hli]
	ld d, a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, $05
	ld [MBC5RomBank], a
	ld a, [$ff8a]
	add a
	ld a, [hFrameCounter]
	jr nc, .asm_17f9
	cpl
	inc a
.asm_17f9
	and d
	srl a
	srl a
	add l
	ld l, a
	ld a, h
	adc $00
	ld h, a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld d, b
	ld b, e
	call Func_3c7a
	pop de
	pop bc
	and a
	jr nz, .asm_185e
	call Func_299f
	add (.jumpTable & $ff)
	ld l, a
	ld a, (.jumpTable >> 8)
	adc $00
	ld h, a
	jp hl
.jumpTable
	jp .asm_185c
	jp .asm_185e
	jp .asm_185e
	jp .asm_185e
	jp .asm_185e
	jp .asm_185e
	jp .asm_185c
	jp .asm_185e
	jp .asm_185e
	jp .asm_185e
	jp .asm_185e
	jp .asm_185e
	jp .asm_185e
	jp .asm_185e
	jp .asm_185e
	jp .asm_185e
	jp .asm_185e
	jp .asm_185e
	jp .asm_185e
	jp .asm_185c
	jp .asm_185e
.asm_185c
	pop hl
	ret
.asm_185e
	pop hl
	ld bc, $fff8
	add hl, bc
	sub a
	ld [hli], a
	ld [hli], a
	ld [hl], a
	ret

Func_1868:
	ld de, $ddae
	call Func_1873
	and a
	ret z
	ld de, $ddb9
Func_1873:
	ld a, [de]
	and a
	ret nz
	inc e
	ld a, [de]
	and a
	ret nz
	push hl
	dec e
	dec e
	ld a, [bc]
	inc bc
	ld [de], a
	inc e
	ld a, [bc]
	inc bc
	ld [de], a
	inc e
	ld a, [bc]
	inc bc
	bit 5, [hl]
	jr z, .asm_188d
	cpl
	inc a
.asm_188d
	ld [de], a
	inc e
	bit 5, [hl]
	dec hl
	dec hl
	jr nz, .asm_18a3
	inc bc
	ld a, [bc]
	inc bc
	add [hl]
	inc hl
	ld [de], a
	inc e
	ld a, [hld]
	adc $00
	ld [de], a
	inc e
	jr .asm_18af
.asm_18a3
	ld a, [bc]
	inc bc
	inc bc
	add [hl]
	inc hl
	ld [de], a
	inc e
	ld a, [hld]
	adc $ff
	ld [de], a
	inc e
.asm_18af
	sub a
	ld [de], a
	inc e
	ld a, [bc]
	inc bc
	dec hl
	dec hl
	add [hl]
	inc hl
	ld [de], a
	inc e
	ld a, [hl]
	adc $ff
	ld [de], a
	inc e
	ld a, [bc]
	inc bc
	ld [de], a
	inc e
	ld a, [bc]
	inc bc
	ld [de], a
	inc e
	ld a, [bc]
	ld [de], a
	pop hl
	ld a, $0e
	call Func_3e1b
	sub a
	ret

Func_18d1:
	ld hl, $ddad
	ld b, $16
	sub a
.asm_18d7
	ld [hli], a
	dec b
	jr nz, .asm_18d7
	ret

INCBIN "baserom.gbc", $18dc, $1940 - $18dc

Func_1940:
	ld a, Bank(Func_17929)
	ld [MBC5RomBank], a
	jp Func_17929

Func_1948:
	ld [$ffc3], a
	sub a
	ld [$ffb2], a
	ld [$ffb3], a
	ld [$ffb4], a
	ld [$ffb6], a
	ld [$ffaf], a
	ld [$ffd1], a
	ld [$ffd2], a
	ld a, [$ffad]
	set 6, a
	ld [$ffad], a
	ld a, $0c
	call Func_3e1b
	ret

Func_1965:
	ld c, $c2
	ld b, $06
	sub a
.asm_196a
	ld [$ff00+c], a
	inc c
	dec b
	jr nz, .asm_196a
	push hl
	ld b, $04
.asm_1972
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	dec b
	jr nz, .asm_1972
	sub a
	ld [$ff00+c], a
	inc c
	pop hl
	ld b, $04
.asm_197e
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	dec b
	jr nz, .asm_197e
	sub a
	ld [$ff00+c], a
	inc c
	ld [$ff00+c], a
	ret

HandlePlayerInput:
	ld a, [hPaused]
	and a
	ret nz
	ld hl, $de84
	ld a, [hl]
	and a
	jr z, .asm_1996
	dec [hl]
	ret
.asm_1996
	ld hl, $ffad
	ld a, [hli]
	ld b, a
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld d, a
	ld a, [wHeldKeys]
	ld e, a
	ld a, [$ffb5]
	and a
	jp nz, Func_1a37
	bit 2, b
	jp nz, Func_1a73
	ld a, [hl]
	add (.jumpTable & $ff)
	ld l, a
	ld a, (.jumpTable >> 8)
	adc 0
	ld h, a
	jp hl
.jumpTable
	jp Func_1afd
	jp Func_1d20
	jp Func_1d61
	jp Func_1dc9
	jp Func_1e1e
	jp Func_1e86
	jp Func_1e8c
	jp Func_1f73
	jp Func_1fcf
	jp Func_1fe3
	jp Func_2045
	jp Func_2081
	jp Func_2145
	jp Func_226c
	jp Func_22c9

Func_19e5:
	bit 1, b
	jr nz, asm_19f2
Func_19e9:
	ld hl, $ffad
	ld a, b
	ld [hli], a
	ld a, c
	ld [hli], a
	ld [hl], d
	ret
asm_19f2:
	ld hl, $ffb9
	ld a, [hl]
	inc [hl]
	and a
	jr nz, .asm_1a2d
	bit 4, b
	jr z, .asm_1a15
	ld a, [$ffb0]
	and a
	jr nz, .asm_1a15
	bit 4, d
	jr nz, .asm_1a15
	ld a, $d0
	ld [$ffc6], a
	res 4, b
	ld d, $20
	ld hl, $2dbd
	call Func_2d62
.asm_1a15
	ld a, $13
	call Func_3e1b
	ld a, [hCurHealth]
	sub $01
	jr nc, .asm_1a29
	call Func_1ae2
	set 2, b
	ld d, $00
	jr .asm_1a35
.asm_1a29
	ld [hCurHealth], a
	jr .asm_1a35
.asm_1a2d
	cp $78
	jr c, .asm_1a35
	sub a
	ld [hl], a
	res 1, b
.asm_1a35
	jr Func_19e9

Func_1a37:
	call Func_2324
	sub a
	ld [$ffb9], a
	ld [$ffb7], a
	ld hl, $ffb5
	ld a, [hl]
	inc [hl]
	cp $01
	jr nz, .asm_1a64
	ld a, [$fff2]
	cp $04
	jr nz, .asm_1a55
	res 5, b
	ld hl, $2dc5
	jr .asm_1a58
.asm_1a55
	ld hl, $2dad
.asm_1a58
	call Func_2d62
	ld hl, $406e
	call Func_3e71
	jp Func_19e9
.asm_1a64
	cp $d0
	jp c, Func_19e9
	push bc
	push de
	call Func_3ddc
	pop de
	pop bc
	jp Func_19e9

Func_1a73:
	sub a
	ld [$ffb9], a
	ld [$ffb7], a
	bit 4, b
	jr nz, .asm_1a84
	ld hl, $2dbd
	call Func_2d62
	jr .asm_1adf
.asm_1a84
	push bc
	push de
	ld a, [hPlayerXPos]
	sub $0a
	bit 5, b
	jr z, .asm_1a90
	add $0c
.asm_1a90
	ld c, a
	ld a, [hPlayerYPos]
	sub $18
	ld b, a
	ld hl, $1af3
	call Func_3c98
	ld hl, $2db9
	call Func_2d62
	ld hl, $ffb8
	ld a, [hFrameCounter]
	rra
	jr nc, .asm_1aab
	inc [hl]
.asm_1aab
	ld a, [hl]
	cp $69
	jr z, .asm_1abd
	cp $01
	jr nz, .asm_1add
	inc [hl]
	ld hl, $4083
	call Func_3e71
	jr .asm_1add
.asm_1abd
	inc [hl]
	ld a, [wCurScreen]
	dec a
	ld [wCurScreen], a
	ld a, [hMaxHealth]
	ld [hCurHealth], a
	ld a, [hNumLives]
	and a
	jr nz, .asm_1ad5
	ld a, $4b
	ld [wCurScreen], a
	jr .asm_1ada
.asm_1ad5
	sub $01
	daa
	ld [hNumLives], a
.asm_1ada
	call Func_3ddc
.asm_1add
	pop de
	pop bc
.asm_1adf
	jp Func_19e9

Func_1ae2:
	ld a, [$ffad]
	bit 2, a
	ret nz
	set 2, a
	ld [$ffad], a
	sub a
	ld [hCurHealth], a
	ld [$ffb0], a
	jp Func_2326

INCBIN "baserom.gbc", $1af3, $1afd - $1af3

Func_1afd:
	bit 4, d
	jp nz, Func_1d0e
	ld a, [$ffb6]
	and a
	jr z, .asm_1b1d
	dec a
	ld [$ffb6], a
	jr nz, .asm_1b0e
	res 2, d
.asm_1b0e
	ld a, e
	and $30
	jr nz, .asm_1b1d
	bit 5, b
	jr z, .asm_1b1b
	set 5, e
	jr .asm_1b1d
.asm_1b1b
	set 4, e
.asm_1b1d
	call Func_1b2f
	call Func_1b46
	call Func_1bdc
	call Func_1c9f
	call Func_1cdc
	jp Func_19e5

Func_1b2f:
	ld a, [$ffb4]
	and a
	ret nz
	bit 7, e
	jr z, .asm_1b43
	bit 4, b
	jr z, .asm_1b43
	ld d, $01
	ld hl, $2d89
	jp Func_2d62
.asm_1b43
	res 0, d
	ret

Func_1b46:
	ld a, [$ffe8]
	and a
	jr nz, .asm_1ba3
	ld a, [$ffc6]
	bit 7, a
	jr nz, .asm_1b55
	cp $38
	jr nc, .asm_1b69
.asm_1b55
	bit 5, e
	jr z, .asm_1b5f
	set 5, b
	ld a, $fe
	jr .asm_1b71
.asm_1b5f
	bit 4, e
	jr z, .asm_1b69
	res 5, b
	ld a, $02
	jr .asm_1b71
.asm_1b69
	sub a
	ld [$ffc4], a
.asm_1b6c
	res 2, d
	res 3, d
	ret
.asm_1b71
	ld [$ffc4], a
	bit 4, b
	jr z, .asm_1b6c
	ld a, [$ffb4]
	and a
	jr nz, .asm_1b69
	bit 0, d
	jr nz, .asm_1b69
	bit 3, b
	jr nz, .asm_1b98
	bit 2, d
	ret nz
	ld d, $04
	ld hl, $2d8d
	ld a, [$ffb6]
	and a
	jp z, Func_2d62
	ld hl, $2d91
	jp Func_2d62
.asm_1b98
	bit 3, d
	ret nz
	ld d, $08
	ld hl, $2d95
	jp Func_2d62
.asm_1ba3
	res 2, d
	res 3, d
	sub a
	bit 5, e
	jr z, .asm_1bb2
	set 5, b
	ld a, $fe
	jr .asm_1bba
.asm_1bb2
	bit 4, e
	jr z, .asm_1bba
	res 5, b
	ld a, $02
.asm_1bba
	ld [$ffc4], a
	bit 4, b
	ret z
	ld a, [$ffb4]
	and a
	ret nz
	bit 0, d
	ret nz
	ld hl, $78ec
	ld a, [hFrameCounter]
	bit 5, a
	jr z, .asm_1bd2
	ld hl, $78f0
.asm_1bd2
	ld a, l
	ld [$ffd6], a
	ld a, h
	ld [$ffd7], a
	sub a
	ld [$ffd5], a
	ret

Func_1bdc:
	ld hl, $ffb2
	ld a, [hli]
	and a
	jr z, .asm_1bfb
	dec l
	dec [hl]
	inc hl
	jr nz, .asm_1bf3
	bit 1, e
	jr z, .asm_1bf3
	ld a, [hNumCarrots]
	and a
	jr z, .asm_1bf3
	ld [hl], $01
.asm_1bf3
	ld a, $d0
	ld [$ffc6], a
	res 4, b
	jr .asm_1c58
.asm_1bfb
	bit 1, e
	jr z, .asm_1c49
	ld a, [hl]
	and a
	jr z, .asm_1c30
	inc [hl]
	ld a, [hl]
	cp $1c
	jr nz, .asm_1c0e
	ld a, $0a
	call Func_3e1b
.asm_1c0e
	ld a, [hNumCarrots]
	add $1c
	add $10
	cp [hl]
	jr nc, .asm_1c1b
	ld [hl], $00
	jr .asm_1c30
.asm_1c1b
	ld a, [hl]
	cp $1c
	jr c, .asm_1c30
	jr nz, .asm_1c28
	ld hl, $2da5
	call Func_2d62
.asm_1c28
	ld a, $f0
	ld [$ffc6], a
	res 4, b
	jr .asm_1c51
.asm_1c30
	bit 6, b
	jr nz, .asm_1c4d
	bit 4, b
	jr z, .asm_1c58
	ld a, [$ffb4]
	and a
	ret nz
	ld a, $06
	ld [$ffb2], a
	ld a, $0b
	call Func_3e1b
	set 6, b
	jr Func_1bdc
.asm_1c49
	res 6, b
	ld [hl], $00
.asm_1c4d
	bit 4, b
	jr z, .asm_1c58
.asm_1c51
	res 5, d
	res 6, d
	res 7, d
	ret
.asm_1c58
	ld a, [$ffb4]
	and a
	ret nz
	ld a, [$ffc6]
	add a
	jr c, .asm_1c94
	bit 1, e
	jr z, .asm_1c7b
	ld a, [$ffb3]
	and a
	jr nz, .asm_1c7b
	bit 7, b
	jr z, .asm_1c7b
	set 6, b
	bit 7, d
	ret nz
	ld d, $80
	ld hl, $2dc1
	jp Func_2d62
.asm_1c7b
	ld a, [$ffc6]
	cp $38
	jr c, .asm_1c89
	ld d, $00
	ld hl, $2db5
	jp Func_2d62
.asm_1c89
	bit 6, d
	ret nz
	ld d, $40
	ld hl, $2da1
	jp Func_2d62
.asm_1c94
	bit 5, d
	ret nz
	ld d, $20
	ld hl, $2d9d
	jp Func_2d62

Func_1c9f:
	ld hl, $ffb4
	ld a, [hl]
	and a
	jr z, .asm_1cac
	dec [hl]
	ld d, $00
	sub a
	ld [$ffb3], a
.asm_1cac
	bit 0, e
	jr nz, .asm_1cb3
	res 0, c
	ret
.asm_1cb3
	bit 0, c
	ret nz
	ld a, [hl]
	and a
	ret nz
	bit 0, d
	ret nz
	bit 7, d
	ret nz
	ld a, [$ffc6]
	bit 7, a
	jr nz, .asm_1cc8
	cp $38
	ret nc
.asm_1cc8
	set 0, c
	ld d, $00
	sub a
	ld [$ffb3], a
	ld [hl], $0e
	ld a, $01
	call Func_3e1b
	ld hl, $2da9
	jp Func_2d62

Func_1cdc:
	ld a, [$ffb4]
	and a
	ret nz
	ld a, d
	and $fd
	ret nz
	bit 4, b
	jr z, .asm_1d0b
	ld a, [wNewKeys]
	bit PADB_SELECT, a
	jr z, .asm_1d00
	ld a, [hForcedSideScrollSpeed]
	and a
	jr nz, .asm_1d00
	ld a, $3c
	ld [$ffb1], a
	ld d, $10
	ld hl, $2d99
	jp Func_2d62
.asm_1d00
	bit 1, d
	ret nz
	ld d, $02
	ld hl, $2d85
	jp Func_2d62
.asm_1d0b
	res 1, d
	ret

Func_1d0e:
	call Func_2329
	ld hl, $ffb1
	dec [hl]
	jr nz, .asm_1d1d
	ld d, $02
	ld a, b
	xor $80
	ld b, a
.asm_1d1d
	jp Func_19e5

Func_1d20:
	call Func_232c
	ld d, $00
	res 4, b
	ld a, [hFrameCounter]
	and $03
	jr nz, .asm_1d39
	ld a, [$ffb7]
	dec a
	ld [$ffb7], a
	jr nz, .asm_1d39
	sub a
	ld [$ffb0], a
	jr .asm_1d5e
.asm_1d39
	bit 7, e
	jr z, .asm_1d41
	ld a, $14
	jr .asm_1d47
.asm_1d41
	bit 6, e
	jr z, .asm_1d49
	ld a, $ec
.asm_1d47
	ld [$ffc6], a
.asm_1d49
	sub a
	bit 5, e
	jr z, .asm_1d54
	set 5, b
	ld a, $ff
	jr .asm_1d5c
.asm_1d54
	bit 4, e
	jr z, .asm_1d5c
	res 5, b
	ld a, $01
.asm_1d5c
	ld [$ffc4], a
.asm_1d5e
	jp Func_19e5

Func_1d61:
	sub a
	ld [$ffc4], a
	ld [$ff8a], a
	ld hl, hPlayerXPos
	ld a, [$ffba]
	sub [hl]
	inc l
	ld a, [$ffbb]
	sbc [hl]
	jr c, .asm_1d79
	ld hl, $ffba
	ld a, $ff
	jr .asm_1d88
.asm_1d79
	ld hl, $ffbc
	ld a, [hPlayerXPos]
	sub [hl]
	inc l
	ld a, [hPlayerXPos + 1]
	sbc [hl]
	dec l
	ld a, $01
	jr c, .asm_1d93
.asm_1d88
	ld [$ff8a], a
	ld a, [hli]
	ld [hPlayerXPos], a
	ld a, [hl]
	ld [hPlayerXPos + 1], a
	sub a
	ld [$ffc5], a
.asm_1d93
	bit 5, e
	jr z, .asm_1d9b
	set 5, b
	jr .asm_1da1
.asm_1d9b
	bit 4, e
	jr z, .asm_1da1
	res 5, b
.asm_1da1
	ld a, [wNewKeys]
	rra
	jr nc, .asm_1dc6
	bit 5, b
	ld a, [$ff8a]
	jr z, .asm_1db4
	inc a
	jr z, .asm_1dc6
	ld a, $e0
	jr .asm_1db9
.asm_1db4
	dec a
	jr z, .asm_1dc6
	ld a, $20
.asm_1db9
	ld [$ffc5], a
	ld a, $04
	call Func_3e1b
	ld hl, $2dcd
	call Func_2d62
.asm_1dc6
	jp Func_19e5

Func_1dc9:
	call Func_2324
	sub a
	bit 6, e
	jr z, .asm_1dd5
	ld a, $f4
	jr .asm_1ddb
.asm_1dd5
	bit 7, e
	jr z, .asm_1ddb
	ld a, $0c
.asm_1ddb
	ld [$ffc6], a
	ld hl, $77c9
	bit 7, b
	jr z, .asm_1de7
	ld hl, $77ec
.asm_1de7
	and a
	ld a, $0c
	jr z, .asm_1df0
	ld a, [hPlayerYPos]
	and $1c
.asm_1df0
	add l
	ld [$ffd6], a
	ld a, h
	adc $00
	ld [$ffd7], a
	sub a
	ld [$ffd5], a
	bit 4, b
	jr nz, .asm_1e14
	bit 1, e
	jr z, .asm_1e19
	bit 6, b
	jr nz, .asm_1e1b
	ld a, $06
	ld [$ffb2], a
	ld a, $0b
	call Func_3e1b
	set 0, b
	set 6, b
.asm_1e14
	sub a
	ld [$ffb0], a
	jr .asm_1e1b
.asm_1e19
	res 6, b
.asm_1e1b
	jp Func_19e5

Func_1e1e:
	sub a
	ld [$ffc4], a
	ld [$ff8a], a
	ld hl, hPlayerXPos
	ld a, [$ffba]
	sub [hl]
	inc l
	ld a, [$ffbb]
	sbc [hl]
	jr c, .asm_1e36
	ld hl, $ffba
	ld a, $ff
	jr .asm_1e45
.asm_1e36
	ld hl, $ffbc
	ld a, [hPlayerXPos]
	sub [hl]
	inc l
	ld a, [hPlayerXPos + 1]
	sbc [hl]
	dec l
	ld a, $01
	jr c, .asm_1e50
.asm_1e45
	ld [$ff8a], a
	ld a, [hli]
	ld [hPlayerXPos], a
	ld a, [hl]
	ld [hPlayerXPos + 1], a
	sub a
	ld [$ffc5], a
.asm_1e50
	bit 5, e
	jr z, .asm_1e58
	set 5, b
	jr .asm_1e5e
.asm_1e58
	bit 4, e
	jr z, .asm_1e5e
	res 5, b
.asm_1e5e
	ld a, [wNewKeys]
	rra
	jr nc, .asm_1e83
	bit 5, b
	ld a, [$ff8a]
	jr z, .asm_1e71
	inc a
	jr z, .asm_1e83
	ld a, $f0
	jr .asm_1e76
.asm_1e71
	dec a
	jr z, .asm_1e83
	ld a, $10
.asm_1e76
	ld [$ffc5], a
	ld a, $04
	call Func_3e1b
	ld hl, $2dd5
	call Func_2d62
.asm_1e83
	jp Func_19e5

Func_1e86:
	call Func_2324
	jp Func_19e5

Func_1e8c:
	call Func_2324
	ld a, [$ffc0]
	and a
	jr z, .asm_1e9a
	dec a
	ld [$ffc0], a
	jp .asm_1f70
.asm_1e9a
	ld a, [$ffc1]
	and a
	jr z, .asm_1eb6
	dec a
	ld [$ffc1], a
	jp nz, .asm_1f70
	sub a
	ld [$ffb0], a
	ld hl, hPlayerYPos
	ld a, [hl]
	sub $01
	ld [hli], a
	ld a, [hl]
	sbc $00
	ld [hl], a
	jp .asm_1f70
.asm_1eb6
	sub a
	bit 5, e
	jr z, .asm_1ec1
	set 5, b
	ld a, $f4
	jr .asm_1ec9
.asm_1ec1
	bit 4, e
	jr z, .asm_1ec9
	res 5, b
	ld a, $0c
.asm_1ec9
	ld [$ffc5], a
	ld hl, $786e
	ld a, [hPlayerXPos]
	bit 2, a
	jr z, .asm_1ed7
	ld hl, $7872
.asm_1ed7
	ld a, l
	ld [$ffd6], a
	ld a, h
	ld [$ffd7], a
	sub a
	ld [$ffd5], a
	bit 1, c
	jr z, .asm_1ef2
	bit 6, e
	jr z, .asm_1ef2
	ld a, $2a
	ld [$ffc1], a
	ld hl, $2de1
	call Func_2d62
.asm_1ef2
	push bc
	push de
	ld hl, hPlayerXPos
	ld a, [hli]
	and $f0
	ld c, a
	ld b, [hl]
	ld hl, $ffaa
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, $05
	ld [MBC5RomBank], a
	ld a, [hli]
	ld [$ff8a], a
.asm_1f0a
	ld a, [$ff8a]
	and a
	jr z, .asm_1f6e
	dec a
	ld [$ff8a], a
	ld a, [hli]
	ld d, a
	and $0f
	swap a
	ld e, a
	cp c
	jr nz, .asm_1f25
	ld a, d
	and $f0
	swap a
	ld d, a
	cp b
	jr z, .asm_1f28
.asm_1f25
	inc hl
	jr .asm_1f0a
.asm_1f28
	ld a, [hl]
	ld [$ff8b], a
	ld hl, hPlayerYPos
	ld a, [hli]
	ld e, a
	ld d, [hl]
	dec de
	ld a, e
	and $f0
	ld e, a
	push bc
	push de
	ld h, b
	ld l, c
	add hl, hl
	add hl, hl
	ld b, h
	ld h, d
	ld l, e
	add hl, hl
	add hl, hl
	ld l, h
	ld h, $c5
	sla l
	ld a, [hli]
	ld h, [hl]
	sla b
	add b
	ld l, a
	jr nc, .asm_1f4f
	inc h
.asm_1f4f
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, e
	and $30
	rrca
	rrca
	add l
	ld l, a
	ld a, c
	and $30
	swap a
	add l
	ld l, a
	ld a, [$ff8b]
	ld [hl], a
	pop de
	pop bc
	call PrepareDrawMetatile
	call DrawMetatile_HBlank
	call DrawMetatileGBCAttributes_HBlank
.asm_1f6e
	pop de
	pop bc
.asm_1f70
	jp Func_19e5

Func_1f73:
	sub a
	ld [$ffc4], a
	ld [$ff8a], a
	ld hl, hPlayerXPos
	ld a, [$ffba]
	sub [hl]
	inc l
	ld a, [$ffbb]
	sbc [hl]
	jr c, .asm_1f8b
	ld hl, $ffba
	ld a, $ff
	jr .asm_1f9a
.asm_1f8b
	ld hl, $ffbc
	ld a, [hPlayerXPos]
	sub [hl]
	inc l
	ld a, [hPlayerXPos + 1]
	sbc [hl]
	dec l
	ld a, $01
	jr c, .asm_1fa5
.asm_1f9a
	ld [$ff8a], a
	ld a, [hli]
	ld [hPlayerXPos], a
	ld a, [hl]
	ld [hPlayerXPos + 1], a
	sub a
	ld [$ffc5], a
.asm_1fa5
	ld a, [$ff8a]
	bit 5, e
	jr z, .asm_1fb4
	set 5, b
	inc a
	jr z, .asm_1fc1
	ld a, $f0
	jr .asm_1fbf
.asm_1fb4
	bit 4, e
	jr z, .asm_1fc1
	res 5, b
	dec a
	jr z, .asm_1fc1
	ld a, $10
.asm_1fbf
	ld [$ffc5], a
.asm_1fc1
	ld a, [hFrameCounter]
	and $0f
	jr nz, .asm_1fcc
	ld a, $05
	call Func_3e1b
.asm_1fcc
	jp Func_19e5

Func_1fcf:
	call Func_2324
	bit 5, e
	jr z, .asm_1fda
	set 5, b
	jr .asm_1fe0
.asm_1fda
	bit 4, e
	jr z, .asm_1fe0
	res 5, b
.asm_1fe0
	jp Func_19e5

Func_1fe3:
	sub a
	ld [$ffc4], a
	ld [$ff8a], a
	ld hl, hPlayerXPos
	ld a, [$ffba]
	sub [hl]
	inc l
	ld a, [$ffbb]
	sbc [hl]
	jr c, .asm_1ffb
	ld hl, $ffba
	ld a, $ff
	jr .asm_200a
.asm_1ffb
	ld hl, $ffbc
	ld a, [hPlayerXPos]
	sub [hl]
	inc l
	ld a, [hPlayerXPos + 1]
	sbc [hl]
	dec l
	ld a, $01
	jr c, .asm_2015
.asm_200a
	ld [$ff8a], a
	ld a, [hli]
	ld [hPlayerXPos], a
	ld a, [hl]
	ld [hPlayerXPos + 1], a
	sub a
	ld [$ffc5], a
.asm_2015
	bit 5, e
	jr z, .asm_201d
	set 5, b
	jr .asm_2023
.asm_201d
	bit 4, e
	jr z, .asm_2023
	res 5, b
.asm_2023
	ld a, [wNewKeys]
	rra
	jr nc, .asm_2042
	bit 5, b
	ld a, [$ff8a]
	jr z, .asm_2036
	inc a
	jr z, .asm_2042
	ld a, $f8
	jr .asm_203b
.asm_2036
	dec a
	jr z, .asm_2042
	ld a, $08
.asm_203b
	ld [$ffc5], a
	ld a, $04
	call Func_3e1b
.asm_2042
	jp Func_19e5

Func_2045:
	sub a
	ld [$ffc4], a
	ld [$ff8a], a
	ld hl, $ffbc
	ld a, [hPlayerXPos]
	sub [hl]
	inc l
	ld a, [hPlayerXPos + 1]
	sbc [hl]
	dec l
	jr c, .asm_2064
	ld a, $01
	ld [$ff8a], a
	ld a, [hli]
	ld [hPlayerXPos], a
	ld a, [hl]
	ld [hPlayerXPos + 1], a
	sub a
	ld [$ffc5], a
.asm_2064
	ld a, [wNewKeys]
	rra
	jr nc, .asm_207e
	ld a, [$ff8a]
	dec a
	jr z, .asm_207e
	ld a, $28
	ld [$ffc5], a
	ld a, $04
	call Func_3e1b
	ld hl, $2df9
	call Func_2d62
.asm_207e
	jp Func_19e5

Func_2081:
	call Func_2324
	ld a, [$ffd6]
	cp $3b
	jp nz, .asm_2121
	ld a, [$ffd7]
	cp $78
	jp nz, .asm_2121
	sub a
	ld [$ff8a], a
	ld a, $02
	ld [$ff8b], a
.asm_2099
	ld hl, $ffba
	ld a, [hPlayerXPos]
	cp [hl]
	inc hl
	jr nz, .asm_20ad
	ld a, [hPlayerXPos + 1]
	cp [hl]
	jr nz, .asm_20ad
	ld hl, $ff8a
	inc [hl]
	jr .asm_20d4
.asm_20ad
	ld hl, $ffba
	ld a, [hPlayerXPos]
	sub [hl]
	inc hl
	ld a, [hPlayerXPos + 1]
	sbc [hl]
	ld hl, hPlayerXPos
	jr c, .asm_20c6
	ld a, [hl]
	sub $01
	ld [hli], a
	ld a, [hl]
	sbc $00
	ld [hl], a
	jr .asm_20ce
.asm_20c6
	ld a, [hl]
	add $01
	ld [hli], a
	ld a, [hl]
	adc $00
	ld [hl], a
.asm_20ce
	ld hl, $ff8b
	dec [hl]
	jr nz, .asm_2099
.asm_20d4
	ld a, $02
	ld [$ff8b], a
.asm_20d8
	ld hl, $ffbc
	ld a, [hPlayerYPos]
	cp [hl]
	inc hl
	jr nz, .asm_20ec
	ld a, [hPlayerYPos + 1]
	cp [hl]
	jr nz, .asm_20ec
	ld hl, $ff8a
	inc [hl]
	jr .asm_2113
.asm_20ec
	ld hl, $ffbc
	ld a, [hPlayerYPos]
	sub [hl]
	inc hl
	ld a, [hPlayerYPos + 1]
	sbc [hl]
	ld hl, hPlayerYPos
	jr c, .asm_2105
	ld a, [hl]
	sub $01
	ld [hli], a
	ld a, [hl]
	sbc $00
	ld [hl], a
	jr .asm_210d
.asm_2105
	ld a, [hl]
	add $01
	ld [hli], a
	ld a, [hl]
	adc $00
	ld [hl], a
.asm_210d
	ld hl, $ff8b
	dec [hl]
	jr nz, .asm_20d8
.asm_2113
	ld a, [$ff8a]
	cp $02
	jr nz, .asm_2142
	ld hl, $2e01
	call Func_2d62
	jr .asm_2142
.asm_2121
	ld a, [$ffd6]
	sub $4d
	ld a, [$ffd7]
	sbc $79
	jr c, .asm_2142
	bit 7, b
	ld a, [$ffd6]
	jr nz, .asm_2139
	sub $4d
	cp $0c
	jr c, .asm_2142
	jr .asm_213f
.asm_2139
	sub $60
	cp $0c
	jr c, .asm_2142
.asm_213f
	sub a
	ld [$ffb0], a
.asm_2142
	jp Func_19e5

Func_2145:
	sub a
	ld [$ffc4], a
	ld [$ff8a], a
	ld hl, hPlayerXPos
	ld a, [$ffba]
	sub [hl]
	inc l
	ld a, [$ffbb]
	sbc [hl]
	jr c, .asm_215d
	ld hl, $ffba
	ld a, $ff
	jr .asm_216c
.asm_215d
	ld hl, $ffbc
	ld a, [hPlayerXPos]
	sub [hl]
	inc l
	ld a, [hPlayerXPos + 1]
	sbc [hl]
	dec l
	ld a, $01
	jr c, .asm_2177
.asm_216c
	ld [$ff8a], a
	ld a, [hli]
	ld [hPlayerXPos], a
	ld a, [hl]
	ld [hPlayerXPos + 1], a
	sub a
	ld [$ffc5], a
.asm_2177
	bit 5, e
	jr z, .asm_2183
	ld a, [$ffeb]
	set 7, a
	ld [$ffeb], a
	jr .asm_218d
.asm_2183
	bit 4, e
	jr z, .asm_218d
	ld a, [$ffeb]
	res 7, a
	ld [$ffeb], a
.asm_218d
	ld a, [$ffeb]
	add a
	ld a, [$ff8a]
	jr nc, .asm_219b
	inc a
	jr z, .asm_21a2
	ld a, $f0
	jr .asm_21a0
.asm_219b
	dec a
	jr z, .asm_21a2
	ld a, $10
.asm_21a0
	ld [$ffc5], a
.asm_21a2
	ld a, [hFrameCounter]
	and $03
	jr nz, .asm_21bf
	ld hl, $ffeb
	bit 7, [hl]
	jr z, .asm_21b7
	ld a, [hl]
	and $7f
	jr z, .asm_21bf
	dec [hl]
	jr .asm_21bf
.asm_21b7
	ld a, [hl]
	and $7f
	cp $08
	jr z, .asm_21bf
	inc [hl]
.asm_21bf
	ld hl, $7973
	bit 7, b
	jr z, .asm_21c9
	ld hl, $799a
.asm_21c9
	ld a, [$ffeb]
	and $7f
	res 5, b
	cp $05
	jr c, .asm_21d5
	set 5, b
.asm_21d5
	add a
	add a
	add l
	ld [$ffd6], a
	ld a, h
	adc $00
	ld [$ffd7], a
	sub a
	ld [$ffd5], a
	ld a, [$ffbe]
	ld l, a
	ld a, [$ffbf]
	ld h, a
	ld a, [hPlayerYPos]
	sub l
	ld a, [hPlayerYPos + 1]
	sbc h
	ld a, $fd
	jr c, .asm_21f4
	ld a, $f8
.asm_21f4
	ld [$ffc6], a
	push bc
	push de
	ld a, [hPlayerXPos]
	ld c, a
	ld a, [hPlayerYPos]
	ld b, a
	ld a, [$ffeb]
	add a
	jr c, .asm_221a
	add $48
	ld l, a
	ld a, $22
	adc $00
	ld h, a
	ld a, [hli]
	add c
	sub $07
	ld c, a
	ld a, [hl]
	add b
	add $09
	ld b, a
	ld hl, $51
	jr .asm_222f
.asm_221a
	add $5a
	ld l, a
	ld a, $22
	adc $00
	ld h, a
	ld a, [hli]
	add c
	add $0a
	ld c, a
	ld a, [hl]
	add b
	add $07
	ld b, a
	ld hl, $41
.asm_222f
	ld a, [hFrameCounter]
	bit 2, a
	jr z, .asm_2238
	call Func_3c98
.asm_2238
	pop de
	pop bc
	ld a, [hFrameCounter]
	and $0f
	jr nz, .asm_2245
	ld a, $05
	call Func_3e1b
.asm_2245
	jp Func_19e5

INCBIN "baserom.gbc", $2248, $226c - $2248

Func_226c:
	call Func_2324
	res 4, b
	set 5, b
	ld a, [hFrameCounter]
	and $03
	jr nz, .asm_2285
	ld a, [$ffb7]
	dec a
	ld [$ffb7], a
	jr nz, .asm_2285
	sub a
	ld [$ffb0], a
	jr .asm_22c6
.asm_2285
	bit 7, e
	jr z, .asm_228d
	ld a, $10
	jr .asm_2293
.asm_228d
	bit 6, e
	jr z, .asm_2295
	ld a, $f0
.asm_2293
	ld [$ffc6], a
.asm_2295
	ld a, $f0
	bit 5, e
	jr z, .asm_229f
	ld a, $e0
	jr .asm_22a5
.asm_229f
	bit 4, e
	jr z, .asm_22a5
	ld a, $10
.asm_22a5
	ld [$ffc5], a
	ld hl, hPlayerYPos
	ld a, [hli]
	sub $30
	ld a, [hld]
	sbc $00
	jr nc, .asm_22b9
	ld a, $30
	ld [hli], a
	sub a
	ld [hl], a
	jr .asm_22c6
.asm_22b9
	ld a, [hli]
	sub $7c
	ld a, [hld]
	sbc $00
	jr c, .asm_22c6
	ld a, $7c
	ld [hli], a
	sub a
	ld [hl], a
.asm_22c6
	jp Func_19e5

Func_22c9:
	ld hl, hPlayerYPos
	ld a, [$ffba]
	sub [hl]
	inc l
	ld a, [$ffbb]
	sbc [hl]
	jr c, .asm_22e0
	ld a, [$ffbb]
	ld [hld], a
	ld a, [$ffba]
	ld [hl], a
	sub a
	ld [$ffc6], a
	jr .asm_22f5
.asm_22e0
	ld a, [wNewKeys]
	rra
	jr nc, .asm_22f5
	ld a, $e0
	ld [$ffc6], a
	ld a, $04
	call Func_3e1b
	ld hl, $2e0d
	call Func_2d62
.asm_22f5
	push bc
	push de
	ld a, $05
	ld [MBC5RomBank], a
	ld hl, $78ab
	bit 4, b
	jr nz, .asm_2314
	ld a, [hFrameCounter]
	and $0c
	srl a
	add $a3
	ld l, a
	ld a, $78
	adc $00
	ld h, a
	ld a, [hli]
	ld h, [hl]
	ld l, a
.asm_2314
	ld a, [hPlayerYPos]
	ld b, a
	ld a, [hPlayerXPos]
	ld c, a
	call Func_3c98
	pop de
	pop bc
	res 4, b
	jp Func_19e5

Func_2324:
	ld d, $00
Func_2326:
	sub a
	ld [$ffaf], a
Func_2329:
	sub a
	ld [$ffc5], a
Func_232c:
	sub a
	ld [$ffc2], a
	ld [$ffc3], a
	ld [$ffc4], a
	ld [$ffc6], a
	ld [$ffb2], a
	ld [$ffb3], a
	ld [$ffb4], a
	ld [$ffb6], a
	ld [$ffd1], a
	ld [$ffd2], a
	ret

Func_2342:
	ld a, $06
	ld [MBC5RomBank], a
	ld a, [hli]
	ld [$ffaa], a
	ld a, [hli]
	ld [$ffab], a
	ld c, $ac
	ld b, $14
	sub a
.asm_2352
	ld [$ff00+c], a
	inc c
	dec b
	jr nz, .asm_2352
	ld a, [$ffad]
	set 4, a
	ld [$ffad], a
	ret

Func_235e:
	ld a, [hPaused]
	and a
	ret nz
	ld hl, hPlayerXPos
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a
	ld a, [hli]
	ld e, a
	ld d, [hl]
	ld hl, $ffad
	ld a, [hld]
	and $10
	ld [hli], a
	ld a, [hl]
	and $e7
	ld [hli], a
	res 1, [hl]
	sub a
	ld [$ffd4], a
	ld a, [$ffb0]
	cp $21
	ret z
	ld a, [$ffb0]
	cp $12
	jr nz, .asm_2399
	ld hl, $4
	add hl, bc
	ld b, h
	ld c, l
	call Func_28fd
	ld hl, $fffc
	add hl, bc
	ld b, h
	ld c, l
	jp .asm_2583
.asm_2399
	bit 7, b
	jr z, .asm_23a2
	ld hl, $0
	jr .asm_23e8
.asm_23a2
	ld a, [hForcedSideScrollSpeed]
	and a
	jr z, .asm_23b7
	ld a, [hCameraXOffset]
	ld l, a
	ld a, [hCameraXOffset + 1]
	ld h, a
	ld a, l
	cp c
	jr nz, .asm_23c1
	ld a, h
	cp b
	jr nz, .asm_23c1
	jr .asm_23e8
.asm_23b7
	ld a, [$ff96]
	add $10
	ld l, a
	ld a, [$ff97]
	adc $00
	ld h, a
.asm_23c1
	ld a, c
	sub l
	ld a, b
	sbc h
	jr c, .asm_23e8
	ld a, [hForcedSideScrollSpeed]
	and a
	jr z, .asm_23d8
	ld a, [hCameraXOffset]
	add $90
	ld l, a
	ld a, [hCameraXOffset + 1]
	adc 0
	ld h, a
	jr .asm_23e2
.asm_23d8
	ld a, [$ff98]
	sub $18
	ld l, a
	ld a, [$ff99]
	sbc 0
	ld h, a
.asm_23e2
	ld a, l
	sub c
	ld a, h
	sbc b
	jr nc, .asm_23ea
.asm_23e8
	ld b, h
	ld c, l
.asm_23ea
	dec de
	bit 7, d
	jr z, .asm_23f4
	ld hl, $1
	jr .asm_2420
.asm_23f4
	inc de
	ld a, [$ff9e]
	add $10
	ld l, a
	ld a, [$ff9f]
	adc $00
	ld h, a
	ld a, e
	sub l
	ld a, d
	sbc h
	jr c, .asm_2420
	ld a, [$ff9c]
	add $10
	ld l, a
	ld a, [$ff9d]
	adc $00
	ld h, a
	ld a, l
	sub e
	ld a, h
	sbc d
	jr nc, .asm_2427
	call Func_28c4
	call Func_1ae2
	ld d, h
	ld e, l
	jp .asm_2583
.asm_2420
	ld d, h
	ld e, l
	sub a
	ld [$ffc6], a
	ld [$ffcc], a
.asm_2427
	ld a, [$ffc6]
	add a
	jr nc, .asm_244a
	ld hl, $ffe2
	add hl, de
	ld d, h
	ld e, l
	call Func_258e
	ld hl, $8
	add hl, bc
	ld b, h
	ld c, l
	call Func_258e
	ld hl, $1e
	add hl, de
	ld d, h
	ld e, l
	ld hl, $fff8
	add hl, bc
	ld b, h
	ld c, l
.asm_244a
	ld a, [$ffc5]
	add a
	jr nc, .asm_2469
	ld hl, $8
	add hl, bc
	ld b, h
	ld c, l
	ld a, $ff
	call Func_2617
	ld hl, $fff8
	add hl, bc
	ld b, h
	ld c, l
	sub a
	call Func_2617
	call Func_28db
	jr .asm_2481
.asm_2469
	sub a
	call Func_2617
	ld hl, $8
	add hl, bc
	ld b, h
	ld c, l
	ld a, $ff
	call Func_2617
	call Func_28db
	ld hl, $fff8
	add hl, bc
	ld b, h
	ld c, l
.asm_2481
	ld a, [hForcedSideScrollSpeed]
	and a
	jp nz, .asm_2583
	ld a, [$ffb0]
	and a
	jp nz, .asm_2583
	ld a, [$ffad]
	bit 2, a
	jp nz, .asm_2583
	ld a, [$ffc6]
	bit 7, a
	jr nz, .asm_249f
	cp $38
	jp nc, .asm_2583
.asm_249f
	ld hl, $4
	add hl, bc
	ld b, h
	ld c, l
	inc de
	call Func_299f
	dec de
	cp $1e
	jr z, .asm_24f5
	cp $21
	jr z, .asm_24f5
	cp $24
	jr z, .asm_24f5
	cp $15
	jr nz, .asm_2529
	ld a, c
	and $0f
	cp $04
	jr c, .asm_2529
	cp $0c
	jr nc, .asm_2529
	ld a, [$ffad]
	bit 4, a
	jr z, .asm_2529
	ld a, [wHeldKeys]
	add a
	jr nc, .asm_2529
	ld a, [$ffaf]
	bit 4, a
	jr nz, .asm_2529
	ld a, e
	add $0e
	ld e, a
	ld a, d
	adc $00
	ld d, a
	ld a, c
	and $f0
	add $09
	ld c, a
	ld a, $09
	ld [$ffb0], a
	ld a, [$ffad]
	set 6, a
	ld [$ffad], a
	call Func_2326
	jp .asm_257d
.asm_24f5
	ld a, [$ffad]
	bit 4, a
	jr z, .asm_2529
	ld a, [wHeldKeys]
	add a
	jr nc, .asm_2529
	ld a, [$ffaf]
	bit 4, a
	jr nz, .asm_2529
	ld a, [$ffad]
	add a
	jr c, .asm_2529
	inc de
	ld a, $12
	ld [$ffb0], a
	ld a, [$ffad]
	set 6, a
	ld [$ffad], a
	ld hl, $2ddd
	call Func_2d62
	ld a, $58
	ld [$ffc0], a
	sub a
	ld [$ffc1], a
	call Func_2326
	jr .asm_257d
.asm_2529
	ld hl, $ffe2
	add hl, de
	ld d, h
	ld e, l
	call Func_299f
	ld hl, $ffad
	cp $15
	jr z, .asm_253d
	cp $12
	jr nz, .asm_2571
.asm_253d
	ld a, c
	and $0f
	cp $04
	jr c, .asm_2571
	cp $0c
	jr nc, .asm_2571
	bit 4, [hl]
	jr z, .asm_255c
	ld a, [wHeldKeys]
	bit PADB_UP, a
	jr z, .asm_2571
	ld a, [$ffaf]
	bit 4, a
	jr nz, .asm_2571
	res 0, [hl]
	dec de
.asm_255c
	bit 0, [hl]
	jr nz, .asm_2577
	ld a, c
	and $f0
	add $09
	ld c, a
	ld a, $09
	ld [$ffb0], a
	set 6, [hl]
	call Func_2326
	jr .asm_2577
.asm_2571
	ld a, [$ffad]
	res 0, a
	ld [$ffad], a
.asm_2577
	ld hl, $1e
	add hl, de
	ld d, h
	ld e, l
.asm_257d
	ld hl, $fffc
	add hl, bc
	ld b, h
	ld c, l
.asm_2583:
	ld hl, hPlayerXPos
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	ld a, e
	ld [hli], a
	ld [hl], d
	ret

Func_258e:
	call Func_299f
	add (.jumpTable & $ff)
	ld l, a
	ld a, (.jumpTable >> 8)
	adc $00
	ld h, a
	jp hl
.jumpTable
	jp Func_25ef
	jp Func_25d9
	jp Func_25d9
	jp Func_25d9
	jp Func_25da
	jp Func_25d9
	jp Func_25d9
	jp Func_25d9
	jp Func_25da
	jp Func_25fb
	jp Func_25d9
	jp Func_25d9
	jp Func_25d9
	jp Func_25d9
	jp Func_25d9
	jp Func_25d9
	jp Func_25d9
	jp Func_25d9
	jp Func_25d9
	jp Func_25d9
	jp Func_25d9

Func_25d9:
	ret

Func_25da:
	ld a, e
	or $0f
	ld l, a
	ld h, d
	inc hl
	ld a, [$ffcf]
	sub l
	jr c, .asm_25e7
	sub $1e
.asm_25e7
	ld a, [$ffd0]
	sbc h
	ret c
	ld d, h
	ld e, l
	jr asm_260d
Func_25ef:
	ld a, [$ffb0]
	cp $09
	ret nz
	ld a, e
	or $0f
	ld e, a
	inc de
	jr asm_260d
Func_25fb:
	ld a, [$ffb6]
	and a
	jr nz, Func_25da
	ld a, [$ffb0]
	and a
	jr nz, Func_25da
	ld a, [$ffad]
	set 1, a
	ld [$ffad], a
	jr Func_25da
asm_260d:
	sub a
	ld [$ffc6], a
	ld [$ffcc], a
	ld [$ffb2], a
	ld [$ffb3], a
	ret

Func_2617:
	ld [$ffd3], a
	call Func_299f
	add (.jumpTable & $ff)
	ld l, a
	ld a, (.jumpTable >> 8)
	adc 0
	ld h, a
	jp hl
.jumpTable
	jp Func_2791
	jp Func_2665
	jp Func_2665
	jp Func_2664
	jp Func_2664
	jp Func_267a
	jp Func_2664
	jp Func_2698
	jp Func_2665
	jp Func_269f
	jp Func_2665
	jp Func_2665
	jp Func_2665
	jp Func_26b1
	jp Func_26d9
	jp Func_2704
	jp Func_2727
	jp Func_274d
	jp Func_2772
	jp Func_2664
	jp Func_2889

Func_2664:
	ret

Func_2665:
	ld a, [$ffcf]
	ld l, a
	ld a, [$ffd0]
	ld h, a
	ld a, e
	and $f0
	sub l
	ld a, d
	sbc h
	ret c
	ld a, e
	and $f0
	ld e, a
	dec de
	jp Func_28b7

Func_267a:
	ld a, e
	and $0f
	cp $08
	ret c
	ld a, [$ffcf]
	ld l, a
	ld a, [$ffd0]
	ld h, a
	ld a, e
	and $f0
	add $08
	sub l
	ld a, d
	sbc h
	ret c
	ld a, e
	and $f0
	add $07
	ld e, a
	jp Func_28b7

Func_2698:
	ld a, [$ffb0]
	cp $09
	jr nz, Func_2665
	ret

Func_269f:
	ld a, [$ffb6]
	and a
	jr nz, Func_2665
	ld a, [$ffb0]
	and a
	jr nz, Func_2665
	ld a, [$ffad]
	set 1, a
	ld [$ffad], a
	jr Func_2665

Func_26b1:
	ld a, [$ffd3]
	and a
	ret z
	ld a, e
	and $0f
	sub $10
	cpl
	ld l, a
	ld a, c
	and $0f
	srl a
	cp l
	jr nc, Func_26c8
	ld a, [$ffac]
	and a
	ret z
Func_26c8:
	ld a, c
	and $0f
	srl a
	sub $0f
	cpl
	ld l, a
	ld a, e
	and $f0
	or l
	ld e, a
	jp Func_28b7

Func_26d9:
	ld a, [$ffd3]
	and a
	ret z
	ld a, e
	and $0f
	sub $10
	cpl
	ld l, a
	ld a, c
	and $0f
	srl a
	add $08
	cp l
	jr nc, Func_26f2
	ld a, [$ffac]
	and a
	ret z
Func_26f2:
	ld a, c
	and $0f
	srl a
	sub $08
	cpl
	ld l, a
	ld a, e
	and $f0
	or l
	ld e, a
	dec de
	jp Func_28b7

Func_2704:
	ld a, [$ffd3]
	and a
	ret nz
	ld a, c
	and $0f
	srl a
	ld l, a
	ld a, e
	and $0f
	cp l
	jr nc, Func_2718
	ld a, [$ffac]
	and a
	ret z
Func_2718:
	ld a, c
	and $0f
	srl a
	ld l, a
	ld a, e
	and $f0
	or l
	ld e, a
	dec de
	jp Func_28b7

Func_2727:
	ld a, [$ffd3]
	and a
	ret nz
	ld a, c
	and $0f
	srl a
	add $08
	ld l, a
	ld a, e
	and $0f
	cp l
	jr nc, Func_273d
	ld a, [$ffac]
	and a
	ret z
Func_273d:
	ld a, c
	and $0f
	srl a
	add $07
	ld l, a
	ld a, e
	and $f0
	or l
	ld e, a
	jp Func_28b7

Func_274d:
	ld a, [$ffd3]
	and a
	ret z
	ld a, e
	and $0f
	sub $10
	cpl
	ld l, a
	ld a, c
	and $0f
	cp l
	jr nc, Func_2762
	ld a, [$ffac]
	and a
	ret z
Func_2762:
	ld a, c
	and $0f
	sub $10
	cpl
	ld l, a
	ld a, e
	and $f0
	or l
	ld e, a
	dec de
	jp Func_28b7

Func_2772:
	ld a, [$ffd3]
	and a
	ret nz
	ld a, c
	and $0f
	ld l, a
	ld a, e
	and $0f
	cp l
	jr nc, Func_2784
	ld a, [$ffac]
	and a
	ret z
Func_2784:
	ld a, c
	and $0f
	ld l, a
	ld a, e
	and $f0
	or l
	ld e, a
	dec de
	jp Func_28b7

Func_2791:
	ld a, [hForcedSideScrollSpeed]
	and a
	ret nz
	push de
	ld a, e
	and $f0
	ld e, a
	dec de
	call Func_299f
	pop de
	cp $33
	jp z, Func_283d
	cp $36
	jp z, Func_2863
	cp $27
	jp z, Func_27f1
	cp $30
	jp z, Func_2817
	push de
	ld a, e
	or $0f
	ld e, a
	inc de
	call Func_299f
	pop de
	cp $33
	jp z, Func_2849
	cp $36
	jp z, Func_286f
	cp $2a
	jp z, Func_27fd
	cp $2d
	jp z, Func_2823
	cp $06
	jr z, .asm_27d8
	cp $03
	ret nz
.asm_27d8
	ld a, [$ffd4]
	inc a
	ld [$ffd4], a
	cp $02
	ret nz
	ld a, [$ffac]
	and a
	ret z
	ld a, e
	and $0f
	cp $0d
	ret c
	ld a, e
	or $0f
	ld e, a
	jp Func_28b7

Func_27f1:
	ld a, [$ffd3]
	and a
	ret z
	ld a, e
	and $f0
	ld e, a
	dec de
	jp Func_26c8

Func_27fd:
	ld a, [$ffd3]
	and a
	ret z
	ld a, [$ffac]
	and a
	ret z
	ld a, e
	and $0f
	cp $0e
	ret c
	ld a, [$ffc6]
	add a
	ret c
	ld a, e
	or $0f
	ld e, a
	inc de
	jp Func_26f2

Func_2817:
	ld a, [$ffd3]
	and a
	ret nz
	ld a, e
	and $f0
	ld e, a
	dec de
	jp Func_273d

Func_2823:
	ld a, [$ffd3]
	and a
	ret nz
	ld a, [$ffac]
	and a
	ret z
	ld a, e
	and $0f
	cp $0e
	ret c
	ld a, [$ffc6]
	add a
	ret c
	ld a, e
	or $0f
	ld e, a
	inc de
	jp Func_2718

Func_283d:
	ld a, [$ffd3]
	and a
	ret z
	ld a, e
	and $f0
	ld e, a
	dec de
	jp Func_2762

Func_2849:
	ld a, [$ffd3]
	and a
	ret z
	ld a, [$ffac]
	and a
	ret z
	ld a, e
	and $0f
	cp $0d
	ret c
	ld a, [$ffc6]
	add a
	ret c
	ld a, e
	or $0f
	ld e, a
	inc de
	jp Func_2762

Func_2863:
	ld a, [$ffd3]
	and a
	ret nz
	ld a, e
	and $f0
	ld e, a
	dec de
	jp Func_2784

Func_286f:
	ld a, [$ffd3]
	and a
	ret nz
	ld a, [$ffac]
	and a
	ret z
	ld a, e
	and $0f
	cp $0d
	ret c
	ld a, [$ffc6]
	add a
	ret c
	ld a, e
	or $0f
	ld e, a
	inc de
	jp Func_2784

Func_2889:
	ld a, e
	and $0f
	cp $08
	ret c
	ld a, [$ffcf]
	ld l, a
	ld a, [$ffd0]
	ld h, a
	ld a, e
	and $f0
	add $08
	sub l
	ld a, d
	sbc h
	ret c
	ld a, e
	and $f0
	add $07
	ld e, a
	ld a, [$ffb6]
	and a
	jr nz, .asm_28b4
	ld a, [$ffb0]
	and a
	jr nz, .asm_28b4
	ld a, [$ffad]
	set 1, a
	ld [$ffad], a
.asm_28b4
	jp Func_28b7

Func_28b7:
	ld a, [$ffc6]
	bit 7, a
	jr nz, Func_28c4
	cp $38
	jr c, Func_28c4
	call Func_1ae2
Func_28c4:
	sub a
	ld [$ffc6], a
	ld [$ffb2], a
	ld [$ffb3], a
	ld a, $f0
	ld [$ffcc], a
	ld a, [$ffad]
	set 4, a
	ld [$ffad], a
	sub a
	ld [$ffd1], a
	ld [$ffd2], a
	ret

Func_28db:
	ld a, [hForcedSideScrollSpeed]
	and a
	jr z, .asm_28e5
	ld a, [$ffad]
	bit 2, a
	ret nz
.asm_28e5
	push de
	call Func_28fd
	ld hl, $fff1
	add hl, de
	ld d, h
	ld e, l
	call Func_28fd
	ld hl, $fff1
	add hl, de
	ld d, h
	ld e, l
	call Func_28fd
	pop de
	ret

Func_28fd:
	call Func_299f
	add (.jumpTable & $ff)
	ld l, a
	ld a, (.jumpTable >> 8)
	adc 0
	ld h, a
	jp hl
.jumpTable
	jp Func_2948
	jp Func_2948
	jp Func_2949
	jp Func_2949
	jp Func_2949
	jp Func_2948
	jp Func_2948
	jp Func_2948
	jp Func_2949
	jp Func_296c
	jp Func_297e
	jp Func_2985
	jp Func_2992
	jp Func_2948
	jp Func_2948
	jp Func_2948
	jp Func_2948
	jp Func_2948
	jp Func_2948
	jp Func_2949
	jp Func_2948

Func_2948:
	ret

Func_2949:
	ld a, [$ffc5]
	add a
	jr c, .asm_2957
	ld a, c
	and $f0
	ld c, a
	dec bc
	ld a, $f0
	jr .asm_295d
.asm_2957
	ld a, c
	or $0f
	ld c, a
	inc bc
	sub a
.asm_295d
	ld [$ffc7], a
	ld hl, $ffc5
	sub a
	ld [hld], a
	ld [hl], a
	ld a, [$ffad]
	set 3, a
	ld [$ffad], a
	ret

Func_296c:
	ld a, [$ffb6]
	and a
	jr nz, Func_2949
	ld a, [$ffb0]
	and a
	jr nz, Func_2949
	ld a, [$ffad]
	set 1, a
	ld [$ffad], a
	jr Func_2949

Func_297e:
	ld a, [$ffae]
	set 1, a
	ld [$ffae], a
	ret

Func_2985:
	ld a, c
	and $0f
	cp $0c
	ret nc
	ld a, [$ffae]
	set 1, a
	ld [$ffae], a
	ret

Func_2992:
	ld a, c
	and $0f
	cp $04
	ret c
	ld a, [$ffae]
	set 1, a
	ld [$ffae], a
	ret

Func_299f:
	bit 7, b
	jr nz, .asm_29e7
	bit 7, d
	jr nz, .asm_29e7
	ld hl, hLevelPixelWidth
	ld a, [hli]
	sub c
	ld a, [hli]
	sbc b
	jr c, .asm_29e7
	ld a, [hli]
	sub e
	ld a, [hli]
	sbc d
	jr c, .asm_29e7
	push bc
	push de
	ld h, b
	ld l, c
	add hl, hl
	add hl, hl
	ld b, h
	ld h, d
	ld l, e
	add hl, hl
	add hl, hl
	ld l, h
	ld h, $c5
	sla l
	ld a, [hli]
	ld h, [hl]
	sla b
	add b
	ld l, a
	jr nc, .asm_29cf
	inc h
.asm_29cf
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, e
	and $30
	rrca
	rrca
	add l
	ld l, a
	ld a, c
	and $30
	swap a
	add l
	ld l, a
	ld l, [hl]
	ld h, (wMetatileCollisionAttributes >> 8)
	ld a, [hl]
	pop de
	pop bc
	ret
.asm_29e7
	sub a
	ret

PrepareCameraUpdate:
	ld a, [hPaused]
	and a
	ret nz
	ld a, [$de84]
	and a
	ret nz
	ld a, [hForcedSideScrollSpeed]
	add a
	jr z, .asm_29fb
	jr c, .asm_2a32
	jr .asm_2a57
.asm_29fb
	ld bc, $4fc
	ld a, [hCameraXOffset]
	ld d, a
	ld a, [hPlayerXPos]
	sub d
	sub 76 ; x pixel position for when the camera starts scrolling horizontally
	bit 7, a
	jr nz, .asm_2a10
	cp b
	jr c, .asm_2a14
	ld a, b
	jr .asm_2a14
.asm_2a10
	cp c
	jr nc, .asm_2a14
	ld a, c
.asm_2a14
	ld [$ffa4], a
	ld bc, $4fc
	ld a, [hCameraYOffset]
	ld d, a
	ld a, [hPlayerYPos]
	sub d
	sub 88 ; y pixel position for when the camera starts scrolling vertically
	bit 7, a
	jr nz, .asm_2a2b
	cp b
	jr c, .asm_2a2f
	ld a, b
	jr .asm_2a2f
.asm_2a2b
	cp c
	jr nc, .asm_2a2f
	ld a, c
.asm_2a2f
	ld [$ffa5], a
	ret
.asm_2a32
	sub a
	ld [$ffa5], a
	ld a, [$ffad]
	bit 2, a
	ret nz
	ld a, [hCameraXOffset]
	and a
	jr nz, .asm_2a43
	ld a, [hCameraXOffset + 1]
	and a
	ret z
.asm_2a43
	ld a, [hForcedSideScrollSpeed]
	cp $fe
	jr nz, .asm_2a4e
	ld a, $ff
	ld [$ffa4], a
	ret
.asm_2a4e
	ld a, [hFrameCounter]
	rra
	ret c
	ld a, [hForcedSideScrollSpeed]
	ld [$ffa4], a
	ret
.asm_2a57
	sub a
	ld [$ffa5], a
	ld a, [$ffad]
	bit 2, a
	ret nz
	ld a, [hCameraXOffset]
	add $b1
	ld c, a
	ld a, [hCameraXOffset + 1]
	adc $00
	ld b, a
	ld a, [$ff98]
	sub c
	ld a, [$ff99]
	sbc b
	ret c
	ld a, [hForcedSideScrollSpeed]
	cp $01
	jr z, .asm_2a7b
	srl a
	ld [$ffa4], a
	ret
.asm_2a7b
	ld a, [hFrameCounter]
	rra
	ret c
	ld a, [hForcedSideScrollSpeed]
	ld [$ffa4], a
	ret

Func_2a84:
	ld a, Bank(Func_17643)
	ld [MBC5RomBank], a
	jp Func_17643

; Prepares a metatile to be drawn on screen.
; Input: bc = metatile x pixel offset
;        de = metatile y pixel offset
;
; Returns: hl = metatile source address
;          de = bg map destination address
;          b  = 0 if metatile should be drawn, $ff if it shouldn't be drawn
PrepareDrawMetatile:
	bit 7, b
	jr nz, .dontDrawMetatile ; exit if metatile has negative x offset
	bit 7, d
	jr nz, .dontDrawMetatile ; exit if metatile has negative y offset
	ld hl, hLevelPixelWidth
	ld a, [hli]
	sub c
	ld a, [hli]
	sbc b
	jr c, .dontDrawMetatile ; exit if metatile is outside horizontal boundaries
	ld a, [hli]
	sub e
	ld a, [hli]
	sbc d
	jr c, .dontDrawMetatile ; exit if metatile is outside vertical boundaries
	ld h, b
	ld l, c
	add hl, hl
	add hl, hl
	ld b, h ; b = metatile horizontal offset
	ld h, d
	ld l, e
	add hl, hl
	add hl, hl
	ld l, h ; l = metatile vertical offset
	ld h, (wMetatileRowPointers >> 8)
	sla l
	ld a, [hli]
	ld h, [hl]
	sla b
	add b
	ld l, a
	jr nc, .asm_2aba
	inc h
.asm_2aba
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, e
	and $30
	rrca
	rrca
	add l
	ld l, a
	ld a, c
	and $30
	swap a
	add l
	ld l, a
	ld l, [hl]
	ld h, (wMetatiles >> 10)
	add hl, hl
	add hl, hl
	ld d, (_SCRN0 >> 10)
	ld a, e
	and $f0
	add a
	rl d
	ld e, a
	ld a, c
	and $f0
	swap a
	add e
	add a
	rl d
	ld e, a
	ld b, 0
	ret
.dontDrawMetatile
	ld b, $ff
	ret

DrawMetatile_HBlank:
	ld a, [rSTAT]
	and STATF_LCD
	jr z, DrawMetatile_HBlank ; wait for current HBlank to end
.waitHBlank
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .waitHBlank
DrawMetatile:
	ld a, b
	and a
	ret nz
	; load the 4 tiles defined by the metatile
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	ld a, e
	add $1f ; jump to the lower-left tile in the metatile
	ld e, a
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hl]
	ld [de], a
	ret

; Draws the metatile's GBC tile attributes during HBlank.
; Input: hl = last tile in metatile
;        de = destination bg address for last tile in metatile
;        b  = 0 if metatile should be drawn, $ff if it should be skipped
DrawMetatileGBCAttributes_HBlank:
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	ret nz
.waitCurrentHBlankFinish
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .waitCurrentHBlankFinish
.waitHBlankStart
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .waitHBlankStart
	ld a, b
	and a
	ret nz
	ld b, (wGBCTileAttributes >> 8)
	ld a, 1
	ld [rVBK], a
	ld a, [hld]
	ld c, a
	ld a, [bc]
	ld [de], a
	dec e
	ld a, [hld]
	ld c, a
	ld a, [bc]
	ld [de], a
.waitCurrentHBlankFinish2
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .waitCurrentHBlankFinish2
.waitHBlankStart2
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .waitHBlankStart2
	ld a, e
	sub $1f ; jump up to previous row in bg for metatile
	ld e, a
	ld a, [hld]
	ld c, a
	ld a, [bc]
	ld [de], a
	dec e
	ld c, [hl]
	ld a, [bc]
	ld [de], a
	sub a
	ld [rVBK], a
	ret

; Draws the metatile's GBC tile attributes.
; Input: hl = last tile in metatile
;        de = destination bg address for last tile in metatile
;        b  = 0 if metatile should be drawn, $ff if it should be skipped
DrawMetatileGBCAttributes:
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	ret nz
	ld a, b
	and a
	ret nz
	ld b, (wGBCTileAttributes >> 8)
	ld a, 1
	ld [rVBK], a
	ld a, [hld]
	ld c, a
	ld a, [bc]
	ld [de], a
	dec e
	ld a, [hld]
	ld c, a
	ld a, [bc]
	ld [de], a
	ld a, e
	sub $1f ; jump up to previous bg row for metatile
	ld e, a
	ld a, [hld]
	ld c, a
	ld a, [bc]
	ld [de], a
	dec e
	ld c, [hl]
	ld a, [bc]
	ld [de], a
	sub a
	ld [rVBK], a
	ret

Func_2b6d:
	ld a, $06
	ld [MBC5RomBank], a
	ld c, (hCameraXOffset & $ff)
	ld b, $04
.asm_2b76
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	dec b
	jr nz, .asm_2b76
	ld a, [hCameraXOffset]
	ld [rSCX], a
	ld a, [hCameraYOffset]
	ld [rSCY], a
	sub a
	ld [$ff00+c], a
	inc c
	ld [$ff00+c], a
	inc c
	push hl
	ld hl, wLevelMap
	ld b, 2
.initLevelPixelDimensions
	ld a, [hli]
	sub $01
	ld [$ff00+c], a
	inc c
	ld a, [hli]
	sbc 0
	ld [$ff00+c], a
	inc c
	dec b
	jr nz, .initLevelPixelDimensions
	ld a, [hli]
	ld e, a
	ld d, [hl]
	ld hl, wLevelMap + 6
	ld bc, wMetatileRowPointers
.asm_2ba5
	ld a, l
	ld [bc], a
	inc c
	ld a, h
	ld [bc], a
	add hl, de
	inc c
	jr nz, .asm_2ba5
	ld c, $95
	sub a
	ld [$ff00+c], a
	inc c
	ld hl, $c600
	ld de, hScore
	ld a, e
	ld [$ff00+c], a
	inc c
	ld a, d
	ld [$ff00+c], a
	inc c
	call Func_2bdf
	sub a
	ld [$ff00+c], a
	inc c
	ld [$ff00+c], a
	inc c
	call Func_2bdf
	ld a, e
	ld [$ff00+c], a
	inc c
	ld a, d
	ld [$ff00+c], a
	ld hl, $ff9c
	ld a, [hl]
	add $08
	ld [hli], a
	ld a, [hl]
	adc 0
	ld [hl], a
	call DrawWholeScreenMetatiles
	pop hl
	ret

Func_2bdf:
	ld a, [hli]
	add $10
	ld [$ff00+c], a
	inc c
	ld a, [hli]
	adc $00
	ld [$ff00+c], a
	inc c
	ret

DrawWholeScreenMetatiles:
	ld hl, hCameraXOffset
	ld a, [hli]
	sub $10
	ld c, a
	ld a, [hli]
	sbc 0
	ld b, a
	ld a, [hli]
	sub $10
	ld e, a
	ld a, [hli]
	sbc 0
	ld d, a
	ld h, $10
.rowLoop
	ld l, $10
.metatileLoop
	push hl
	push bc
	push de
	call PrepareDrawMetatile
	call DrawMetatile
	call DrawMetatileGBCAttributes
	pop de
	pop bc
	ld hl, $10
	add hl, bc
	ld b, h
	ld c, l
	pop hl
	dec l
	jr nz, .metatileLoop
	push hl
	ld hl, $ff00
	add hl, bc
	ld b, h
	ld c, l
	ld hl, $10
	add hl, de
	ld d, h
	ld e, l
	pop hl
	dec h
	jr nz, .rowLoop
	ret

Func_2c2b:
	ld a, [hPaused]
	and a
	ret nz
	ld a, [$de84]
	and a
	ret nz
	ld a, [hForcedSideScrollSpeed]
	and a
	jr z, .asm_2c5d
	ld a, [$ffad]
	bit 2, a
	ret nz
	ld a, [hForcedSideScrollSpeed]
	add a
	jr nc, .asm_2c4c
	ld a, [hCameraXOffset]
	and a
	jr nz, .asm_2c5d
	ld a, [hCameraXOffset + 1]
	and a
	ret z
.asm_2c4c
	ld a, [hCameraXOffset]
	add $b1
	ld c, a
	ld a, [hCameraXOffset + 1]
	adc $00
	ld b, a
	ld a, [$ff98]
	sub c
	ld a, [$ff99]
	sbc b
	ret c
.asm_2c5d
	ld hl, $dec4
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a
	ld a, [bc]
	inc bc
	ld d, a
.asm_2c67
	ld a, [bc]
	inc bc
	add [hl]
	ld [hli], a
	ld a, [bc]
	inc bc
	adc [hl]
	ld [hli], a
	dec d
	jr nz, .asm_2c67
	ret

Func_2c73:
	ld a, $06
	ld [MBC5RomBank], a
	ld de, $dec4
	ld a, [hli]
	ld c, a
	ld [de], a
	inc e
	ld a, [hli]
	ld b, a
	ld [de], a
	inc e
	ld a, [bc]
	add a
	ld b, a
	sub a
.asm_2c87
	ld [de], a
	inc e
	dec b
	jr nz, .asm_2c87
	ret

INCBIN "baserom.gbc", $2c8d, $2c9f - $2c8d

Func_2c9f:
	ld a, [hPaused]
	and a
	ret nz
	ld a, $0e
	ld [MBC5RomBank], a
	ld hl, $ffd7
	ld a, [hld]
	ld b, a
	ld a, [hld]
	ld c, a
	inc [hl]
	ld a, [bc]
	cp [hl]
	jr nz, .asm_2cc8
	sub a
	ld [hli], a
	inc bc
	inc bc
	inc bc
	inc bc
	ld a, [bc]
	and a
	jr nz, .asm_2cc5
	inc bc
	ld a, [bc]
	inc bc
	ld d, a
	ld a, [bc]
	ld b, a
	ld c, d
.asm_2cc5
	ld a, c
	ld [hli], a
	ld [hl], b
.asm_2cc8
	ld a, [hFrameCounter]
	rra
	jr c, .asm_2cd9
	ld hl, $ffd8
	inc bc
	ld a, [bc]
	inc bc
	ld [hli], a
	ld a, [bc]
	inc bc
	ld [hli], a
	ld a, [bc]
	ld [hl], a
.asm_2cd9
	ld a, [hActiveSprites]
	ld c, a
	ld b, $df
	ld hl, $ffd8
	sub a
	ld [$ff8a], a
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	dec hl
	ld a, [hli]
	ld [$ff8b], a
	ld a, [hli]
	inc hl
	and $1f
	ld [$ff8c], a
	ld a, [hCameraXOffset]
	ld d, a
	ld a, [hPlayerXPos]
	sub d
	ld d, a
	ld a, [hCameraYOffset]
	ld e, a
	ld a, [hPlayerYPos]
	sub e
	ld e, a
	ld a, [$ffb9]
	and a
	jr z, .asm_2d0d
	bit 1, a
	jr nz, .asm_2d16
	ret
.asm_2d0d
	ld a, [$ffb7]
	cp $0c
	jr nc, .asm_2d16
	bit 1, a
	ret nz
.asm_2d16
	ld a, [$ffad]
	bit 5, a
	jr z, .asm_2d24
	ld a, [$ff8b]
	set 5, a
	ld [$ff8b], a
	jr .asm_2d42
.asm_2d24
	ld a, [hli]
	add e
	ld [bc], a
	inc c
	ld a, [hli]
	inc hl
	add d
	ld [bc], a
	inc c
	ld a, [$ff8a]
	ld [bc], a
	inc c
	add $02
	ld [$ff8a], a
	ld a, [$ff8b]
	ld [bc], a
	inc c
	ld a, [$ff8c]
	dec a
	ld [$ff8c], a
	jr nz, .asm_2d24
	jr .asm_2d5e
.asm_2d42
	ld a, [hli]
	add e
	ld [bc], a
	inc c
	inc hl
	ld a, [hli]
	add d
	ld [bc], a
	inc c
	ld a, [$ff8a]
	ld [bc], a
	inc c
	add $02
	ld [$ff8a], a
	ld a, [$ff8b]
	ld [bc], a
	inc c
	ld a, [$ff8c]
	dec a
	ld [$ff8c], a
	jr nz, .asm_2d42
.asm_2d5e
	ld a, c
	ld [hActiveSprites], a
	ret

Func_2d62:
	ld a, [$ffad]
	add a
	jr nc, .asm_2d69
	inc hl
	inc hl
.asm_2d69
	ld a, [hli]
	ld [$ffd6], a
	ld a, [hl]
	ld [$ffd7], a
	sub a
	ld [$ffd5], a
	ret

Func_2d73:
	ld hl, $2d85
	call Func_2d62
	ld hl, $ffd8
	ld a, $0d
	ld [hli], a
	ld a, $c1
	ld [hli], a
	ld [hl], $74
	ret

INCBIN "baserom.gbc", $2d85, $2e11 - $2d85

Func_2e11:
	call WaitHBlankStart
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
	ld a, [hCameraXOffset]
	ld [rSCX], a
	ld a, [hCameraYOffset]
	ld [rSCY], a
	ret

Func_2e21:
	sub a
	ld [$de85], a
	jr Func_2e2e
Func_2e27:
	ld a, $ff
	ld [$de85], a
	jr Func_2e2e
Func_2e2e:
	ld a, [rLY]
	cp 119
	jr nz, Func_2e2e
	call WaitHBlankStart
	ld a, [hForcedSideScrollSpeed]
	and a
	jr z, .asm_2e49
	ld a, 112
	ld [rSCY], a
	sub a
	ld [rSCX], a
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINOFF | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJOFF | LCDCF_BGON
	ld [rLCDC], a
	jr .asm_2e4d
.asm_2e49
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJOFF | LCDCF_BGON
	ld [rLCDC], a
.asm_2e4d
	ld a, [hPaused]
	and a
	jp nz, .asm_2eeb
	ld a, [hFrameCounter]
	rra
	jp c, Func_3340
	ld hl, $ffd8
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, [hli]
	and $e0
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, vTilesOB
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	jr nz, .asm_2e85
	sub a
	ld [rHDMA3], a
	ld [rHDMA4], a
	ld hl, sp+$00
	ld a, l
	ld [rHDMA2], a
	ld a, h
	ld [rHDMA1], a
	ld a, $93
	ld [rHDMA5], a
	jr .asm_2ee8
.asm_2e85
	ld a, $16
	ld [$ff8a], a
.asm_2e89
	pop bc
	pop de
.waitCurrentHBlankFinish
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .waitCurrentHBlankFinish
.waitHBlankStart
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .waitHBlankStart
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld [hl], b
	inc hl
	ld a, [$ff8a]
	dec a
	ld [$ff8a], a
	jr nz, .asm_2e89
	pop bc
	pop de
.waitCurrentHBlankFinish2
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .waitCurrentHBlankFinish2
.waitHBlankStart2
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .waitHBlankStart2
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld [hl], b
.asm_2ee8
	ld sp, wStack - 2
.asm_2eeb
	ld a, [rLY]
	cp 143
	jr nz, .asm_2eeb
	ld a, [$de85]
	and a
	jp nz, Func_2e11
	ld a, $05
	ld [MBC5RomBank], a
	call WaitHBlankStart
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
	ld a, [hCameraXOffset]
	ld [rSCX], a
	ld a, [hCameraYOffset]
	ld [rSCY], a
	ld a, [hPaused]
	and a
	ret nz
	ld a, [hFrameCounter]
	bit 1, a
	jr nz, .asm_2f34
	ld hl, $dda1
	ld bc, $8440
	ld de, $4000
	ld a, $0a
	call Func_2f9e
	ld hl, $dda2
	ld bc, $8400
	ld de, $4280
	ld a, $12
	call Func_2f9e
	jr .asm_2f98
.asm_2f34
	ld hl, $dda3
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld bc, $dda5
	bit 7, [hl]
	jr z, .asm_2f47
	ld a, [hFrameCounter]
	bit 2, a
	jr z, .asm_2f4a
.asm_2f47
	ld a, [bc]
	inc a
	ld [bc], a
.asm_2f4a
	ld a, [hl]
	and a
	jr z, .asm_2f98
	ld a, [hli]
	and $7f
	ld e, a
	ld a, [bc]
	cp e
	jr nz, .asm_2f58
	sub a
	ld [bc], a
.asm_2f58
	ld a, [bc]
	add a
	ld e, a
	ld d, $00
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a
	add hl, de
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
.asm_2f66
	ld a, [bc]
	inc bc
	ld l, a
	ld a, [bc]
	inc bc
	ld h, a
	and a
	jr z, .asm_2f98
	pop de
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	pop de
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	pop de
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	pop de
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	pop de
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	pop de
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	pop de
	ld a, e
	ld [hli], a
	ld a, d
	ld [hli], a
	pop de
	ld a, e
	ld [hli], a
	ld [hl], d
	jr .asm_2f66
.asm_2f98
	ld sp, wStack - 2
	jp Func_3000

Func_2f9e:
	inc [hl]
	cp [hl]
	jr nz, .asm_2fa4
	ld [hl], $00
.asm_2fa4
	ld l, [hl]
	ld h, $00
	add hl, hl
	add hl, hl
	add hl, hl
	add hl, hl
	add hl, hl
	add hl, hl
	add hl, de
	ld sp, hl
	ld h, b
	ld l, c
	ld d, $04
.asm_2fb3
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	dec d
	jr nz, .asm_2fb3
	ld sp, $dffc
	ret

Func_2fe2:
	ld a, $06
	ld [MBC5RomBank], a
	ld bc, $dda3
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld d, $08
	sub a
.asm_2ff3
	ld [bc], a
	inc c
	dec d
	jr nz, .asm_2ff3
	sub a
	ld [$dda1], a
	ld [$dda2], a
	ret

Func_3000:
	ld hl, $ffec
	inc [hl]
	ld a, [hl]
	cp $0a
	jr c, .asm_300b
	sub a
	ld [hl], a
.asm_300b
	ld c, a
	add a
	add c
	ld c, a
	ld b, $00
	ld hl, .jumpTable
	add hl, bc
	ld bc, vBGWin
	ld a, [hForcedSideScrollSpeed]
	and a
	jr z, .asm_3020
	ld bc, $9ba0
.asm_3020
	jp hl
.jumpTable
	jp Func_303f
	jp Func_3057
	jp Func_307b
	jp Func_309c
	jp Func_30ac
	jp Func_30bf
	jp Func_30d2
	jp Func_30e3
	jp Func_30f8
	jp Func_30fd

Func_303f:
	ld h, b
	ld l, c
	ld a, [hCurHealth]
	ld b, a
	ld a, [hMaxHealth]
	ld c, a
.asm_3047
	ld a, b
	and a
	jr z, .asm_3050
	dec b
	ld [hl], $8f
	jr .asm_3052
.asm_3050
	ld [hl], $b1
.asm_3052
	inc l
	dec c
	jr nz, .asm_3047
	ret

Func_3057:
	ld a, [hForcedSideScrollSpeed]
	and a
	ld hl, $4b
	jr z, .asm_3069
	ld hl, $49
	cp $fe
	jr nz, .asm_3069
	ld hl, $4b
.asm_3069
	add hl, bc
	ld a, [hNumLives]
	and $f0
	swap a
	add $84
	ld [hli], a
	ld a, [hNumLives]
	and $0f
	add $84
	ld [hl], a
	ret

Func_307b:
	ld hl, $4e
	add hl, bc
	ld c, $f1
	ld b, $84
	ld de, $ff0
Func_3086:
	ld a, [$ff00+c]
	and e
	swap a
	add b
	ld [hli], a
	ld a, [$ff00+c]
	dec c
	and d
	add b
	ld [hli], a
	ld a, [$ff00+c]
	and e
	swap a
	add b
	ld [hli], a
	ld a, [$ff00+c]
	and d
	add b
	ld [hl], a
	ret

Func_309c:
	ld a, [hForcedSideScrollSpeed]
	and a
	ret nz
	ld hl, $47
	add hl, bc
	ld a, [$fff2]
	and $0f
	add $84
	ld [hl], a
	ret

Func_30ac:
	ld a, [$ffad]
	add a
	ld hl, $4436
	jr nc, .asm_30b7
	ld hl, $4496
.asm_30b7
	ld a, $03
	ld bc, $8900
	jp Func_31a9

Func_30bf:
	ld a, [$ffad]
	add a
	ld hl, $4466
	jr nc, .asm_30ca
	ld hl, $44c6
.asm_30ca
	ld a, $03
	ld bc, $8930
	jp Func_31a9

Func_30d2:
	ld hl, $fff5
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	or h
	ret z
	ld a, $02
	jp Func_31a9

Func_30e3:
	ld a, [hForcedSideScrollSpeed]
	and a
	ret nz
	ld hl, $fff9
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	or h
	ret z
	ld a, $01
	jp Func_31a9

Func_30f8:
	sub a
	ld [$ff8a], a
	jr Func_3101
Func_30fd:
	ld a, $10
	ld [$ff8a], a
Func_3101:
	ld hl, hNumCarrots
	ld a, [hli]
	cp [hl]
	jr z, .asm_310e
	ld a, [$ff8a]
	and a
	jr nz, .asm_310e
	inc [hl]
.asm_310e
	ld a, [hl]
	and a
	ret z
	dec a
	ld b, a
	and $03
	ld e, a
	ld d, $00
	ld hl, $324e
	add hl, de
	ld d, [hl]
	ld a, b
	and $fc
	add a
	add a
	add a
	cpl
	inc a
	add $e0
	ld l, a
	ld h, $40
	ld c, a
	ld b, $8a
	ld a, [$ff8a]
	add c
	ld c, a
	ld a, b
	adc $00
	ld b, a
	ld a, [$ff8a]
	add l
	ld l, a
	ld a, h
	adc $00
	ld h, a
	ld a, $04
	ld [MBC5RomBank], a
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	jr nz, Func_3153
	ld a, 1
	ld [rVBK], a
	call Func_3153
	sub a
	ld [rVBK], a
	ret

Func_3153:
	ld a, d
	cpl
	and [hl]
	inc l
	ld e, a
	ld a, [bc]
	and d
	or e
	ld [bc], a
	inc c
	ld a, d
	cpl
	and [hl]
	inc l
	ld e, a
	ld a, [bc]
	and d
	or e
	ld [bc], a
	inc c
	ld a, d
	cpl
	and [hl]
	inc l
	ld e, a
	ld a, [bc]
	and d
	or e
	ld [bc], a
	inc c
	ld a, d
	cpl
	and [hl]
	inc l
	ld e, a
	ld a, [bc]
	and d
	or e
	ld [bc], a
	inc c
	ld a, d
	cpl
	and [hl]
	inc l
	ld e, a
	ld a, [bc]
	and d
	or e
	ld [bc], a
	inc c
	ld a, d
	cpl
	and [hl]
	inc l
	ld e, a
	ld a, [bc]
	and d
	or e
	ld [bc], a
	inc c
	ld a, d
	cpl
	and [hl]
	inc l
	ld e, a
	ld a, [bc]
	and d
	or e
	ld [bc], a
	inc c
	ld a, d
	cpl
	and [hl]
	inc l
	ld e, a
	ld a, [bc]
	and d
	or e
	ld [bc], a
	inc c
	ld a, c
	and $0f
	jr nz, Func_3153
	ret

Func_31a9:
	ld d, a
	ld sp, hl
	ld h, b
	ld l, c
	ld a, $04
	ld [MBC5RomBank], a
.asm_31b2
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	pop bc
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	dec d
	jr nz, .asm_31b2
	ld sp, wStack - 2
	ret

Func_31e1:
	ld a, $05
	ld [MBC5RomBank], a
	ld a, [hForcedSideScrollSpeed]
	ld hl, $722c
	ld bc, vBGWin
	and a
	jr z, .asm_31fe
	ld hl, $7268
	ld bc, $9ba0
	cp $fe
	jr nz, .asm_31fe
	ld hl, $72a4
.asm_31fe
	ld d, $03
.asm_3200
	ld e, $14
.asm_3202
	ld a, [hli]
	ld [bc], a
	inc c
	dec e
	jr nz, .asm_3202
	ld a, c
	add $0c
	ld c, a
	ld a, b
	adc $00
	ld b, a
	dec d
	jr nz, .asm_3200
	sub a
	ld [$ffec], a
	ld [hNumCarrots], a
	ld [hCarrotMeter], a
	ld [$fff2], a
	ld [$fff5], a
	ld [$fff6], a
	ld [$fff7], a
	ld [$fff8], a
	ld [$fff9], a
	ld [$fffa], a
	ld [$fffb], a
	ld [$fffc], a
	ld [hEXTRALetters], a
	ret

ResetPlayerData:
	ld a, [wDifficultySetting]
	ld bc, $505
	ld d, 4
	and a
	jr z, .setData
	ld bc, $404
	ld d, 3
.setData
	ld a, b
	ld [hCurHealth], a
	ld a, c
	ld [hMaxHealth], a
	ld a, d
	ld [hNumLives], a
	sub a
	ld [hScore], a
	ld [hScore + 1], a
	ret

INCBIN "baserom.gbc", $324e, $3252 - $324e

Func_3252:
	ld a, [hPaused]
	and a
	ret nz
	ld hl, $dd80
	ld a, [hli]
	ld [$ff8a], a
	ld a, $14
	ld [$ff8b], a
	ld a, $0c
	ld [MBC5RomBank], a
.asm_3265
	ld a, [$ff8a]
	and a
	jr z, .asm_32df
	dec a
	ld [$ff8a], a
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a
	ld a, [hCameraYOffset]
	ld e, a
	ld a, [bc]
	inc bc
	inc bc
	sub e
	ld e, a
	ld a, [hCameraXOffset]
	ld d, a
	ld a, [bc]
	inc bc
	inc bc
	sub d
	ld d, a
	ld a, [hli]
	push hl
	ld h, [hl]
	ld l, a
	dec hl
	ld a, [bc]
	and $20
	or [hl]
	inc hl
	ld [$ff8c], a
	ld a, [hli]
	inc hl
	and $1f
	ld [$ff8d], a
	ld a, [hActiveSprites]
	ld c, a
	ld b, $df
	ld a, [$ff8c]
	bit 5, a
	jr nz, .asm_32bc
.asm_329e
	ld a, [hli]
	add e
	ld [bc], a
	inc c
	ld a, [hli]
	inc hl
	add d
	ld [bc], a
	inc c
	ld a, [$ff8b]
	ld [bc], a
	inc c
	add $02
	ld [$ff8b], a
	ld a, [$ff8c]
	ld [bc], a
	inc c
	ld a, [$ff8d]
	dec a
	ld [$ff8d], a
	jr nz, .asm_329e
	jr .asm_32d8
.asm_32bc
	ld a, [hli]
	add e
	ld [bc], a
	inc c
	inc hl
	ld a, [hli]
	add d
	ld [bc], a
	inc c
	ld a, [$ff8b]
	ld [bc], a
	inc c
	add $02
	ld [$ff8b], a
	ld a, [$ff8c]
	ld [bc], a
	inc c
	ld a, [$ff8d]
	dec a
	ld [$ff8d], a
	jr nz, .asm_32bc
.asm_32d8
	pop hl
	inc hl
	ld a, c
	ld [hActiveSprites], a
	jr .asm_3265
.asm_32df
	ld bc, $dd80
	ld a, [hFrameCounter]
	rra
	jr c, .asm_32ea
	sub a
	ld [bc], a
	ret
.asm_32ea
	ld hl, $de86
	ld a, [bc]
	inc c
	ld [$ff8a], a
.asm_32f1
	ld a, [$ff8a]
	and a
	ret z
	dec a
	ld [$ff8a], a
	inc c
	inc c
	ld a, [bc]
	inc c
	ld e, a
	ld a, [bc]
	inc c
	ld d, a
	push bc
	ld a, [de]
	and $1f
	ld b, a
	ld a, [de]
	inc de
	and $e0
	ld [$ff8b], a
	ld a, [de]
	and $c0
	rlca
	rlca
	add $08
	ld c, a
	ld a, [de]
	and $3f
	add $40
	ld d, a
	ld a, [$ff8b]
	ld e, a
.asm_331c
	ld a, c
	ld [hli], a
	ld a, e
	ld [hli], a
	add $20
	ld e, a
	ld a, d
	ld [hli], a
	adc $00
	ld d, a
	ld a, l
	cp $b6
	jr nz, .asm_332f
	ld l, $86
.asm_332f
	dec b
	jr nz, .asm_331c
	pop bc
	jr .asm_32f1

Func_3335:
	ld hl, $dd80
	ld b, $21
	sub a
.asm_333b
	ld [hli], a
	dec b
	jr nz, .asm_333b
	ret

Func_3340:
	ld hl, $de86
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, $8140
	ld a, $02
	ld [$ff8a], a
.asm_3352
	pop bc
	pop de
.asm_3354
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .asm_3354
.asm_335a
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .asm_335a
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld [hl], e
	inc l
	ld [hl], d
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld a, [$ff8a]
	dec a
	ld [$ff8a], a
	jr nz, .asm_3352
	pop bc
	pop de
.asm_338a
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .asm_338a
.asm_3390
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .asm_3390
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld [hl], e
	inc l
	ld [hl], d
	ld hl, $de89
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, $8160
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld a, $02
	ld [$ff8a], a
.asm_33be
	pop bc
	pop de
.asm_33c0
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .asm_33c0
.asm_33c6
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .asm_33c6
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld [hl], e
	inc l
	ld [hl], d
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld a, [$ff8a]
	dec a
	ld [$ff8a], a
	jr nz, .asm_33be
	ld hl, $de8c
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, $8180
	ld a, $02
	ld [$ff8a], a
.asm_3406
	pop bc
	pop de
.asm_3408
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .asm_3408
.asm_340e
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .asm_340e
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld [hl], e
	inc l
	ld [hl], d
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld a, [$ff8a]
	dec a
	ld [$ff8a], a
	jr nz, .asm_3406
	pop bc
	pop de
.asm_343e
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .asm_343e
.asm_3444
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .asm_3444
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld [hl], e
	inc l
	ld [hl], d
	ld hl, $de8f
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, $81a0
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld a, $02
	ld [$ff8a], a
.asm_3472
	pop bc
	pop de
.asm_3474
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .asm_3474
.asm_347a
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .asm_347a
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld [hl], e
	inc l
	ld [hl], d
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld a, [$ff8a]
	dec a
	ld [$ff8a], a
	jr nz, .asm_3472
	ld hl, $de92
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, $81c0
	ld a, $02
	ld [$ff8a], a
.asm_34ba
	pop bc
	pop de
.asm_34bc
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .asm_34bc
.asm_34c2
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .asm_34c2
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld [hl], e
	inc l
	ld [hl], d
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld a, [$ff8a]
	dec a
	ld [$ff8a], a
	jr nz, .asm_34ba
	pop bc
	pop de
.asm_34f2
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .asm_34f2
.asm_34f8
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .asm_34f8
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld [hl], e
	inc l
	ld [hl], d
	ld hl, $de95
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, $81e0
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	pop de
.asm_3524
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .asm_3524
.asm_352a
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .asm_352a
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld [hl], e
	inc l
	ld [hl], d
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	pop de
.asm_3553
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .asm_3553
.asm_3559
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .asm_3559
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld [hl], e
	inc l
	ld [hl], d
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	ld hl, $de98
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, $8200
	ld a, $02
	ld [$ff8a], a
.asm_358c
	pop bc
	pop de
.asm_358e
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .asm_358e
.asm_3594
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .asm_3594
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld [hl], e
	inc l
	ld [hl], d
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld a, [$ff8a]
	dec a
	ld [$ff8a], a
	jr nz, .asm_358c
	pop bc
	pop de
.asm_35c4
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .asm_35c4
.asm_35ca
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .asm_35ca
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld [hl], e
	inc l
	ld [hl], d
	ld hl, $de9b
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, $8220
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld a, $02
	ld [$ff8a], a
.asm_35f8
	pop bc
	pop de
.asm_35fa
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .asm_35fa
.asm_3600
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .asm_3600
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld [hl], e
	inc l
	ld [hl], d
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld a, [$ff8a]
	dec a
	ld [$ff8a], a
	jr nz, .asm_35f8
	ld hl, $de9e
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, $8240
	ld a, $02
	ld [$ff8a], a
.asm_3640
	pop bc
	pop de
.asm_3642
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .asm_3642
.asm_3648
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .asm_3648
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld [hl], e
	inc l
	ld [hl], d
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld a, [$ff8a]
	dec a
	ld [$ff8a], a
	jr nz, .asm_3640
	pop bc
	pop de
.asm_3678
	ld a, [rSTAT]
	and STATF_LCD
	jr z, .asm_3678
.asm_367e
	ld a, [rSTAT]
	and STATF_LCD
	jr nz, .asm_367e
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	ld [hl], e
	inc l
	ld [hl], d
	ld hl, $dea1
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, $8260
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
.asm_36a7
	ld a, [rSTAT]
	and $03
	cp $01
	jr nz, .asm_36a7
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	ld hl, $dea4
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, $8280
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	ld hl, $dea7
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, $82a0
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	ld hl, $deaa
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, $82c0
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	ld hl, $dead
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, $82e0
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	ld hl, $deb0
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, $8300
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	ld hl, $deb3
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld sp, hl
	ld hl, $8320
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	inc l
	pop bc
	ld [hl], c
	inc l
	ld [hl], b
	ld sp, $dffe
	ld a, LCDCF_ON | LCDCF_WIN9C00 | LCDCF_WINON | LCDCF_BG8800 | LCDCF_BG9800 | LCDCF_OBJ16 | LCDCF_OBJON | LCDCF_BGON
	ld [rLCDC], a
	ld a, [hCameraXOffset]
	ld [rSCX], a
	ld a, [hCameraYOffset]
	ld [rSCY], a
	ret

Func_392e:
	ld hl, $de86
	ld b, $30
	sub a
.asm_3934
	ld [hli], a
	dec b
	jr nz, .asm_3934
	ret

Func_3939:
	ld a, [hPaused]
	and a
	ret nz
	sub a
	ld [$ffe8], a
	ld hl, $ffdb
	ld a, [hCameraXOffset]
	add $a0
	ld [hli], a
	ld a, [hCameraXOffset + 1]
	adc $00
	ld [hli], a
	ld a, [hPlayerXPos]
	add $08
	ld [hli], a
	ld a, [hPlayerXPos + 1]
	adc $00
	ld [hli], a
	ld a, [$ffaf]
	ld b, $1e
	rra
	jr nc, .asm_3960
	srl b
.asm_3960
	ld a, [hPlayerYPos]
	sub b
	ld [hli], a
	ld a, [hPlayerYPos + 1]
	sbc 0
	ld [hli], a
	ld a, [hli]
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	inc hl
	ld a, [hCameraXOffset]
	ld c, a
	ld a, [hCameraXOffset + 1]
	ld b, a
.asm_3977
	ld a, [hld]
	inc a
	jr z, .asm_3992
	ld a, [hli]
	sub c
	ld e, a
	ld a, [hl]
	sbc b
	ld d, a
	jr nc, .asm_398b
	ld a, e
	add $c0
	ld a, d
	adc $02
	jr nc, .asm_3991
.asm_398b
	ld de, $fffa
	add hl, de
	jr .asm_3977
.asm_3991
	dec hl
.asm_3992
	ld de, $6
	add hl, de
	ld a, [hli]
	sub c
	ld e, a
	ld a, [hld]
	sbc b
	ld d, a
	jr nc, .asm_39a6
	ld a, e
	add $c0
	ld a, d
	adc $02
	jr nc, .asm_3992
.asm_39a6
	ld a, l
	ld [$ffe2], a
	ld a, h
	ld [$ffe3], a
	ld a, [hCameraYOffset]
	add $e0
	ld e, a
	ld a, [hCameraYOffset + 1]
	adc $ff
	ld d, a
	inc bc
	ld a, [$ffe1]
	ld [MBC5RomBank], a
.asm_39bc
	ld a, [hli]
	sub c
	ld a, [hli]
	sbc b
	ret nc
	ld a, [hli]
	sub c
	ld a, [hli]
	sbc b
	jr c, .asm_39e6
	push hl
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, [hli]
	sub e
	ld a, [hld]
	sbc d
	jr nz, .asm_39e5
	ld a, [hld]
	sub e
	cp $c0
	jr nc, .asm_39e5
	push bc
	push de
	ld a, [hld]
	ld b, a
	ld a, [hli]
	ld c, a
	inc hl
	ld a, $01
	ld [MBC5RomBank], a
	push bc
	ret
.asm_39e5
	pop hl
.asm_39e6
	inc hl
	inc hl
	jr .asm_39bc

INCBIN "baserom.gbc", $39ea, $39f1 - $39ea

Func_39f1:
	ld a, $06
	ld [MBC5RomBank], a
	ld a, [hli]
	ld [$ffe1], a
	ld a, [hli]
	ld [$ffe2], a
	ld a, [hli]
	ld [$ffe3], a
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a
	push hl
	ld a, [$ffe1]
	ld [MBC5RomBank], a
	ld hl, $d500
	ld de, $400
.asm_3a0f
	ld a, [bc]
	inc bc
	ld [hli], a
	dec de
	ld a, e
	or d
	jr nz, .asm_3a0f
	sub a
	ld [$ffe8], a
	ld hl, $ffdb
	ld a, [hCameraXOffset]
	add $a0
	ld [hli], a
	ld a, [hCameraXOffset + 1]
	adc $00
	ld [hli], a
	ld a, [hPlayerXPos]
	add $08
	ld [hli], a
	ld a, [hPlayerXPos + 1]
	adc $00
	ld [hli], a
	ld a, [hPlayerYPos]
	sub $1e
	ld [hli], a
	ld a, [hPlayerYPos + 1]
	sbc 0
	ld [hli], a
	sub a
	ld [$ffe9], a
	ld [$ffea], a
	pop hl
	ret

Func_3a42:
	ld a, [wLanguageSetting]
	add a
	ld c, a
	ld b, $00
	add hl, bc
	ld a, [hli]
	ld h, [hl]
	ld l, a
Func_3a4d:
	ld a, [hli]
	ld e, a
	ld a, [hli]
	ld d, a
.asm_3a51
	ld a, [hli]
	cp $ff
	ret z
	and a
	jr z, Func_3a4d
	push hl
	sub $30
	ld l, a
	ld h, $00
	add hl, hl
	add hl, hl
	add hl, hl
	add hl, hl
	ld bc, $c000
	add hl, bc
	ld b, h
	ld c, l
.asm_3a68
	ld a, [bc]
	inc c
	ld l, a
	ld a, [bc]
	inc c
	ld h, a
	cpl
	and l
	ld l, a
	ld a, [de]
	and h
	or l
	ld [de], a
	inc e
	ld a, [de]
	and h
	ld [de], a
	inc de
	ld a, c
	and $0f
	jr nz, .asm_3a68
	pop hl
	jr .asm_3a51

Func_3a82:
	ld a, $05
	ld [MBC5RomBank], a
	ld hl, $731c
	ld bc, $0
	call Func_3ca6
	ld hl, $deed
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a
	ld a, [hli]
	ld e, a
	ld a, [hli]
	ld d, a
	ld a, [hli]
	ld [$ff8a], a
	ld a, [hli]
	add a
	jr nc, .asm_3ae5
.asm_3aa2
	call WaitHBlankStart
	ld a, [bc]
	inc c
	ld [de], a
	inc e
	ld a, [bc]
	ld [de], a
	ld hl, $f
	add hl, bc
	ld b, h
	ld c, l
	ld hl, $f
	add hl, de
	ld d, h
	ld e, l
	ld a, [$ff8a]
	dec a
	ld [$ff8a], a
	jr nz, .asm_3aa2
	ld hl, $def3
	dec [hl]
	jp z, .asm_3b4c
	ld hl, $deed
	ld a, c
	and $0f
	cp $0e
	jr nz, .asm_3ade
	ld a, c
	sub $0e
	ld [hli], a
	ld a, b
	ld [hli], a
	ld a, [hl]
	add $12
	ld [hli], a
	ld a, [hl]
	adc $01
	ld [hl], a
	ret
.asm_3ade
	inc [hl]
	inc [hl]
	inc l
	inc l
	inc [hl]
	inc [hl]
	ret
.asm_3ae5
	add a
	jr nc, .asm_3b54
	ld a, [hl]
	and $07
	add $8e
	ld l, a
	ld a, $73
	adc $00
	ld h, a
	ld a, [hl]
	ld [$ff8b], a
.asm_3af6
	call WaitHBlankStart
	ld a, [$ff8b]
	ld l, a
	cpl
	ld h, a
	push hl
	ld a, [bc]
	inc c
	and l
	ld l, a
	ld a, [de]
	and h
	or l
	ld [de], a
	inc e
	pop hl
	ld a, [bc]
	inc bc
	and l
	ld l, a
	ld a, [de]
	and h
	or l
	ld [de], a
	inc de
	ld a, c
	and $0f
	jr nz, .asm_3b28
	ld hl, $def4
	ld a, [hli]
	add c
	ld c, a
	ld a, [hl]
	adc b
	ld b, a
	ld a, e
	add $10
	ld e, a
	ld a, d
	adc $01
	ld d, a
.asm_3b28
	ld a, [$ff8a]
	dec a
	ld [$ff8a], a
	jr nz, .asm_3af6
	ld hl, $def3
	dec [hl]
	jr z, .asm_3b4c
	ld a, [hl]
	and $07
	ret nz
	ld hl, $deed
	ld bc, $10
	ld a, [hl]
	add c
	ld [hli], a
	ld a, [hl]
	adc b
	ld [hli], a
	ld a, [hl]
	add c
	ld [hli], a
	ld a, [hl]
	adc b
	ld [hl], a
	ret
.asm_3b4c
	ld hl, $def2
	ld a, [hl]
	and $3f
	ld [hl], a
	ret
.asm_3b54
	add a
	ret nc
	ld hl, $def6
	dec [hl]
	ret nz
	inc l
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld bc, $deed
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld e, a
	swap a
	and $f0
	ld [$ff8e], a
	ld a, e
	swap a
	and $0f
	ld [$ff8f], a
	ld a, [hli]
	ld d, a
	bit 7, [hl]
	jr z, .asm_3b8c
	sla d
	sla d
	sla d
	ld a, e
	jr .asm_3b97
.asm_3b8c
	sla e
	sla e
	sla e
	ld a, d
	ld d, e
	add a
	add a
	add a
.asm_3b97
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, d
	ld [bc], a
	inc c
	ld a, [$ff8e]
	sub $10
	ld [bc], a
	inc c
	ld a, [$ff8f]
	sbc 0
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, l
	ld [bc], a
	inc c
	ld a, h
	ld [bc], a
	ret

Func_3bb4:
	ld a, $06
	ld [MBC5RomBank], a
	ld a, [hli]
	ld [$def7], a
	ld a, [hli]
	ld [$def8], a
	push hl
	ld hl, vBGMap
	ld bc, $400
.asm_3bc8
	ld a, $7f
	ld [hli], a
	dec bc
	ld a, c
	or b
	jr nz, .asm_3bc8
	ld hl, $9841
	ld bc, $e
	ld a, $83
	ld d, $0e
.asm_3bda
	ld e, $12
.asm_3bdc
	ld [hli], a
	inc a
	dec e
	jr nz, .asm_3bdc
	add hl, bc
	dec d
	jr nz, .asm_3bda
	ld a, $05
	ld [MBC5RomBank], a
	ld hl, $def7
	ld a, [hli]
	ld h, [hl]
	ld l, a
.asm_3bf0
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a
	ld a, [hli]
	ld e, a
	ld a, [hli]
	ld d, a
	ld a, [hli]
	ld [$ff8a], a
	ld a, [hli]
	ld [$ff8b], a
	push hl
.asm_3bff
	ld a, [$ff8a]
	ld [$ff8c], a
.asm_3c03
	ld h, b
	ld l, c
.asm_3c05
	ld a, [hli]
	and a
	jr nz, .asm_3c19
	ld a, l
	and $0f
	jr nz, .asm_3c05
.asm_3c0e
	ld a, [de]
	inc de
	ld [bc], a
	inc bc
	ld a, c
	and $0f
	jr nz, .asm_3c0e
	jr .asm_3c25
.asm_3c19
	ld hl, $10
	add hl, bc
	ld b, h
	ld c, l
	ld hl, $10
	add hl, de
	ld d, h
	ld e, l
.asm_3c25
	ld a, [$ff8c]
	dec a
	ld [$ff8c], a
	jr nz, .asm_3c03
	ld a, [$ff8a]
	cpl
	inc a
	ld l, a
	ld h, $ff
	add hl, hl
	add hl, hl
	add hl, hl
	add hl, hl
	add hl, de
	ld de, $120
	add hl, de
	ld d, h
	ld e, l
	ld a, [$ff8b]
	dec a
	ld [$ff8b], a
	jr nz, .asm_3bff
	pop hl
	ld a, [hli]
	inc hl
	and $20
	jr nz, .asm_3bf0
	ld a, $20
	ld [$def2], a
	ld a, $3c
	ld [$def6], a
	pop hl
	ret

ReadJoyPadHome:
	ld a, Bank(ReadJoyPad)
	ld [MBC5RomBank], a
	jp ReadJoyPad

TryTogglePause:
	ld a, [wNewKeys]
	bit PADB_START, a
	ret z
	ld a, [hPaused]
	cpl
	ld [hPaused], a
	and a
	jp z, ResumeMusicHome
	jp PauseMusicHome

Func_3c72:
	sub a
	ld hl, wNewKeys
	ld [hld], a
	cpl
	ld [hl], a
	ret

Func_3c7a:
	ld a, [$ffdb]
	sub c
	ld e, a
	ld a, [$ffdc]
	sbc d
	jr nz, .asm_3c95
	ld a, e
	cp $d8
	jr nc, .asm_3c95
	ld a, [hCameraYOffset]
	ld e, a
	ld a, b
	sub e
	cp $98
	jr c, Func_3c98
	cp $e0
	jr nc, Func_3c98
.asm_3c95
	ld a, $ff
	ret
Func_3c98:
	ld a, [hCameraXOffset]
	ld e, a
	ld a, c
	sub e
	ld c, a
	ld a, [hCameraYOffset]
	ld e, a
	ld a, b
	sub e
	ld b, a
	jr Func_3ca6

Func_3ca6:
	ld a, [hli]
	ld e, a
	ld a, [hli]
	ld d, a
	push de
	ld a, [hActiveSprites]
	ld e, a
	ld d, $df
	ret

Func_3cb1:
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	add b
	ld [de], a
	inc e
	ld a, [hli]
	add c
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, [hli]
	ld [de], a
	inc e
	ld a, e
	ld [hActiveSprites], a
	sub a
	ret

ClearOAMBufferHome:
	ld a, Bank(ClearOAMBuffer)
	ld [MBC5RomBank], a
	jp ClearOAMBuffer

WriteDMACodeToHRAM:
	ld hl, DMARoutine
	ld c, (hDMARoutine & $ff)
	ld b, 10
.loop
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	dec b
	jr nz, .loop
	ld hl, wOAMBuffer
	ld b, wOAMBufferEnd - wOAMBuffer
	sub a
.clear
	ld [hli], a
	dec b
	jr nz, .clear
	call hDMARoutine
	sub a
	ld [hActiveSprites], a
	ret

DMARoutine:
	ld a, wOAMBuffer >> 8
	ld [rDMA], a
	ld a, $28
.waitLoop
	dec a
	jr nz, .waitLoop
	ret

TryInitNextScreenHome:
	ld a, Bank(TryInitNextScreen)
	ld [MBC5RomBank], a
	jp TryInitNextScreen

Func_3dce:
	call Func_3e3d
	ld a, Bank(Func_1759b)
	ld [MBC5RomBank], a
	ld bc, $1fd
	jp Func_1759b

Func_3ddc:
	ld a, [$defc]
	and a
	ret nz
	call Func_3e47
	ld a, Bank(Func_1759b)
	ld [MBC5RomBank], a
	ld bc, $ff0c
	jp Func_1759b

INCBIN "baserom.gbc", $3def, $3dfb - $3def

TickMusicEngineHome:
	ld a, Bank(TickMusicEngine)
	ld [MBC5RomBank], a
	jp TickMusicEngine

PauseMusicHome:
	ld a, Bank(PauseMusic)
	ld [MBC5RomBank], a
	jp PauseMusic

ResumeMusicHome:
	ld a, Bank(ResumeMusic)
	ld [MBC5RomBank], a
	jp ResumeMusic

Func_3e13:
	ld a, Bank(Func_8053)
	ld [MBC5RomBank], a
	jp Func_8053

Func_3e1b:
; play sound effect?
	push bc
	push de
	push hl
	ld b, a
	ld a, Bank(Func_8056)
	ld [MBC5RomBank], a
	ld a, b
	call Func_8056
	pop hl
	pop de
	pop bc
	ld a, $01
	ld [MBC5RomBank], a
	ret

Func_3e31:
	sub a
	ld [$defe], a
	ld a, Bank(Func_8059)
	ld [MBC5RomBank], a
	jp Func_8059

Func_3e3d:
	ld a, Bank(Func_805c)
	ld [MBC5RomBank], a
	ld a, $04
	jp Func_805c

Func_3e47:
	ld a, Bank(Func_805f)
	ld [MBC5RomBank], a
	ld a, $04
	jp Func_805f

Func_3e51:
	ld a, [$defe]
	and a
	jr z, .asm_3e5a
	inc hl
	inc hl
	ret
.asm_3e5a
	ld a, $06
	ld [MBC5RomBank], a
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a
	push hl
	ld a, $02
	ld [MBC5RomBank], a
	ld de, $3e6f
	push de
	push bc
	ret

INCBIN "baserom.gbc", $3e6f, $3e71 - $3e6f

Func_3e71:
	ld a, [$defe]
	and a
	ret nz
	push bc
	push de
	ld a, $02
	ld [MBC5RomBank], a
	ld bc, $3e83
	push bc
	push hl
	ret

INCBIN "baserom.gbc", $3e83, $3e8b - $3e83

InitNextScreen:
	sub a
	ld [hPaused], a
	ld sp, wStack
	call Func_3e13
	call WriteDMACodeToHRAM
	call WaitUntilSafeToAccessVRAM
	ld hl, wCurScreen
	inc [hl]
	ld a, [hl]
	add a
	ld c, a
	ld b, $00
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	ld hl, Data_1af94
	jr nz, .load
	ld hl, Data_1b030
.load
	add hl, bc
	ld a, Bank(Data_1af94)
	ld [MBC5RomBank], a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	or h
	jp z, Start_
	call LoadData
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a
	push bc
	ret

SetInitialScreen:
	sub a
	ld [wCurScreen], a
	ret

INCLUDE "home/load.asm"

SECTION "ROM Bank $01", ROMX[$4000], BANK[$1]

INCBIN "baserom.gbc", $4000, $795e - $4000

Func_795e:
	ld a, [hPaused]
	and a
	ret nz
	ld hl, $ddcc
	ld a, [hli]
	ld c, a
	ld b, $88
	bit 7, [hl]
	ld hl, $c1e8
	jr z, .asm_7973
	ld hl, $c222
.asm_7973
	call Func_3ca6
	ld a, [$ddcd]
	bit 6, a
	jr nz, .asm_7998
	ld a, [hFrameCounter]
	bit 4, a
	jr z, .asm_798c
	ld bc, $3844
	ld hl, $c25c
	call Func_3ca6
.asm_798c
	ld a, [wNewKeys]
	bit PADB_B, a
	ret z
	ld hl, $ddcd
	set 6, [hl]
	ret
.asm_7998
	ld a, [$ddcd]
	bit 5, a
	jr z, .asm_79bb
	ld hl, $ffb5
	dec [hl]
	jp z, InitNextScreen
	ld hl, $ddde
	ld a, [hli]
	cp [hl]
	ret nz
	ld a, [hFrameCounter]
	bit 4, a
	ret z
	ld bc, $3844
	ld hl, $c272
	call Func_3ca6
	ret
.asm_79bb
	ld hl, $ddce
	ld a, [hl]
	and a
	jr z, .asm_79c9
	dec [hl]
	jp nz, .asm_7a69
	dec l
	res 7, [hl]
.asm_79c9
	ld a, [wHeldKeys]
	bit PADB_A, a
	jr z, .asm_79e7
	ld hl, $ddd3
	ld a, [hli]
	or [hl]
	jr nz, .asm_79e7
	ld a, [hFrameCounter]
	rra
	jr c, .asm_7a48
	ld a, [hNumCarrots]
	cp 32
	jr z, .asm_7a48
	inc a
	ld [hNumCarrots], a
	jr .asm_7a48
.asm_79e7
	ld a, [hNumCarrots]
	and a
	jr z, .asm_7a48
	ld hl, $ddcc
	ld a, [hli]
	add $10
	ld b, a
	set 7, [hl]
	inc l
	ld a, $1e
	ld [hli], a
	inc l
	inc l
	inc l
	ld a, b
	ld [hli], a
	ld a, [hNumCarrots]
	ld b, $ff
.asm_7a02
	inc b
	sub $0b
	jr nc, .asm_7a02
	ld a, b
	add a
	add $c8
	ld c, a
	ld a, $c2
	adc $00
	ld b, a
	ld a, [bc]
	inc bc
	ld [hli], a
	ld a, [bc]
	ld [hl], a
	sub a
	ld [hNumCarrots], a
	ld [hCarrotMeter], a
	ld hl, $9300
	ld bc, vTilesBG
	ld d, $20
.asm_7a23
	call WaitHBlankStart
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	dec d
	jr nz, .asm_7a23
	ld a, $0e
	call Func_3e1b
	jr .asm_7a69
.asm_7a48
	ld hl, $ddcc
	ld a, [wHeldKeys]
	bit PADB_LEFT, a
	jr z, .asm_7a55
	dec [hl]
	jr .asm_7a5a
.asm_7a55
	bit PADB_RIGHT, a
	jr z, .asm_7a5a
	inc [hl]
.asm_7a5a
	ld a, [hl]
	cp $08
	jr nc, .asm_7a63
	ld [hl], $08
	jr .asm_7a69
.asm_7a63
	cp $88
	jr c, .asm_7a69
	ld [hl], $88
.asm_7a69
	ld hl, $ddcf
	ld a, [hl]
	and a
	jr z, .asm_7a95
	cp $28
	jr c, .asm_7a78
	ld [hl], $00
	jr .asm_7a95
.asm_7a78
	inc [hl]
	and $f8
	srl a
	srl a
	add $84
	ld l, a
	ld a, $c1
	adc $00
	ld h, a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, [$ddd0]
	ld c, a
	ld a, [$ddd1]
	ld b, a
	call Func_3ca6
.asm_7a95
	ld hl, $ddd2
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld e, a
	ld a, [hld]
	ld d, a
	or e
	jr z, .asm_7ad0
	ld a, [de]
	cp $ff
	jr nz, .asm_7aba
	sub a
	ld [hli], a
	ld [hld], a
	dec l
	dec l
	dec de
	dec de
	ld a, [de]
	ld [hld], a
	ld a, c
	ld [hld], a
	ld [hl], $01
	ld a, $0d
	call Func_3e1b
	jr .asm_7ad0
.asm_7aba
	inc de
	ld b, a
	ld a, [de]
	inc de
	ld [hl], e
	inc l
	ld [hl], d
	add a
	add $88
	ld l, a
	ld a, $c2
	adc $00
	ld h, a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	call Func_3ca6
.asm_7ad0
	ld hl, $ddd5
	ld a, [hli]
	ld d, a
	add a
	jr nc, .asm_7b01
	inc [hl]
	ld a, [hl]
	cp $2d
	jr c, .asm_7ae8
	cp $5a
	jp nc, Func_7b8a
	ld a, [hFrameCounter]
	bit 3, a
	ret z
.asm_7ae8
	inc l
	ld a, [hli]
	ld c, a
	ld b, [hl]
	ld a, d
	and $07
	add a
	add $0c
	add $60
	ld l, a
	ld a, $c0
	adc $00
	ld h, a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	call Func_3ca6
	ret
.asm_7b01
	inc l
	ld a, [hli]
	ld c, a
	ld b, [hl]
	ld a, d
	and $07
	add a
	add $60
	ld l, a
	ld a, $c0
	adc $00
	ld h, a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	call Func_3ca6
	ld hl, $ddd5
	ld a, [hli]
	add a
	add a
	jr nc, .asm_7b31
	dec [hl]
	jr nz, .asm_7b56
	dec l
	res 6, [hl]
	set 4, [hl]
	ld a, [hl]
	xor $20
	ld [hli], a
	ld a, [$dddd]
	ld [hl], a
	jr .asm_7b56
.asm_7b31
	dec [hl]
	jr nz, .asm_7b42
	dec l
	bit 4, [hl]
	jr nz, Func_7b8a
	set 6, [hl]
	inc l
	ld a, [$dddc]
	ld [hl], a
	jr .asm_7b56
.asm_7b42
	inc l
	add a
	jr c, .asm_7b4d
	ld a, [$dddb]
	add [hl]
	ld [hl], a
	jr .asm_7b56
.asm_7b4d
	ld a, [$dddb]
	cpl
	inc a
	add [hl]
	ld [hl], a
	jr .asm_7b56
.asm_7b56
	ld hl, $ddcf
	ld a, [hli]
	and a
	ret z
	ld a, [hli]
	add $10
	ld c, a
	ld b, [hl]
	ld hl, $ddd7
	ld a, [hli]
	cp $08
	ret c
	cp $98
	ret nc
	sub c
	ret nc
	cp $e0
	ret c
	ld a, [hli]
	sub $10
	sub b
	cp $06
	ret nc
	ld hl, $ddd5
	set 7, [hl]
	inc l
	sub a
	ld [hl], a
	ld hl, $dddf
	inc [hl]
	ld bc, 5
	call AddScore
	ret
Func_7b8a:
	ld hl, $ddd9
	ld a, [hli]
	ld c, a
	ld a, [hld]
	ld b, a
	ld a, [bc]
	inc bc
	cp $ff
	jr nz, .asm_7bb0
	ld hl, $ddcd
	set 5, [hl]
	ld hl, $406e
	call Func_3e71
	ld hl, $ddde
	ld a, [hli]
	cp [hl]
	ret nz
	ld a, [hNumLives]
	add 1
	daa
	ld [hNumLives], a
	ret
.asm_7bb0
	add a
	add a
	ld e, a
	ld d, $00
	ld a, c
	ld [hli], a
	ld [hl], b
	ld hl, $c030
	add hl, de
	ld bc, $ddd5
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [$dddd], a
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld hl, $ddde
	inc [hl]
	ret

INCBIN "baserom.gbc", $7bd3, $7dfc - $7bd3

ResetInitialData:
	call WaitUntilSafeToAccessVRAM
	sub a
	ld [rIF], a
	ld [$ffff], a
	ld [rSC], a
	ld [rTAC], a
	ld [rSTAT], a
	ld a, $30
	ld [rP1], a
	ld hl, vTilesOB
	ld bc, $2000
	call ClearData
	ld hl, wRAMStart
	ld bc, wStack - wRAMStart - 4
	call ClearData
	ld hl, _HRAM
	ld bc, $7e
	call ClearData
	sub a
	ld [wLanguageSetting], a
	ld [wDifficultySetting], a
	ld [$deb6], a
	ld [wEnableLevelSkip], a
	ld hl, wPasswordCharacters
	ld [hli], a
	ld [hli], a
	ld [hl], a
	ret

; Fills a data region with 0 values.
; Input: hl = destination
;        bc = number of bytes to clear
ClearData:
	sub a
	ld [hli], a
	dec bc
	ld a, c
	or b
	jr nz, ClearData
	ret

INCBIN "baserom.gbc", $7e45, $8000 - $7e45

SECTION "ROM Bank $02", ROMX[$4000], BANK[$2]

INCBIN "baserom.gbc", $8000, $804a - $8000

TickMusicEngine:
	jp TickMusicEngine_

PauseMusic:
	jp PauseMusic_

ResumeMusic:
	jp ResumeMusic_

Func_8053:
	jp Func_853d

Func_8056:
	jp Func_891a

Func_8059:
	jp Func_8522

Func_805c:
	jp Func_895d

Func_805f:
	jp Func_8957

INCBIN "baserom.gbc", $8062, $8098 - $8062

Func_8098:
	jp Func_891d

ResumeMusic_:
	xor a
	ld [$db42], a
	jp Func_876e

PauseMusic_:
	xor a
	ld [rNR12], a
	ld [rNR22], a
	ld [rNR42], a
	inc a
	ld [$db42], a
	ld a, [$de27]
	and a
	jr nz, .asm_80b6
	xor a
	ld [rNR32], a
.asm_80b6
	ld a, $80
	ld [rNR14], a
	ld [rNR24], a
	ld [rNR44], a
	ld a, [$de27]
	and a
	ret nz
	ld a, $80
	ld [rNR34], a
	ret

INCBIN "baserom.gbc", $80c8, $80e6 - $80c8

TickMusicEngine_:
	ld a, [$db42]
	and a
	jp nz, Func_81c1
	ld h, $db
	call Func_81de
	inc h
	call Func_81de
	inc h
	call Func_81de
	inc h
	call Func_81de
	call Func_8a7f
	ld hl, $db25
	ld l, $25
	ld e, [hl]
	inc l
	ld d, [hl]
	ld l, $05
	ld a, [hli]
	add e
	ld [$ff13], a
	ld a, [hli]
	adc d
	ld b, [hl]
	cp b
	jr z, Func_8122
	ld b, a
	ld [hl], a
	ld l, $33
	ld a, b
	ld c, [hl]
	inc c
	dec c
	jr z, Func_8131
	jp Func_8128
Func_8122:
	ld l, $33
	ld a, [hl]
	and a
	jr z, Func_8133
Func_8128:
	ld [hl], $00
	dec l
	ld a, [hl]
	ld [rNR12], a
	ld a, b
	or $80
Func_8131:
	ld [rNR14], a
Func_8133:
	inc h
	ld l, $25
	ld e, [hl]
	inc l
	ld d, [hl]
	ld l, $05
	ld a, [hli]
	add e
	ld [$ff18], a
	ld a, [hli]
	adc d
	ld b, [hl]
	cp b
	jr z, .asm_8152
	ld b, a
	ld [hl], a
	ld l, $33
	ld a, b
	ld c, [hl]
	inc c
	dec c
	jr z, Func_8161
	jp Func_8158
.asm_8152
	ld l, $33
	ld a, [hl]
	and a
	jr z, Func_asm_8163
Func_8158:
	ld [hl], $00
	dec l
	ld a, [hl]
	ld [rNR22], a
	ld a, b
	or $80
Func_8161
	ld [rNR24], a
Func_asm_8163
	ld hl, $de27
	ld a, [hl]
	and a
	jr nz, Func_816b
	dec h
Func_816b:
	ld l, $25
	ld e, [hl]
	inc l
	ld d, [hl]
	ld l, $05
	ld a, [hli]
	add e
	ld [$ff1d], a
	ld a, [hli]
	adc d
	cp [hl]
	jr z, .asm_817e
	ld [rNR34], a
	ld [hl], a
.asm_817e
	inc l
	ld a, [hl]
	add $ce
	ld l, a
	adc $41
	sub l
	ld h, a
	ld a, [$db44]
	cp [hl]
	jr z, Func_8193
	ld a, [hl]
	ld [$db44], a
	ld [rNR32], a
Func_8193:
	ld hl, $db38
	ld c, [hl]
	inc h
	ld a, [hl]
	rlc a
	or c
	ld c, a
	inc h
	ld a, [$de27]
	and a
	jr z, .asm_81a5
	inc h
.asm_81a5
	ld l, $38
	ld a, [hl]
	rlc a
	rlc a
	or c
	ld c, a
	ld a, [$db46]
	or c
	ld c, a
	ld a, [$db43]
	and a
	ld a, c
	jr nz, .asm_81bc
	ld a, $ff
.asm_81bc
	ld [$ff25], a
	jp Func_86ca

Func_81c1:
	call Func_86ca
	ld h, $de
	call Func_81de
	call Func_816b
	jr Func_8193

INCBIN "baserom.gbc", $81ce, $81de - $81ce

Func_81de:
	ld l, $27
	ld a, [hl]
	and a
	ret z
	ld l, $2f
	ld a, [hl]
	and a
	call nz, Func_866d
	ld l, $2c
	ld a, [hl]
	and a
	call nz, Func_863c
	ld l, $02
	ld e, [hl]
	inc l
	ld d, [hl]
	ld l, $0a
	dec [hl]
	call z, $427f
	ld l, $04
	bit 0, [hl]
	jr nz, .asm_8266
.asm_8202
	ld l, $0b
	ld a, [hli]
	add [hl]
	ld [hli], a
	add [hl]
	inc l
	add [hl]
	inc l
	add [hl]
	cp $50
	jr c, .asm_8211
	xor a
.asm_8211
	add a
	ld c, a
	ld b, $48
	ld l, $05
	ld a, [bc]
	inc c
	ld [hli], a
	ld a, [bc]
	ld [hl], a
	call Func_88a2
	call Func_8447
	ld l, $04
	bit 3, [hl]
	ret z
	ld l, $21
	ld a, [hl]
	and a
	jr z, .asm_822f
	dec [hl]
	ret
.asm_822f
	ld l, $04
	bit 4, [hl]
	jr z, .asm_824c
	ld l, $23
	dec [hl]
	jr nz, .asm_8242
	inc l
	ld a, [hld]
	ld [hl], a
	ld l, $04
	res 4, [hl]
	ret
.asm_8242
	ld l, $22
	ld a, [hl]
	ld l, $25
	add [hl]
	ld [hli], a
	ret nc
	inc [hl]
	ret
.asm_824c
	ld l, $23
	dec [hl]
	jr nz, .asm_8259
	inc l
	ld a, [hld]
	ld [hl], a
	ld l, $04
	set 4, [hl]
	ret
.asm_8259
	ld l, $22
	ld c, [hl]
	ld l, $25
	ld a, [hl]
	sub c
	ld [hli], a
	ret nc
	dec [hl]
	ret
.asm_8264
	ld [hl], $00
.asm_8266
	ld l, $1d
	ld a, [hli]
	ld b, [hl]
	inc l
	add [hl]
	ld c, a
	jr nc, .asm_8270
	inc b
.asm_8270
	ld a, [bc]
	cp $6a
	jr z, .asm_8264
	cp $ff
	jr z, .asm_8202
	inc [hl]
	ld l, $0e
	ld [hl], a
	jr .asm_8202

INCBIN "baserom.gbc", $827f, $8447 - $827f

Func_8447:
	ld l, $34
	ld a, [hl]
	and $f0
	jr z, .asm_8456
	swap a
	ld c, a
	ld l, $09
	ld a, [hl]
	cp c
	ret c
.asm_8456
	ld l, $04
	bit 1, [hl]
	ret z
	bit 2, [hl]
	ret nz
	ld l, $0a
	ld c, [hl]
	ld l, $34
	ld a, [hl]
	and $0f
	cp c
	ret nz
	ld a, [de]
	cp $65
	ret z
	ld l, $35
	ld a, h
	cp $dd
	jr z, .asm_8482
	cp $de
	jr z, .asm_8497
	ld a, [hl]
	ld l, $32
	ld [hli], a
	ld [hl], $01
.asm_847d
	ld l, $04
	set 2, [hl]
	ret
.asm_8482
	ld a, [hl]
	and $0f
	ld [$dd1b], a
	ld [$dd1a], a
	ld a, [hl]
	and $f0
	swap a
	jr z, .asm_847d
	ld [$dd08], a
	jr .asm_847d
.asm_8497
	ld a, [hl]
	and $0f
	ld [$de1b], a
	ld [$de1a], a
	ld a, [hl]
	and $f0
	swap a
	jr z, .asm_847d
	ld [$de08], a
	jr .asm_847d

INCBIN "baserom.gbc", $84ac, $8522 - $84ac

Func_8522:
	ld a, $ff
	ld [rNR52], a
	ld a, $70
	ld [$db4b], a
	ld a, $c5
	ld [$db4a], a
	xor a
	ld [$db45], a
	ld [$db42], a
	ld [$db47], a
	ld [$db5d], a
Func_853d:
	ld a, $70
	ld [$db49], a
	ld a, $20
	ld [$db48], a
	xor a
	ld [rNR12], a
	ld [rNR22], a
	ld [rNR32], a
	ld [rNR42], a
	ld [rNR14], a
	ld [rNR24], a
	ld [rNR34], a
	ld [rNR44], a
	ld [$db65], a
	ld [$db52], a
	ld [$db5c], a
	ld a, $88
	ld [$db46], a
	ld a, $77
	ld [rNR50], a
	ld h, $db
	call .asm_857b
	inc h
	call .asm_857b
	inc h
	call .asm_857b
	inc h
	jr .asm_857b
	pop af
.asm_857b
	ld a, h
	cp $de
	jr z, .asm_85aa
	xor a
	ld l, $38
	ld [hl], $11
	dec l
	ld [hl], a
	ld l, $27
	ld [hl], a
	ld l, $08
	ld [hl], a
	ld l, $04
	ld [hl], a
	ld l, $2f
	ld [hl], a
	ld l, $2c
	ld [hl], a
	ld l, $37
	ld [hl], a
	ld l, $0f
	ld [hld], a
	ld [hld], a
	ld [hl], $f4
	dec l
	dec l
	ld [hld], a
	inc a
	ld [hl], a
	ld l, $33
	ld [hld], a
	dec a
	ld [hl], a
	ret
.asm_85aa
	xor a
	ld [$de27], a
	ld [$de08], a
	ld [$db5e], a
	ld [$db5f], a
	dec a
	ld [$db44], a
	jp Func_876e

INCBIN "baserom.gbc", $85be, $863c - $85be

Func_863c:
	ld l, $2d
	dec [hl]
	ret nz
	ld l, $2c
	ld a, [hli]
	ld [hli], a
	ld a, [hl]
	inc a
	ld [hl], a
	dec a
	jr z, .asm_8655
	dec a
	jr z, .asm_865a
	dec a
	jr z, .asm_8655
	dec a
	jr z, .asm_865f
	ld [hl], $01
.asm_8655
	ld l, $38
	ld [hl], $11
	ret
.asm_865a
	ld l, $38
	ld [hl], $01
	ret
.asm_865f
	ld l, $38
	ld [hl], $10
	ret

INCBIN "baserom.gbc", $8664, $866d - $8664

Func_866d:
	ld l, $30
	dec [hl]
	ret nz
	ld l, $2f
	ld a, [hli]
	ld [hli], a
	ld a, [hl]
	inc a
	ld [hl], a
	dec a
	jr z, .asm_8686
	dec a
	jr z, .asm_868a
	dec a
	jr z, .asm_868e
	dec a
	jr z, .asm_868a
	ld [hl], $01
.asm_8686
	ld l, $80
	jr .asm_8690
.asm_868a
	ld l, $c0
	jr .asm_8690
.asm_868e
	ld l, $00
.asm_8690
	ld a, h
	cp $db
	jr nz, .asm_8699
	ld a, l
	ld [rNR11], a
	ret
.asm_8699
	ld a, l
	ld [rNR21], a
	ret

Func_869d:
	ld [$db64], a
	ld a, l
	ld [$db60], a
	ld a, h
	ld [$db61], a
	jr .asm_86b9
	ld a, [de]
	ld [$db64], a
	inc de
	ld a, [de]
	ld [$db60], a
	inc de
	ld a, [de]
	ld [$db61], a
	inc de
.asm_86b9
	xor a
	ld [$db62], a
	ld [$db63], a
	inc a
	ld [$db65], a
	ret

Func_86c5:
	xor a
	ld [$db65], a
	ret

Func_86ca:
	ld a, [$db65]
	and a
	jr nz, .asm_86d9
	ld a, [rNR50]
	and a
	ret z
	ld a, $77
	ld [rNR50], a
	ret
.asm_86d9
	ld a, [$db63]
	and a
	jr z, .asm_86e4
	dec a
	ld [$db63], a
	ret
.asm_86e4
	ld hl, $db60
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, [$db62]
	add l
	ld l, a
	adc h
	sub l
	ld h, a
	ld a, [hl]
	cp $6a
	jr z, .asm_870b
	cp $ff
	jr z, Func_86c5
	ld [rNR50], a
	ld a, [$db62]
	inc a
	ld [$db62], a
	ld a, [$db64]
	ld [$db63], a
	ret
.asm_870b
	xor a
	ld [$db62], a
	jr .asm_86e4

INCBIN "baserom.gbc", $8711, $876e - $8711

Func_876e:
	xor a
	ld [rNR30], a
	ld c, (_AUD3WAVERAM & $ff)
	ld hl, $db4c
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	ld a, [hl]
	ld [$ff00+c], a
	ld a, [$db42]
	and a
	ret nz
	ld a, $80
	ld [$dd07], a
	ld [rNR30], a
	ld [rNR34], a
	ret

INCBIN "baserom.gbc", $87b7, $88a2 - $87b7

Func_88a2:
	ld a, h
	cp $dd
	jr nc, .asm_88b7
	ld l, $2a
	ld a, [hl]
	and a
	ret z
	dec [hl]
	ret nz
	ld l, $2b
	ld a, [hl]
	ld l, $32
	ld [hli], a
	ld [hl], $01
	ret
.asm_88b7
	ld l, $11
	ld a, [hl]
	and a
	jr z, .asm_88d4
	ld l, $18
	dec [hl]
	ret nz
	inc l
	ld a, [hld]
	ld [hl], a
	ld l, $11
	dec [hl]
	inc l
	ld a, [hl]
	ld l, $08
	add [hl]
	cp $0f
	jr c, .asm_88d2
	ld a, $0f
.asm_88d2
	ld [hl], a
	ret
.asm_88d4
	ld l, $14
	ld a, [hl]
	and a
	ret z
	ld l, $1a
	dec [hl]
	ret nz
	inc l
	ld a, [hld]
	ld [hl], a
	ld l, $14
	dec [hl]
	ld l, $08
	ld a, [hl]
	ld l, $15
	sub [hl]
	jr nc, .asm_88ec
	xor a
.asm_88ec
	ld l, $08
	ld [hl], a
	ret

INCBIN "baserom.gbc", $88f0, $891a - $88f0

Func_891a:
	jp Func_8098

Func_891d:
	ld [$de27], a
	ld c, a
	ld a, $11
	ld [$de38], a
	xor a
	ld [$de04], a
	ld [$de0b], a
	ld [$de2f], a
	ld [$de2c], a
	ld [$de0e], a
	inc a
	ld [$de0a], a
	ld a, $f4
	ld [$de0d], a
	ld a, c
	ld de, $de02
	add a
	add $a4
	ld l, a
	adc $71
	sub l
	ld h, a
	ld a, [hli]
	ld [de], a
	inc de
	ld a, l
	ld l, e
	ld e, a
	ld a, h
	ld h, d
	ld d, a
	ld a, [de]
	ld [hl], a
	ret

Func_8957:
	ld hl, $77ee
	jp Func_869d

Func_895d:
	ld hl, $77f7
	jp Func_869d

INCBIN "baserom.gbc", $8963, $8a7f - $8963

Func_8a7f:
	ld a, [$db47]
	and a
	jr z, .asm_8a89
	dec a
	ld [$db47], a
.asm_8a89
	ld hl, $db54
	dec [hl]
	call z, $4994
	ld a, [$db5c]
	and a
	ret z
	ld a, [$db5e]
	and a
	jr z, .asm_8aa0
	dec a
	ld [$db5e], a
	ret
.asm_8aa0
	ld a, [$db5f]
	ld [$db5e], a
	ld a, [$db57]
	ld h, a
	ld a, [$db58]
	ld l, a
	ld a, [$db5b]
	ld e, a
	inc a
	ld [$db5b], a
	ld d, $00
	add hl, de
	ld a, [hl]
	cp $ff
	jr z, .asm_8b1b
	ld [$ff22], a
	ld a, [$db59]
	and a
	jr z, .asm_8aea
	ld h, a
	ld a, [$db5a]
	ld l, a
	add hl, de
	ld c, $00
	ld a, [$db47]
	and a
	jr nz, .asm_8ad8
	ld a, [$db5d]
	ld c, a
.asm_8ad8
	ld a, [hl]
	cp $ff
	jr z, .asm_8aea
	swap c
	sub c
	jr nc, .asm_8ae4
	and $0f
.asm_8ae4
	ld [rNR42], a
	ld a, $80
	ld [rNR44], a
.asm_8aea
	ld a, [$db47]
	and a
	ret nz
	ld a, [$db4e]
	and a
	ret z
	ld b, a
	ld a, [$db5b]
	dec a
	jr nz, .asm_8b01
	ld a, $88
	ld [$db46], a
	ret
.asm_8b01
	sub b
	jr nz, .asm_8b0a
	ld a, $08
	ld [$db46], a
	ret
.asm_8b0a
	sub b
	jr nz, .asm_8b13
	ld a, $80
	ld [$db46], a
	ret
.asm_8b13
	sub b
	ret nz
	ld a, $88
	ld [$db46], a
	ret
.asm_8b1b
	xor a
	ld [$db5b], a
	ld [$db5c], a
	ret

INCBIN "baserom.gbc", $8b23, $C000 - $8b23

SECTION "ROM Bank $03", ROMX[$4000], BANK[$3]

WarnerBrosCopyrightLogoTiles:
	INCBIN "gfx/warner_bros_copyright/logo.interleave.2bpp.lz"
WarnerBrosCopyrightTrademarkTiles:
	INCBIN "gfx/warner_bros_copyright/trademark.2bpp.lz"
WarnerBrosCopyrightLolaBunnyTiles:
	INCBIN "gfx/warner_bros_copyright/lola_bunny.2bpp.lz"

LanguageSelectFontTiles:
	INCBIN "gfx/language_select/font.2bpp.lz"

INCBIN "baserom.gbc", $c944, $ccff - $c944

FarmSceneTiles:
	INCBIN "gfx/titlescreen/background.2bpp.lz"

INCBIN "baserom.gbc", $d674, $da76 - $d674

InfogramesCopyrightTiles:
	INCBIN "gfx/infogrames_copyright/background.2bpp.lz"

StudioCameraArrowTiles:
	INCBIN "gfx/studio/camera_arrow.interleave.2bpp.lz"

INCBIN "baserom.gbc", $dde7, $f545 - $dde7

WarnerBrosCopyrightAmpersandTiles:
	INCBIN "gfx/warner_bros_copyright/ampersand.2bpp"

Func_f585:
	ld a, [hFrameCounter]
	and 7
	ret nz
	ld hl, $dde0
	ld a, [hli]
	ld c, a
	ld a, [hld]
	ld b, a
	ld a, [bc]
	inc bc
	cp $ff
	jp z, Func_3ddc
	ld d, a
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	ld a, d
	and a
	jr nz, .asm_f5fb
	sub a
	ld [hl], a
	ld hl, $9840
	ld bc, vBGMap
	ld d, $06
.asm_f5ab
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, [hli]
	ld [bc], a
	inc c
	ld a, l
	add $0c
	ld l, a
	ld a, h
	adc $00
	ld h, a
	ld a, c
	add $0c
	ld c, a
	ld a, b
	adc $00
	ld b, a
	dec d
	jr nz, .asm_f5ab
	ret
.asm_f5fb
	sub $40
	add a
	add $80
	ld b, a
	ld a, [hl]
	inc [hl]
	add $80
	ld l, a
	ld h, $98
	ld [hl], b
	inc b
	ld a, l
	add $20
	ld l, a
	ld [hl], b
	ret

Func_f610:
	ld hl, $dde5
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, [hl]
	cp $ff
	jp z, InitNextScreen
	ld a, [hActiveSprites]
	ld e, a
	ld d, $df
.asm_f621
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a
.asm_f625
	ld a, b
	ld [de], a
	inc e
	ld a, c
	ld [de], a
	inc e
	add $08
	ld c, a
	ld a, [hli]
	sub $40
	add a
	add $34
	ld [de], a
	inc e
	sub a
	ld [de], a
	inc e
	ld a, [hl]
	and a
	jr nz, .asm_f640
	inc hl
	jr .asm_f621
.asm_f640
	cp $01
	jr nz, .asm_f625
	ld a, e
	ld [hActiveSprites], a
	ld a, [hFrameCounter]
	cp $ff
	ret nz
	inc hl
	ld a, l
	ld [$dde5], a
	ld a, h
	ld [$dde6], a
	ret

INCBIN "baserom.gbc", $f656, $10000 - $f656

SECTION "ROM Bank $04", ROMX[$4000], BANK[$4]

INCBIN "baserom.gbc", $10000, $105d6 - $10000

StudioCeilingFloorTiles:
	INCBIN "gfx/studio/ceiling_floor.2bpp.lz"
StudioCeilingFloorTilemap:
	INCBIN "gfx/studio/ceiling_floor.tilemap.lz"
StudioTiles:
	INCBIN "gfx/studio/tiles.2bpp.lz"
StudioMetatiles:
	INCBIN "gfx/studio/metatiles.bin.lz"
StudioMap:
	INCBIN "data/levels/studio.vdmap.lz"

INCBIN "baserom.gbc", $11387, $14000 - $11387

SECTION "ROM Bank $05", ROMX[$4000], BANK[$5]

INCBIN "baserom.gbc", $14000, $16e8c - $14000

INCLUDE "data/passwords.asm"

INCBIN "baserom.gbc", $16eab, $173fa - $16eab

Func_173fa:
	ld a, [hPaused]
	and a
	ret nz
	ld a, [$ddc3]
	add a
	add $3e
	ld l, a
	ld a, $75
	adc $00
	ld h, a
	ld a, [hli]
	ld c, a
	ld b, [hl]
	ld d, $6b
	ld e, $03
	ld hl, $9b2d
.asm_17414
	call WaitHBlankStart
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	call WaitHBlankStart
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	call WaitHBlankStart
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, [bc]
	inc c
	sub d
	ld [hli], a
	ld a, l
	add $0d
	ld l, a
	ld a, h
	adc $00
	ld h, a
	dec e
	jr nz, .asm_17414
	ld hl, $9b8d
	call WaitHBlankStart
	ld a, $b6
	ld [hli], a
	ld a, $b4
	ld [hli], a
	ld a, $b5
	ld [hli], a
	ld a, $b6
	ld [hli], a
	ld a, $b7
	ld [hli], a
	ld a, $b8
	ld [hli], a
	ld [hl], $b9
	ld a, [$de82]
	cp $38
	jr nc, .asm_174cc
	ld hl, $9b2d
	ld bc, $19
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	ld d, $7a
	jr nz, .asm_174a5
	ld d, $b2
.asm_174a5
	call WaitHBlankStart
	ld a, d
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	add hl, bc
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	add hl, bc
	call WaitHBlankStart
	ld a, d
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	add hl, bc
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hl], a
.asm_174cc
	ld hl, $ddc3
	ld a, [hFrameCounter]
	sub $06
	and $07
	jr nz, .asm_174df
	inc [hl]
	ld a, [hl]
	cp $03
	jr c, .asm_174df
	ld [hl], $00
.asm_174df
	ld a, [hl]
	add a
	add $44
	ld l, a
	ld a, $75
	adc $00
	ld h, a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	push hl
	ld a, [$de82]
	ld c, a
	ld b, $48
	call Func_3ca6
	pop hl
	ld a, [$de82]
	cp $38
	jr c, .asm_17509
	ld a, [$de82]
	sub $50
	ld c, a
	ld b, $48
	call Func_3ca6
.asm_17509
	ld a, [$de82]
	and a
	ret z
	ld hl, hCameraXOffset
	ld a, [hli]
	add $04
	ld c, a
	ld a, [hl]
	adc $00
	ld b, a
	ld a, [hPlayerXPos]
	sub c
	ld a, [hPlayerXPos + 1]
	sbc b
	jr c, .asm_1753a
	ld a, [$de82]
	ld b, a
	ld a, [hCameraXOffset]
	add b
	ld c, a
	ld a, [hCameraXOffset + 1]
	adc $00
	ld b, a
	ld a, [hPlayerXPos]
	sub c
	ld a, [hPlayerXPos + 1]
	sbc b
	ret nc
	ld a, [hPlayerYPos]
	cp $60
	ret c
.asm_1753a
	call Func_1ae2
	ret

INCBIN "baserom.gbc", $1753e, $17568 - $1753e

TryInitNextScreen:
	ld a, [hPaused]
	and a
	ret nz
TryInitNextScreen_:
	ld hl, $defb
	dec [hl]
	ret nz
	ld a, $08
	ld [hli], a
	ld a, [hli]
	add a
	ld a, [hl]
	jr c, .asm_17586
	ret z
	add a, $03
	cp $0c
	jr nz, .asm_17589
	dec l
	sub a
	ld [hl], a
	ret
.asm_17586
	sub $03
	jp c, InitNextScreen
.asm_17589
	ld [hl], a
	ld hl, $3def
	ld c, a
	ld b, $00
	add hl, bc
	ld a, [hli]
	ld [rBGP], a
	ld a, [hli]
	ld [rOBP0], a
	ld a, [hl]
	ld [rOBP1], a
	ret

Func_1759b:
	ld hl, $defb
	ld a, $01
	ld [hli], a
	ld a, b
	ld [hli], a
	ld [hl], c
	jr TryInitNextScreen_

ClearOAMBuffer:
	ld a, [hPaused]
	and a
	ret nz
	call hDMARoutine
	ld a, [hActiveSprites]
	cp 161
	jr c, .ok
	ld a, 160
.ok
	srl a
	srl a
	ld b, a
	add a
	add b
	sub $79
	cpl
	ld hl, .jumpTable
	ld c, a
	ld b, $00
	add hl, bc
	sub a
	jp hl
.jumpTable
	ld [wOAMBuffer + $9c], a
	ld [wOAMBuffer + $98], a
	ld [wOAMBuffer + $94], a
	ld [wOAMBuffer + $90], a
	ld [wOAMBuffer + $8c], a
	ld [wOAMBuffer + $88], a
	ld [wOAMBuffer + $84], a
	ld [wOAMBuffer + $80], a
	ld [wOAMBuffer + $7c], a
	ld [wOAMBuffer + $78], a
	ld [wOAMBuffer + $74], a
	ld [wOAMBuffer + $70], a
	ld [wOAMBuffer + $6c], a
	ld [wOAMBuffer + $68], a
	ld [wOAMBuffer + $64], a
	ld [wOAMBuffer + $60], a
	ld [wOAMBuffer + $5c], a
	ld [wOAMBuffer + $58], a
	ld [wOAMBuffer + $54], a
	ld [wOAMBuffer + $50], a
	ld [wOAMBuffer + $4c], a
	ld [wOAMBuffer + $48], a
	ld [wOAMBuffer + $44], a
	ld [wOAMBuffer + $40], a
	ld [wOAMBuffer + $3c], a
	ld [wOAMBuffer + $38], a
	ld [wOAMBuffer + $34], a
	ld [wOAMBuffer + $30], a
	ld [wOAMBuffer + $2c], a
	ld [wOAMBuffer + $28], a
	ld [wOAMBuffer + $24], a
	ld [wOAMBuffer + $20], a
	ld [wOAMBuffer + $1c], a
	ld [wOAMBuffer + $18], a
	ld [wOAMBuffer + $14], a
	ld [wOAMBuffer + $10], a
	ld [wOAMBuffer + $c], a
	ld [wOAMBuffer + $8], a
	ld [wOAMBuffer + $4], a
	ld [wOAMBuffer], a
	ld [hActiveSprites], a
	ret

Func_17643:
	ld a, [hPaused]
	and a
	ret nz
	ld a, [$ffa4]
	add a
	jr c, .asm_17699
	jp z, Func_176e9
	ld bc, $b0
	ld de, hScore
	call Func_17791
.asm_17658
	ld hl, $ff98
	ld a, [hli]
	cp c
	ld a, [hli]
	jr nz, .asm_17663
	cp b
	jr z, .asm_17694
.asm_17663
	inc bc
	push bc
	push de
	ld a, [hl]
	add $10
	cp $b0
	jr nz, .asm_1766e
	sub a
.asm_1766e
	ld [hli], a
	add e
	ld e, a
	ld a, d
	adc $00
	ld d, a
	ld a, c
	and $0f
	jr nz, .asm_17682
	ld a, [hl]
	sub $10
	jr nc, .asm_17681
	ld a, $c0
.asm_17681
	ld [hl], a
.asm_17682
	call PrepareDrawMetatile
	call DrawMetatile_HBlank
	call DrawMetatileGBCAttributes_HBlank
	pop de
	pop bc
	ld a, [$ffa4]
	dec a
	ld [$ffa4], a
	jr nz, .asm_17658
.asm_17694
	ld hl, $ff50
	jr .asm_176e2
.asm_17699
	ld bc, hScore
	ld d, b
	ld e, c
	call Func_17791
.asm_176a1
	ld hl, $ff96
	ld a, [hli]
	cp c
	ld a, [hli]
	jr nz, .asm_176ac
	cp b
	jr z, .asm_176df
.asm_176ac
	push de
	inc l
	inc l
	ld a, [hl]
	sub $10
	jr nc, .asm_176b6
	ld a, $a0
.asm_176b6
	ld [hli], a
	add e
	ld e, a
	ld a, d
	adc $00
	ld d, a
	ld a, c
	and $0f
	jr nz, .asm_176cb
	ld a, [hl]
	add $10
	cp $d0
	jr nz, .asm_176ca
	sub a
.asm_176ca
	ld [hl], a
.asm_176cb
	dec bc
	push bc
	call PrepareDrawMetatile
	call DrawMetatile_HBlank
	call DrawMetatileGBCAttributes_HBlank
	pop bc
	pop de
	ld a, [$ffa4]
	inc a
	ld [$ffa4], a
	jr nz, .asm_176a1
.asm_176df
	ld hl, $10
.asm_176e2
	add hl, bc
	ld a, l
	ld [hCameraXOffset], a
	ld a, h
	ld [hCameraXOffset + 1], a
Func_176e9:
	ld a, [$ffa5]
	add a
	jr c, .asm_1773a
	jp z, Func_1778b
	ld bc, hScore
	ld de, $90
	call Func_17791
.asm_176fa
	ld hl, $ff9d
	ld a, [hld]
	cp d
	ld a, [hld]
	jr nz, .asm_17705
	cp e
	jr z, .asm_17735
.asm_17705
	inc de
	push bc
	push de
	ld a, [hl]
	sub $10
	jr nc, .asm_1770f
	ld a, $c0
.asm_1770f
	ld [hld], a
	add c
	ld c, a
	ld a, b
	adc $00
	ld b, a
	ld a, e
	and $0f
	jr nz, .asm_17723
	ld a, [hl]
	sub $10
	jr nc, .asm_17722
	ld a, $a0
.asm_17722
	ld [hl], a
.asm_17723
	call PrepareDrawMetatile
	call DrawMetatile_HBlank
	call DrawMetatileGBCAttributes_HBlank
	pop de
	pop bc
	ld a, [$ffa5]
	dec a
	ld [$ffa5], a
	jr nz, .asm_176fa
.asm_17735
	ld hl, $ff70
	jr .asm_17784
.asm_1773a
	ld bc, hScore
	ld d, b
	ld e, c
	call Func_17791
.asm_17742
	ld hl, $ff9f
	ld a, [hld]
	cp d
	ld a, [hld]
	jr nz, .asm_1774d
	cp e
	jr z, .asm_17781
.asm_1774d
	push bc
	dec l
	dec l
	ld a, [hl]
	add $10
	cp $d0
	jr nz, .asm_17758
	sub a
.asm_17758
	ld [hld], a
	add c
	ld c, a
	ld a, b
	adc $00
	ld b, a
	ld a, e
	and $0f
	jr nz, .asm_1776d
	ld a, [hl]
	add $10
	cp $b0
	jr nz, .asm_1776c
	sub a
.asm_1776c
	ld [hl], a
.asm_1776d
	dec de
	push de
	call PrepareDrawMetatile
	call DrawMetatile_HBlank
	call DrawMetatileGBCAttributes_HBlank
	pop de
	pop bc
	ld a, [$ffa5]
	inc a
	ld [$ffa5], a
	jr nz, .asm_17742
.asm_17781
	ld hl, $10
.asm_17784
	add hl, de
	ld a, l
	ld [hCameraYOffset], a
	ld a, h
	ld [hCameraYOffset + 1], a
Func_1778b:
	sub a
	ld [$ffa4], a
	ld [$ffa5], a
	ret

Func_17791:
	ld hl, hCameraXOffset
	ld a, [hli]
	add c
	ld c, a
	ld a, [hli]
	adc b
	ld b, a
	ld a, [hli]
	add e
	ld e, a
	ld a, [hl]
	adc d
	ld d, a
	ret

Func_177a1:
	ld a, [hPaused]
	and a
	ret nz
	ld a, [$de81]
	cp $90
	jr nz, .asm_177c9
	ld a, [$de82]
	cp $94
	jr nc, .asm_177c9
	ld a, [hFrameCounter]
	and $38
	srl a
	srl a
	srl a
	add $59
	ld l, a
	ld a, $78
	adc $00
	ld h, a
	ld a, [hl]
	ld [$de82], a
.asm_177c9
	ld hl, $de82
	ld a, [hli]
	ld c, a
	ld b, [hl]
	ld hl, $783f
	call Func_3ca6
	ld bc, $8283
	ld a, [$ffb7]
	add $1f
	and $e0
	swap a
	srl a
	ld d, a
	call WaitHBlankStart
	ld a, d
	and a
	ld a, b
	jr z, .asm_177ed
	ld a, c
	dec d
.asm_177ed
	ld [$9be7], a
	ld a, d
	and a
	ld a, b
	jr z, .asm_177f7
	ld a, c
	dec d
.asm_177f7
	ld [$9be6], a
	ld a, d
	and a
	ld a, b
	jr z, .asm_17801
	ld a, c
	dec d
.asm_17801
	ld [$9bc7], a
	call WaitHBlankStart
	ld a, d
	and a
	ld a, b
	jr z, .asm_1780e
	ld a, c
	dec d
.asm_1780e
	ld [$9bc6], a
	ld a, d
	and a
	ld a, b
	jr z, .asm_17818
	ld a, c
	dec d
.asm_17818
	ld [$9ba7], a
	ld a, d
	and a
	ld a, b
	jr z, .asm_17822
	ld a, c
	dec d
.asm_17822
	ld [$9ba6], a
	ld a, [$de82]
	sub $10
	ld c, a
	ld a, [hCameraXOffset]
	add c
	ld c, a
	ld a, [hCameraXOffset + 1]
	adc $00
	ld b, a
	ld a, [$ffdd]
	sub c
	ld a, [$ffde]
	sbc b
	ret c
	call Func_1ae2
	ret

INCBIN "baserom.gbc", $1783f, $17929 - $1783f

Func_17929:
	ld a, [hPaused]
	and a
	ret nz
	ld hl, hPlayerXPos
	ld c, $cd
	ld b, $04
.asm_17934
	ld a, [hli]
	ld [$ff00+c], a
	inc c
	dec b
	jr nz, .asm_17934
	ld hl, $ffc4
	ld b, $18
	ld c, $02
	ld d, $28
	ld e, $03
	ld a, [$ffb0]
	cp $03
	jr nz, .asm_17957
	ld b, $14
	ld c, $00
	ld a, [hFrameCounter]
	and $07
	jr nz, .asm_17957
	ld c, $01
.asm_17957
	ld a, [$ffb0]
	cp $2a
	jr nz, .asm_1795f
	ld d, $10
.asm_1795f
	ld a, [$ffb0]
	cp $27
	jr nz, .asm_1796b
	ld b, $20
	ld c, $00
	ld e, $00
.asm_1796b
	ld a, [$ffb0]
	cp $24
	jr nz, .asm_1797c
	ld b, $10
	ld c, $00
	ld a, [hFrameCounter]
	rra
	jr c, .asm_1797c
	ld c, $01
.asm_1797c
	ld a, [$ffb0]
	cp $21
	jr nz, .asm_17984
	ld e, $00
.asm_17984
	ld a, [$ffb0]
	cp $1e
	jr nz, .asm_1798e
	ld b, $28
	ld c, $01
.asm_1798e
	ld a, [$ffb0]
	cp $1b
	jr nz, .asm_179a2
	ld b, $08
	ld c, $00
	ld e, $00
	ld a, [hFrameCounter]
	and $07
	jr nz, .asm_179a2
	ld c, $01
.asm_179a2
	ld a, [$ffb0]
	cp $18
	jr nz, .asm_179aa
	ld e, $00
.asm_179aa
	ld a, [$ffb0]
	cp $15
	jr nz, .asm_179bb
	ld b, $10
	ld c, $00
	ld a, [hFrameCounter]
	rra
	jr c, .asm_179bb
	ld c, $01
.asm_179bb
	ld a, [$ffb0]
	cp $12
	jr nz, .asm_179c3
	ld e, $00
.asm_179c3
	ld a, [$ffb0]
	cp $0c
	jr nz, .asm_179d7
	ld b, $10
	ld c, $00
	ld e, $00
	ld a, [hFrameCounter]
	and $03
	jr nz, .asm_179d7
	ld c, $01
.asm_179d7
	ld a, [$ffb0]
	cp $09
	jr nz, .asm_179df
	ld e, $00
.asm_179df
	ld a, [$ffb0]
	cp $06
	jr nz, .asm_179f0
	ld b, $20
	ld c, $00
	ld a, [hFrameCounter]
	rra
	jr c, .asm_179f0
	ld c, $01
.asm_179f0
	ld a, [$ffb5]
	and a
	jr z, .asm_179f7
	ld e, $00
.asm_179f7
	ld a, [$ffd1]
	sub $68
	ld a, [$ffd2]
	sbc 0
	jr c, .asm_17a06
	add a
	jr c, .asm_17a06
	ld d, $38
.asm_17a06
	ld a, [$ffb6]
	and a
	jr z, .asm_17a17
	ld b, $38
	ld c, $00
	ld a, [hFrameCounter]
	and $03
	jr nz, .asm_17a17
	ld c, $01
.asm_17a17
	ld a, [$ffaf]
	add a
	jr nc, .asm_17a31
	ld a, [$ffd6]
	sub $87
	ld a, [$ffd7]
	sbc $77
	jr c, .asm_17a31
	ld d, $08
	sub a
	ld [$ffd1], a
	ld [$ffd2], a
	ld b, $04
	ld c, $01
.asm_17a31
	ld a, [$ffb3]
	cp $1c
	jr c, .asm_17a3b
	ld b, $04
	ld c, $01
.asm_17a3b
	ld a, [hli]
	and a
	jr z, .asm_17a42
	add [hl]
	jr .asm_17a50
.asm_17a42
	ld a, [hl]
	bit 7, a
	jr nz, .asm_17a4c
	sub c
	jr nc, .asm_17a50
	jr .asm_17a4f
.asm_17a4c
	add c
	jr nc, .asm_17a50
.asm_17a4f
	sub a
.asm_17a50
	ld c, a
	add a
	ld a, b
	jr c, .asm_17a5a
	cp c
	jr nc, .asm_17a5f
	jr .asm_17a60
.asm_17a5a
	cpl
	inc a
	cp c
	jr nc, .asm_17a60
.asm_17a5f
	ld a, c
.asm_17a60
	ld c, l
	ld [hli], a
	ld a, [$ffc3]
	and a
	jr z, .asm_17a73
	dec a
	ld [$ffc3], a
	sub a
	ld [$ffd1], a
	ld [$ffd2], a
	ld a, $d0
	jr .asm_17a7d
.asm_17a73
	ld a, [hl]
	add e
	bit 7, a
	jr nz, .asm_17a7d
	cp d
	jr c, .asm_17a7d
	ld a, d
.asm_17a7d
	ld [hli], a
	ld a, [$ffc2]
	add a
	jr z, .asm_17a96
	jr c, .asm_17a8b
	ld a, $18
	ld b, $ff
	jr .asm_17a8f
.asm_17a8b
	ld a, $e8
	ld b, $01
.asm_17a8f
	ld [$ffc5], a
	ld a, [$ffc2]
	add b
	ld [$ffc2], a
.asm_17a96
	ld a, [hli]
	call Func_17aba
	ld a, b
	ld [$ffc7], a
	inc c
	ld a, [$ffcc]
	call Func_17aba
	ld [hl], b
	ld hl, $ffcf
	ld a, [hli]
	ld c, a
	ld a, [hli]
	ld b, a
	ld a, [hPlayerYPos]
	sub c
	ld c, a
	ld a, [hPlayerYPos + 1]
	sbc b
	ld b, a
	ld a, [hl]
	add c
	ld [hli], a
	ld a, [hl]
	adc b
	ld [hl], a
	ret

Func_17aba:
	ld b, a
	ld d, $00
	ld a, [$ff00+c]
	add a
	jr nc, .asm_17ac3
	ld d, $ff
.asm_17ac3
	ld e, d
	add a
	rl e
	add a
	rl e
	add a
	rl e
	add b
	ld b, a
	ld a, [hl]
	adc e
	ld [hli], a
	ld a, [hl]
	adc d
	ld [hli], a
	ret

INCBIN "baserom.gbc", $17ad6, $17af0 - $17ad6

ReadJoyPad:
	ld a, [wEnableLevelSkip]
	and a
	jr z, .readJoyPad
	ld a, [wNewKeys]
	bit PADB_SELECT, a
	jr z, .readJoyPad
	ld a, [hPaused]
	and a
	jr z, .readJoyPad
	ld hl, $3e8b
	push hl
	jp ResumeMusicHome
.readJoyPad
	sub a
	ld c, a
	ld a, $20
	ld [$ff00+c], a
	ld a, [$ff00+c]
	ld a, [$ff00+c]
	ld a, [$ff00+c]
	ld b, a
	ld a, $10
	ld [$ff00+c], a
	ld a, b
	and $0f
	swap a
	ld b, a
	ld a, [$ff00+c]
	ld a, [$ff00+c]
	ld a, [$ff00+c]
	ld a, [$ff00+c]
	ld a, [$ff00+c]
	ld a, [$ff00+c]
	ld a, [$ff00+c]
	ld a, [$ff00+c]
	ld a, [$ff00+c]
	and $0f
	or b
	cpl
	ld b, a
	ld a, $30
	ld [$ff00+c], a
	ld a, [wHeldKeys]
	xor b
	and b
	ld [wNewKeys], a
	ld a, b
	ld [wHeldKeys], a
	ret

INCBIN "baserom.gbc", $17b39, $17b59 - $17b39

Func_17b59:
	ld hl, $c52a
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, [wLanguageSetting]
	add a
	ld c, a
	ld b, $00
	add hl, bc
	ld a, [hli]
	ld c, a
	ld b, [hl]
	ld hl, $dde0
	ld a, c
	ld [hli], a
	ld a, b
	ld [hli], a
	sub a
	ld [hli], a
	ld hl, vBGMap
	ld bc, $2a0
.asm_17b79
	ld a, $80
	ld [hli], a
	dec bc
	ld a, c
	or b
	jr nz, .asm_17b79
	sub a
	ld [rSCY], a
	ld [rSCX], a
	ld a, $01
	ld [$dec1], a
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	jr nz, .asm_17ba5
	ld a, 1
	ld [rVBK], a
	ld hl, vBGMap
	ld bc, $2a0
.asm_17b9b
	sub a
	ld [hli], a
	dec bc
	ld a, c
	or b
	jr nz, .asm_17b9b
	sub a
	ld [rVBK], a
.asm_17ba5
	jp Func_1b9

Func_17ba8:
	ld hl, $7bce
	ld bc, $8f20
	ld a, $05
	ld [$ff8a], a
.asm_17bb2
	ld a, [hli]
	ld e, a
	ld a, [hli]
	ld d, a
	push hl
	ld a, [hli]
	ld h, [hl]
	ld l, a
.asm_17bba
	ld a, [de]
	inc de
	ld [bc], a
	inc bc
	dec hl
	ld a, l
	or h
	jr nz, .asm_17bba
	pop hl
	inc hl
	inc hl
	ld a, [$ff8a]
	dec a
	ld [$ff8a], a
	jr nz, .asm_17bb2
	ret

INCBIN "baserom.gbc", $17bce, $17be2 - $17bce

Func_17be2:
	ld hl, $3d83
	ld bc, $fff2
	ld de, $c001
.asm_17beb
	ld a, l
	ld [de], a
	inc e
	ld a, h
	ld [de], a
	inc e
	inc e
	add hl, bc
	ld a, e
	cp $31
	jr nz, .asm_17beb
	ret

Func_17bf9:
	ld hl, $72e0
	ld bc, vBGWin
	ld d, $03
.asm_17c01
	ld e, $14
.asm_17c03
	ld a, [hli]
	ld [bc], a
	inc c
	dec e
	jr nz, .asm_17c03
	ld a, c
	add $0c
	ld c, a
	ld a, b
	adc $00
	ld b, a
	dec d
	jr nz, .asm_17c01
	sub a
	ld [rSCY], a
	ld [rSCX], a
	sub a
	ld [hCarrotMeter], a
	ld [hNumCarrots], a
	ld hl, $ddcc
	ld a, $4a
	ld [hli], a
	sub a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld a, $ff
	ld [$ffb5], a
	ld a, 120
	ld [rWY], a
	ld a, 7
	ld [rWX], a
	ret

Func_17c3a:
	ld hl, $9c49
	ld a, [hNumLives]
	and $f0
	swap a
	add $10
	ld [hli], a
	ld a, [hNumLives]
	and $0f
	add $10
	ld [hl], a
	ld hl, $9c4e
	ld c, $f1
	ld b, $10
	ld de, $ff0
	call Func_3086
	ld hl, hNumCarrots
	ld a, [hli]
	cp [hl]
	jr z, .asm_17c62
	inc [hl]
.asm_17c62
	ld a, [hl]
	and a
	ret z
	dec a
	ld b, a
	and $03
	ld e, a
	ld d, $00
	ld hl, $324e
	add hl, de
	ld d, [hl]
	ld a, b
	and $fc
	add a
	add a
	add a
	cpl
	inc a
	add $e0
	ld l, a
	ld h, $40
	ld c, a
	ld b, $90
	ret

Func_17c82:
	call Func_d67
	sub a
	ld [rSCY], a
	ld [rSCX], a
	sub a
	ld [$dda2], a
	ld a, $78
	ld [$de80], a
	ld hl, hNumCarrots
	ld b, $00
.asm_17c98
	ld a, [hl]
	and a
	jr z, .asm_17ca4
	dec [hl]
	ld a, b
	add 1
	daa
	ld b, a
	jr .asm_17c98
.asm_17ca4
	ld [hl], b
	ret

Func_17ca6:
	ld a, [hActiveSprites]
	ld l, a
	ld h, $df
	ld bc, $7058
	ld a, [$fff1]
	swap a
	call Func_17cea
	ld a, [$fff1]
	call Func_17cea
	ld a, [hScore]
	swap a
	call Func_17cea
	ld a, [hScore]
	call Func_17cea
	sub a
	call Func_17cea
	sub a
	call Func_17cea
	ld bc, $5858
	ld a, [hNumCarrots]
	swap a
	call Func_17cea
	ld a, [hNumCarrots]
	call Func_17cea
	ld a, l
	ld [hActiveSprites], a
	ld bc, $5440
	ld hl, $7b39
	call Func_3ca6
	ret

Func_17cea:
	and $0f
	add a
	add $12
	ld d, a
	ld a, b
	ld [hli], a
	ld a, c
	ld [hli], a
	add $08
	ld c, a
	ld a, d
	ld [hli], a
	ld a, $01
	ld [hli], a
	ret

Func_17cfd:
	ld a, [$dee6]
	ld c, a
	ld b, $00
	ld hl, $6e7d
	add hl, bc
	ld b, [hl]
	ld hl, $6db3
	ld c, $08
	call Func_3ca6
	ld hl, wPasswordCharacters + 2
	ld de, $6e80
	ld a, [wPasswordEntryCursor]
	ld c, a
	ld b, $03
.asm_17d1c
	ld a, c
	cp b
	jr nz, .asm_17d2b
	ld a, [hFrameCounter]
	bit 4, a
	jr nz, .asm_17d2b
	inc de
	inc de
	dec l
	jr .asm_17d46
.asm_17d2b
	push bc
	ld a, [de]
	inc de
	ld b, a
	ld a, [de]
	inc de
	ld c, a
	push de
	ld a, [hld]
	push hl
	add a
	ld l, a
	ld h, $00
	ld de, $6df1
	add hl, de
	ld a, [hli]
	ld h, [hl]
	ld l, a
	call Func_3ca6
	pop hl
	pop de
	pop bc
.asm_17d46
	dec b
	jr nz, .asm_17d1c
	ld hl, $6ddd
	ld a, [$defe]
	and a
	jr z, .asm_17d55
	ld hl, $6de7
.asm_17d55
	ld bc, $6848
	call Func_3ca6
	ld hl, $6dc1
	ld a, [$deeb]
	and a
	jr z, .asm_17d67
	ld hl, $6dcf
.asm_17d67
	ld bc, $7844
	call Func_3ca6
	ret

Func_17d6e:
	sub a
	ld [rSCY], a
	ld [rSCX], a
	ld hl, $ded2
	sub a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hli], a
	ld [hl], a
	ld [hForcedSideScrollSpeed], a
	ld [$de84], a
	call Func_17db0
	call ResetPlayerData
	ld hl, wMetatileRowPointers
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld a, [wLanguageSetting]
	add a
	ld c, a
	ld b, $00
	add hl, bc
	ld a, [hli]
	ld h, [hl]
	ld l, a
	ld bc, $98a0
	ld de, $98c0
.asm_17d9f
	ld a, [hli]
	sub $40
	add a
	add $85
	ld [bc], a
	inc c
	inc a
	ld [de], a
	inc e
	ld a, c
	cp $b4
	jr nz, .asm_17d9f
	ret

Func_17db0:
	ld hl, $ded8
	sub a
	ld [hli], a
	ld a, $01
	ld [hli], a
	sub a
	ld [hli], a
	ld a, $60
	ld [hli], a
	sub a
	ld [hli], a
	ld a, $06
	ld [hli], a
	sub a
	ld [hli], a
	ld a, $2e
	ld [hli], a
	sub a
	ld [hli], a
	ld a, $7e
	ld [hli], a
	sub a
	ld [hli], a
	ld a, $1d
	ld [hli], a
	sub a
	ld [hli], a
	ld [hl], $65
	ret

SECTION "ROM Bank $06", ROMX[$4000], BANK[$6]

INCBIN "baserom.gbc", $18000, $1a5a3 - $18000

WarnerBrosCopyrightInteractiveEntertainmentTiles:
	INCBIN "gfx/warner_bros_copyright/interactive_entertainment.2bpp"

StudioCreditsTextTiles:
	INCBIN "gfx/studio/credits_text.interleave.2bpp.lz"

INCBIN "baserom.gbc", $1a84e, $1a89f - $1a84e

; Loads common sprite palettes and the specified BG and
; sprite palettes. Also clears the BG map attributes.
; Input: hl = pointer to palette data structure
LoadCGBPalettes:
	ld a, [hGameBoyColorDetection]
	cp GBC_MODE
	ret nz
	ld a, (1 << 7) | $28
	ld [rOCPS], a
	ld de, CommonSpritePalettes
	ld b, 3 ; number of palettes
.commonSpritePaletteLoop
	ld c, 6 ; number of color bytes
	sub a
	ld [rOCPD], a ; First two bytes are the transparent color in the sprite palette.
	ld [rOCPD], a
.commonSpriteColorLoop
	ld a, [de]
	inc de
	ld [rOCPD], a
	dec c
	jr nz, .commonSpriteColorLoop
	dec b
	jr nz, .commonSpritePaletteLoop
	ld a, $80
	ld [rBCPS], a
	ld a, [hli]
	ld b, a ; number of palettes
.backgroundPaletteLoop
	ld a, b
	and a
	jr z, .loadSpritePalettes
	dec b
	ld c, 8
.backgroundColorLoop
	ld a, [hli]
	ld [rBCPD], a
	dec c
	jr nz, .backgroundColorLoop
	jr .backgroundPaletteLoop
.loadSpritePalettes
	ld a, $80
	ld [rOCPS], a
	ld a, [hli]
	ld b, a
.spritePaletteLoop
	ld a, b
	and a
	jr z, .clearBank1BGMap
	dec b
	ld c, 6 ; number of color bytes
	sub a
	ld [rOCPD], a ; First two bytes are the transparent color in the sprite palette.
	ld [rOCPD], a
.spriteColorLoop
	ld a, [hli]
	ld [rOCPD], a
	dec c
	jr nz, .spriteColorLoop
	jr .spritePaletteLoop
.clearBank1BGMap
	ld a, 1
	ld [rVBK], a
	ld hl, vBGMap
	ld bc, $800
.clearLoop
	sub a
	ld [hli], a
	dec bc
	ld a, c
	or b
	jr nz, .clearLoop
	sub a
	ld [rVBK], a
	ret

Func_1a902:
	ld h, b
	ld l, c
	ld a, $80
	ld [rBCPS], a
	ld a, [hli]
	ld b, a
.paletteLoop
	ld a, b
	and a
	jr z, .done
	dec b
	ld c, 8
.colorLoop
	ld a, [hli]
	ld [rBCPD], a
	dec c
	jr nz, .colorLoop
	jr .paletteLoop
.done
	call ReadAndLoadCGBpalettes
	pop hl
	ret

ReadAndLoadCGBpalettes:
	ld a, [hli]
	ld h, [hl]
	ld l, a
	jp LoadCGBPalettesHome

LevelSummaryScreenGBCPalettes:
	db 1 ; num background palettes
	; BG Palette 0
	RGB(31, 31, 31)
	RGB(17, 0, 28)
	RGB(8, 0, 13)
	RGB(2, 0, 7)

	db 2 ; num sprite palettes
	; OBJ Palette 0
	RGB(17, 0, 28)
	RGB(8, 0, 13)
	RGB(2, 0, 7)

	; OBJ Palette 1
	RGB(31, 31, 31)
	RGB(31, 0, 31)
	RGB(0, 0, 0)

InfogramesCopyrightScreenGBCPalettes:
	db 8 ; num background palettes
	; BG Palette 0
	RGB(0, 0, 0)
	RGB(10, 10, 10)
	RGB(21, 21, 21)
	RGB(31, 31, 31)

	; BG Palette 1
	RGB(0, 31, 0)
	RGB(0, 31, 0)
	RGB(0, 31, 0)
	RGB(0, 31, 0)

	; BG Palette 2
	RGB(0, 31, 0)
	RGB(0, 31, 0)
	RGB(0, 31, 0)
	RGB(0, 31, 0)

	; BG Palette 3
	RGB(31, 31, 31)
	RGB(28, 0, 0)
	RGB(31, 31, 0)
	RGB(21, 0, 22)

	; BG Palette 4
	RGB(0, 31, 0)
	RGB(0, 31, 0)
	RGB(0, 31, 0)
	RGB(0, 31, 0)

	; BG Palette 5
	RGB(0, 31, 0)
	RGB(31, 31, 31)
	RGB(16, 0, 16)
	RGB(0, 0, 0)

	; BG Palette 6
	RGB(31, 31, 31)
	RGB(0, 23, 0)
	RGB(0, 0, 23)
	RGB(0, 0, 0)

	; BG Palette 7
	RGB(31, 31, 31)
	RGB(0, 23, 0)
	RGB(31, 31, 0)
	RGB(0, 0, 23)

	db 0 ; num sprite palettes

WarnerBrosCopyrightScreenGBCPalettes:
	db 1 ; num background palettes
	; BG Palette 0
	RGB(31, 31, 31)
	RGB(31, 0, 0)
	RGB(15, 0, 0)
	RGB(7, 0, 0)

	db 2 ; num sprite palettes
	; OBJ Palette 0
	RGB(31, 0, 0)
	RGB(15, 0, 0)
	RGB(7, 0, 0)

	; OBJ Palette 1
	RGB(31, 31, 0)
	RGB(23, 8, 0)
	RGB(4, 4, 15)

TitlescreenGBCPalettes:
	db 8 ; num background palettes
	; BG Palette 0
	RGB(10, 17, 31)
	RGB(31, 31, 31)
	RGB(16, 16, 16)
	RGB(0, 0, 0)

	; BG Palette 1
	RGB(10, 17, 31)
	RGB(30, 30, 14)
	RGB(9, 8, 1)
	RGB(0, 0, 0)

	; BG Palette 2
	RGB(30, 30, 14)
	RGB(17, 15, 5)
	RGB(9, 8, 1)
	RGB(0, 0, 0)

	; BG Palette 3
	RGB(9, 31, 4)
	RGB(17, 15, 5)
	RGB(9, 8, 1)
	RGB(0, 0, 0)

	; BG Palette 4
	RGB(9, 31, 4)
	RGB(31, 17, 0)
	RGB(18, 5, 0)
	RGB(0, 0, 0)

	; BG Palette 5
	RGB(10, 17, 31)
	RGB(31, 22, 18)
	RGB(22, 10, 7)
	RGB(13, 3, 1)

	; BG Palette 6
	RGB(10, 17, 31)
	RGB(22, 10, 7)
	RGB(13, 3, 1)
	RGB(0, 0, 0)

	; BG Palette 7
	RGB(31, 22, 18)
	RGB(22, 10, 7)
	RGB(13, 3, 1)
	RGB(0, 0, 0)

	db 3 ; num sprite palettes
	; OBJ Palette 0
	RGB(16, 16, 16)
	RGB(9, 9, 9)
	RGB(0, 0, 0)

	; OBJ Palette 1
	RGB(19, 19, 16)
	RGB(12, 12, 9)
	RGB(3, 2, 0)

	; OBJ Palette 2
	RGB(31, 18, 0)
	RGB(15, 4, 0)
	RGB(0, 0, 0)

Data_1a9e6:
	db 1 ; num background palettes
	; BG Palettes 0
	RGB(31, 31, 31)
	RGB(0, 0, 31)
	RGB(0, 0, 15)
	RGB(0, 0, 7)

	db 7 ; num sprite palettes
	; OBJ Palette 0
	RGB(0, 0, 31)
	RGB(0, 0, 15)
	RGB(0, 0, 7)

	; OBJ Palette 1
	RGB(31, 31, 31)
	RGB(0, 0, 15)
	RGB(0, 0, 7)

	; OBJ Palette 2
	RGB(31, 21, 0)
	RGB(20, 8, 0)
	RGB(0, 0, 0)

	; OBJ Palette 3
	RGB(30, 24, 20)
	RGB(24, 9, 2)
	RGB(0, 0, 0)

	; OBJ Palette 4
	RGB(28, 25, 12)
	RGB(14, 11, 0)
	RGB(0, 0, 0)

	; OBJ Palette 5
	RGB(29, 29, 18)
	RGB(4, 18, 0)
	RGB(0, 0, 0)

	; OBJ Palette 6
	RGB(29, 18, 18)
	RGB(19, 9, 0)
	RGB(0, 0, 0)

Data_1aa1a:
	db 8 ; num background palettes
	; BG Palette 0
	RGB(10, 17, 31)
	RGB(31, 31, 31)
	RGB(16, 16, 16)
	RGB(0, 0, 0)

	; BG Palette 1
	RGB(10, 17, 31)
	RGB(30, 30, 14)
	RGB(9, 8, 1)
	RGB(0, 0, 0)

	; BG Palette 2
	RGB(30, 30, 14)
	RGB(17, 15, 5)
	RGB(9, 8, 1)
	RGB(0, 0, 0)

	; BG Palette 3
	RGB(9, 31, 4)
	RGB(17, 15, 5)
	RGB(9, 8, 1)
	RGB(0, 0, 0)

	; BG Palette 4
	RGB(9, 31, 4)
	RGB(31, 17, 0)
	RGB(18, 5, 0)
	RGB(0, 0, 0)

	; BG Palette 5
	RGB(10, 17, 31)
	RGB(31, 22, 18)
	RGB(22, 10, 7)
	RGB(13, 3, 1)

	; BG Palette 6
	RGB(10, 17, 31)
	RGB(22, 10, 7)
	RGB(13, 3, 1)
	RGB(0, 0, 0)

	; BG Palette 7
	RGB(31, 22, 18)
	RGB(22, 10, 7)
	RGB(13, 3, 1)
	RGB(0, 0, 0)

	db 2 ; num sprite palettes
	; OBJ Palette 0
	RGB(17, 21, 31)
	RGB(12, 17, 26)
	RGB(7, 11, 21)

	; OBJ Palette 1
	RGB(24, 25, 31)
	RGB(14, 16, 21)
	RGB(3, 6, 11)

StudioScreenGBCPalettes:
	db 8 ; num background palettes
	; BG Palette 0
	RGB(23, 31, 26)
	RGB(12, 22, 13)
	RGB(5, 11, 6)
	RGB(0, 0, 0)

	; BG Palette 1
	RGB(31, 27, 10)
	RGB(18, 18, 3)
	RGB(8, 7, 0)
	RGB(0, 0, 0)

	; BG Palette 2
	RGB(31, 31, 31)
	RGB(17, 12, 19)
	RGB(8, 4, 11)
	RGB(0, 0, 0)

	; BG Palette 3
	RGB(8, 20, 31)
	RGB(28, 17, 10)
	RGB(16, 4, 0)
	RGB(0, 0, 0)

	; BG Palette 4
	RGB(31, 31, 31)
	RGB(15, 29, 31)
	RGB(8, 20, 31)
	RGB(2, 17, 25)

	; BG Palette 5
	RGB(8, 20, 31)
	RGB(11, 31, 3)
	RGB(15, 7, 2)
	RGB(0, 0, 0)

	; BG Palette 6
	RGB(23, 31, 26)
	RGB(17, 17, 17)
	RGB(8, 8, 8)
	RGB(0, 0, 0)

	; BG Palette 7
	RGB(23, 31, 26)
	RGB(28, 17, 10)
	RGB(15, 7, 2)
	RGB(0, 0, 0)

	db 5 ; num sprite palettes
	; OBJ Palette 0
	RGB(30, 24, 20)
	RGB(24, 9, 2)
	RGB(0, 0, 0)

	; OBJ Palette 1
	RGB(31, 21, 0)
	RGB(20, 8, 0)
	RGB(0, 0, 0)

	; OBJ Palette 2
	RGB(28, 25, 12)
	RGB(14, 11, 0)
	RGB(0, 0, 0)

	; OBJ Palette 3
	RGB(29, 29, 18)
	RGB(4, 18, 0)
	RGB(0, 0, 0)

	; OBJ Palette 4
	RGB(29, 18, 18)
	RGB(19, 9, 0)
	RGB(0, 0, 0)

INCBIN "baserom.gbc", $1aac8, $1ab36 - $1aac8

Data_1ab36:
	db 1 ; num background palettes
	; BG Palette 0
	RGB(31, 31, 31)
	RGB(20, 15, 23)
	RGB(14, 7, 15)
	RGB(6, 2, 5)

	db 1 ; num sprite palettes
	; OBJ Palette 0
	RGB(20, 15, 23)
	RGB(14, 7, 15)
	RGB(6, 2, 5)

INCBIN "baserom.gbc", $1ab46, $1af18 - $1ab46

; This only holds colors 1-3. The first transparent color is hardcoded
; in LoadCGBPalettes.
CommonSpritePalettes:
	; OBJ Palette 5
	RGB(31, 31, 31)
	RGB(14, 14, 14)
	RGB(0, 0, 0)

	; OBJ Palette 6
	RGB(31, 27, 0)
	RGB(19, 7, 0)
	RGB(0, 0, 0)

	; OBJ Palette 7
	RGB(31, 28, 20)
	RGB(31, 8, 0)
	RGB(0, 0, 0)

INCBIN "baserom.gbc", $1af2a, $1af32 - $1af2a

BonusScreenGBCPalettes:
	db 6 ; num background palettes
	; BG Palette 0
	RGB(31, 21, 17)
	RGB(22, 12, 9)
	RGB(14, 5, 3)
	RGB(0, 0, 0)

	; BG Palette 1
	RGB(31, 18, 18)
	RGB(31, 0, 0)
	RGB(13, 18, 31)
	RGB(0, 0, 0)

	; BG Palette 2
	RGB(31, 18, 18)
	RGB(31, 31, 31)
	RGB(13, 18, 31)
	RGB(0, 0, 0)

	; BG Palette 3
	RGB(21, 19, 17)
	RGB(14, 12, 8)
	RGB(8, 6, 4)
	RGB(0, 0, 0)

	; BG Palette 4
	RGB(13, 18, 31)
	RGB(31, 31, 31)
	RGB(22, 14, 5)
	RGB(21, 21, 21)

	; BG Palette 5
	RGB(13, 18, 31)
	RGB(31, 22, 10)
	RGB(22, 11, 1)
	RGB(10, 4, 0)

	db 8 ; num sprite palettes
	; OBJ Palette 0
	RGB(31, 27, 0)
	RGB(19, 7, 0)
	RGB(0, 0, 0)

	; OBJ Palette 1
	RGB(31, 31, 31)
	RGB(14, 14, 14)
	RGB(0, 0, 0)

	; OBJ Palette 2
	RGB(31, 21, 0)
	RGB(20, 8, 0)
	RGB(0, 0, 0)

	; OBJ Palette 3
	RGB(30, 24, 20)
	RGB(24, 9, 2)
	RGB(0, 0, 0)

	; OBJ Palette 4
	RGB(28, 25, 12)
	RGB(14, 11, 0)
	RGB(0, 0, 0)

	; OBJ Palette 5
	RGB(29, 29, 18)
	RGB(4, 18, 0)
	RGB(0, 0, 0)

	; OBJ Palette 6
	RGB(29, 18, 18)
	RGB(19, 9, 0)
	RGB(0, 0, 0)

	; OBJ Palette 7
	RGB(31, 31, 31)
	RGB(14, 14, 14)
	RGB(0, 0, 0)

Data_1af94:
	dw $ffff
	dw Data_1b0cc ; SCREEN_COPYRIGHT_INFOGRAMES
	dw Data_1b0d9 ; SCREEN_COPYRIGHT_WARNER_BROS
	dw Data_1b129 ; SCREEN_LANGUAGE_SELECT
	dw $716f ; SCREEN_TITLESCREEN
	dw $7147 ; SCREEN_OPTIONS
	dw $7194 ; SCREEN_INTRO_SCENE
	dw Data_1b2ee ; SCREEN_STUDIO_ENTRANCE
	dw $71fc ; SCREEN_TREASURE_ISLAND_1_INTRO
	dw $73b6 ; SCREEN_TREASURE_ISLAND_1
	dw $7722 ; SCREEN_TREASURE_ISLAND_1_SUMMARY
	dw $7794 ; SCREEN_TREASURE_ISLAND_1_BONUS
	dw $720d ; SCREEN_TREASURE_ISLAND_2_INTRO
	dw $73ed ; SCREEN_TREASURE_ISLAND_2
	dw $7722 ; SCREEN_TREASURE_ISLAND_2_SUMMARY
	dw $779b ; SCREEN_TREASURE_ISLAND_2_BONUS
	dw $721e ; SCREEN_TREASURE_ISLAND_BOSS_INTRO
	dw $7472 ; SCREEN_TREASURE_ISLAND_BOSS
	dw $7722 ; SCREEN_TREASURE_ISLAND_BOSS_SUMMARY
	dw $77a2 ; SCREEN_TREASURE_ISLAND_BOSS_BONUS
	dw $7710 ; SCREEN_PASSWORD_1
	dw $7300 ; SCREEN_STUDIO_TREASURE_ISLAND
	dw $71c9 ; SCREEN_CRAZY_TOWN_1_INTRO
	dw $7348 ; SCREEN_CRAZY_TOWN_1
	dw $7722 ; SCREEN_CRAZY_TOWN_1_SUMMARY
	dw $77a9 ; SCREEN_CRAZY_TOWN_1_BONUS
	dw $71da ; SCREEN_CRAZY_TOWN_2_INTRO
	dw $737f ; SCREEN_CRAZY_TOWN_2
	dw $7722 ; SCREEN_CRAZY_TOWN_2_SUMMARY
	dw $77b0 ; SCREEN_CRAZY_TOWN_2_BONUS
	dw $71eb ; SCREEN_CRAZY_TOWN_BOSS_INTRO
	dw $7424 ; SCREEN_CRAZY_TOWN_BOSS
	dw $7722 ; SCREEN_CRAZY_TOWN_BOSS_SUMMARY
	dw $77b7 ; SCREEN_CRAZY_TOWN_BOSS_BONUS
	dw $7312 ; SCREEN_STUDIO_CRAZY_TOWN
	dw $722f ; SCREEN_TAZ_ZOO_1_INTRO
	dw $74c0 ; SCREEN_TAZ_ZOO_1
	dw $7722 ; SCREEN_TAZ_ZOO_1_SUMMARY
	dw $77be ; SCREEN_TAZ_ZOO_1_BONUS
	dw $7240 ; SCREEN_TAZ_ZOO_2_INTRO
	dw $74f7 ; SCREEN_TAZ_ZOO_2
	dw $7722 ; SCREEN_TAZ_ZOO_2_SUMMARY
	dw $77c5 ; SCREEN_TAZ_ZOO_2_BONUS
	dw $7251 ; SCREEN_TAZ_ZOO_BOSS_INTRO
	dw $752e ; SCREEN_TAZ_ZOO_BOSS
	dw $7722 ; SCREEN_TAZ_ZOO_BOSS_SUMMARY
	dw $77cc ; SCREEN_TAZ_ZOO_BOSS_BONUS
	dw $7719 ; SCREEN_PASSWORD_2
	dw $7324 ; SCREEN_STUDIO_TAZ_ZOO
	dw $7262 ; SCREEN_SPACE_STATION_1_INTRO
	dw $7588 ; SCREEN_SPACE_STATION_1
	dw $7722 ; SCREEN_SPACE_STATION_1_SUMMARY
	dw $77d3 ; SCREEN_SPACE_STATION_1_BONUS
	dw $7273 ; SCREEN_SPACE_STATION_2_INTRO
	dw $75bf ; SCREEN_SPACE_STATION_2
	dw $7722 ; SCREEN_SPACE_STATION_2_SUMMARY
	dw $77da ; SCREEN_SPACE_STATION_2_BONUS
	dw $7284 ; SCREEN_SPACE_STATION_BOSS_INTRO
	dw $75f6 ; SCREEN_SPACE_STATION_BOSS
	dw $7722 ; SCREEN_SPACE_STATION_BOSS_SUMMARY
	dw $77e1 ; SCREEN_SPACE_STATION_BOSS_BONUS
	dw $7336 ; SCREEN_STUDIO_SPACE_STATION
	dw $7295 ; SCREEN_FUDD_FOREST_1_INTRO
	dw $7638 ; SCREEN_FUDD_FOREST_1
	dw $7722 ; SCREEN_FUDD_FOREST_1_SUMMARY
	dw $77e8 ; SCREEN_FUDD_FOREST_1_BONUS
	dw $72a6 ; SCREEN_FUDD_FOREST_2_INTRO
	dw $766f ; SCREEN_FUDD_FOREST_2
	dw $7722 ; SCREEN_FUDD_FOREST_2_SUMMARY
	dw $77ef ; SCREEN_FUDD_FOREST_2_BONUS
	dw $72b7 ; SCREEN_FUDD_FOREST_BOSS_INTRO
	dw $76a6 ; SCREEN_FUDD_FOREST_BOSS
	dw $7722 ; SCREEN_FUDD_FOREST_BOSS_SUMMARY
	dw $7764 ; SCREEN_PROLOGUE_SCENE
	dw $777d ; SCREEN_CREDITS
	dw $0000
	dw $7113 ; SCREEN_GAME_OVER
	dw $0000

Data_1b030:
	dw $ffff
	dw Data_1bcb0 ; SCREEN_COPYRIGHT_INFOGRAMES
	dw Data_1b0d9 ; SCREEN_COPYRIGHT_WARNER_BROS
	dw Data_1b129 ; SCREEN_LANGUAGE_SELECT
	dw $7c63 ; SCREEN_TITLESCREEN
	dw $7147 ; SCREEN_OPTIONS
	dw $7c8d ; SCREEN_INTRO_SCENE
	dw Data_1b2ee ; SCREEN_STUDIO_ENTRANCE
	dw $71fc ; SCREEN_TREASURE_ISLAND_1_INTRO
	dw $7891 ; SCREEN_TREASURE_ISLAND_1
	dw $7722 ; SCREEN_TREASURE_ISLAND_1_SUMMARY
	dw $7794 ; SCREEN_TREASURE_ISLAND_1_BONUS
	dw $720d ; SCREEN_TREASURE_ISLAND_2_INTRO
	dw $78cd ; SCREEN_TREASURE_ISLAND_2
	dw $7722 ; SCREEN_TREASURE_ISLAND_2_SUMMARY
	dw $779b ; SCREEN_TREASURE_ISLAND_2_BONUS
	dw $721e ; SCREEN_TREASURE_ISLAND_BOSS_INTRO
	dw $79d9 ; SCREEN_TREASURE_ISLAND_BOSS
	dw $7722 ; SCREEN_TREASURE_ISLAND_BOSS_SUMMARY
	dw $77a2 ; SCREEN_TREASURE_ISLAND_BOSS_BONUS
	dw $7710 ; SCREEN_PASSWORD_1
	dw $7300 ; SCREEN_STUDIO_TREASURE_ISLAND
	dw $71c9 ; SCREEN_CRAZY_TOWN_1_INTRO
	dw $7819 ; SCREEN_CRAZY_TOWN_1
	dw $7722 ; SCREEN_CRAZY_TOWN_1_SUMMARY
	dw $77a9 ; SCREEN_CRAZY_TOWN_1_BONUS
	dw $71da ; SCREEN_CRAZY_TOWN_2_INTRO
	dw $7855 ; SCREEN_CRAZY_TOWN_2
	dw $7722 ; SCREEN_CRAZY_TOWN_2_SUMMARY
	dw $77b0 ; SCREEN_CRAZY_TOWN_2_BONUS
	dw $71eb ; SCREEN_CRAZY_TOWN_BOSS_INTRO
	dw $7909 ; SCREEN_CRAZY_TOWN_BOSS
	dw $7722 ; SCREEN_CRAZY_TOWN_BOSS_SUMMARY
	dw $77b7 ; SCREEN_CRAZY_TOWN_BOSS_BONUS
	dw $7312 ; SCREEN_STUDIO_CRAZY_TOWN
	dw $722f ; SCREEN_TAZ_ZOO_1_INTRO
	dw $7961 ; SCREEN_TAZ_ZOO_1
	dw $7722 ; SCREEN_TAZ_ZOO_1_SUMMARY
	dw $77be ; SCREEN_TAZ_ZOO_1_BONUS
	dw $7240 ; SCREEN_TAZ_ZOO_2_INTRO
	dw $799d ; SCREEN_TAZ_ZOO_2
	dw $7722 ; SCREEN_TAZ_ZOO_2_SUMMARY
	dw $77c5 ; SCREEN_TAZ_ZOO_2_BONUS
	dw $7251 ; SCREEN_TAZ_ZOO_BOSS_INTRO
	dw $7bcd ; SCREEN_TAZ_ZOO_BOSS
	dw $7722 ; SCREEN_TAZ_ZOO_BOSS_SUMMARY
	dw $77cc ; SCREEN_TAZ_ZOO_BOSS_BONUS
	dw $7719 ; SCREEN_PASSWORD_2
	dw $7324 ; SCREEN_STUDIO_TAZ_ZOO
	dw $7262 ; SCREEN_SPACE_STATION_1_INTRO
	dw $7a35 ; SCREEN_SPACE_STATION_1
	dw $7722 ; SCREEN_SPACE_STATION_1_SUMMARY
	dw $77d3 ; SCREEN_SPACE_STATION_1_BONUS
	dw $7273 ; SCREEN_SPACE_STATION_2_INTRO
	dw $7a71 ; SCREEN_SPACE_STATION_2
	dw $7722 ; SCREEN_SPACE_STATION_2_SUMMARY
	dw $77da ; SCREEN_SPACE_STATION_2_BONUS
	dw $7284 ; SCREEN_SPACE_STATION_BOSS_INTRO
	dw $7aad ; SCREEN_SPACE_STATION_BOSS
	dw $7722 ; SCREEN_SPACE_STATION_BOSS_SUMMARY
	dw $77e1 ; SCREEN_SPACE_STATION_BOSS_BONUS
	dw $7336 ; SCREEN_STUDIO_SPACE_STATION
	dw $7295 ; SCREEN_FUDD_FOREST_1_INTRO
	dw $7afb ; SCREEN_FUDD_FOREST_1
	dw $7722 ; SCREEN_FUDD_FOREST_1_SUMMARY
	dw $77e8 ; SCREEN_FUDD_FOREST_1_BONUS
	dw $72a6 ; SCREEN_FUDD_FOREST_2_INTRO
	dw $7b37 ; SCREEN_FUDD_FOREST_2
	dw $7722 ; SCREEN_FUDD_FOREST_2_SUMMARY
	dw $77ef ; SCREEN_FUDD_FOREST_2_BONUS
	dw $72b7 ; SCREEN_FUDD_FOREST_BOSS_INTRO
	dw $7b73 ; SCREEN_FUDD_FOREST_BOSS
	dw $7722 ; SCREEN_FUDD_FOREST_BOSS_SUMMARY
	dw $7cc2 ; SCREEN_PROLOGUE_SCENE
	dw $777d ; SCREEN_CREDITS
	dw $0000
	dw $7113 ; SCREEN_GAME_OVER
	dw $0000

Data_1b0cc:
	compressed_data InfogramesCopyrightTiles, $9550
	compressed_data InfogramesCopyrightTilemap, $9800
	db $ff
	dw RunInfogramesCopyrightScreen

Data_1b0d9:
	compressed_data WarnerBrosCopyrightTiles, $8830
	compressed_data WarnerBrosCopyrightEdgeTiles, $8000
	uncompressed_data WarnerBrosCopyrightUnderLicenseByTiles, $c000, $80
	uncompressed_data WarnerBrosCopyrightInteractiveEntertainmentTiles, $c080, $c0
	compressed_data WarnerBrosCopyrightTrademarkTiles, $c200
	compressed_data WarnerBrosCopyrightBugsBunnyTiles, $c560
	uncompressed_data WarnerBrosCopyrightAmpersandTiles, $c8e0, $40
	compressed_data WarnerBrosCopyrightLolaBunnyTiles, $c920
	compressed_data WarnerBrosCopyrightLogoTiles, $81c0
	db $ff
	dw RunWarnerBrosCopyrightScreen

INCBIN "baserom.gbc", $1b10f, $1b129 - $1b10f

Data_1b129:
	compressed_data WarnerBrosCopyrightTiles, $8830
	compressed_data WarnerBrosCopyrightEdgeTiles, $8000
	compressed_data LanguageSelectCarrotTiles, $81c0
	compressed_data LanguageSelectFontTiles, $c000
	compressed_data GameText, $c500
	db $ff
	dw Func_5ca

INCBIN "baserom.gbc", $1b145, $1b2c8 - $1b145

StudioScreenData:
	compressed_data StudioTiles, $8C80
	compressed_data StudioMetatiles, wMetatiles
	compressed_data StudioCollisionAttributes, wMetatileCollisionAttributes
	compressed_data StudioMap, wLevelMap
	compressed_data StudioCeilingFloorTiles, $8840
	compressed_data StudioCeilingFloorTilemap, $9B00
	compressed_data StudioCameraArrowTiles, $8560
	db $ff
	dw $4065

Data_1b2ee:
	db $ff
	dw RunStudioScreen

INCBIN "baserom.gbc", $1b2f1, $1b77d - $1b2f1

Data_1b77d:
	compressed_data StudioCreditsTextTiles, $8340
	db $ff
	dw RunStudioCreditsScreen

INCBIN "baserom.gbc", $1b785, $1bc33 - $1b785

StudioScreenData_GBC:
	compressed_data StudioTilesGBC, $8C80
	compressed_data StudioMetatilesGBC, wMetatiles
	compressed_data StudioCollisionAttributesGBC, wMetatileCollisionAttributes
	compressed_data StudioMapGBC, wLevelMap
	compressed_data StudioCeilingFloorTilesGBC, $8840
	compressed_data StudioCeilingFloorTilemapGBC, $9B00
	compressed_data StudioCameraArrowTiles, $8560
	compressed_data StudioTileAttributesGBC, $DA48
	compressed_data StudioCeilingFloorTileAttributesGBC, $D9BC
	db $ff
	dw $4065

INCBIN "baserom.gbc", $1bc63, $1bcb0 - $1bc63

Data_1bcb0:
	compressed_data InfogramesCopyrightGBCTiles, $9550
	compressed_data InfogramesCopyrightGBCTilemap, $9800
	compressed_data InfogramesCopyrightGBCAttributesTilemap, $d9d5
	db $ff
	dw RunInfogramesCopyrightScreen

INCBIN "baserom.gbc", $1bcc2, $1c000 - $1bcc2

SECTION "ROM Bank $07", ROMX[$4000], BANK[$7]

INCBIN "baserom.gbc", $1C000, $20000 - $1C000

SECTION "ROM Bank $08", ROMX[$4000], BANK[$8]

INCBIN "baserom.gbc", $20000, $24000 - $20000

SECTION "ROM Bank $09", ROMX[$4000], BANK[$9]

INCBIN "baserom.gbc", $24000, $27c51 - $24000

WarnerBrosCopyrightEdgeTiles:
	INCBIN "gfx/warner_bros_copyright/edge.2bpp.lz"

INCBIN "baserom.gbc", $27ced, $28000 - $27ced

SECTION "ROM Bank $0A", ROMX[$4000], BANK[$A]

INCBIN "baserom.gbc", $28000, $2bf2a - $28000

WarnerBrosCopyrightUnderLicenseByTiles:
	INCBIN "gfx/warner_bros_copyright/under_license_by.2bpp"

LanguageSelectCarrotTiles:
	INCBIN "gfx/language_select/carrot.interleave.2bpp.lz"

SECTION "ROM Bank $0B", ROMX[$4000], BANK[$B]

INCBIN "baserom.gbc", $2C000, $30000 - $2C000

SECTION "ROM Bank $0C", ROMX[$4000], BANK[$C]

INCBIN "baserom.gbc", $30000, $314b0 - $30000

GameText:
	INCBIN "data/game_text.bin.lz"

INCBIN "baserom.gbc", $31ae0, $34000 - $31ae0

SECTION "ROM Bank $0D", ROMX[$4000], BANK[$D]

INCBIN "baserom.gbc", $34000, $38000 - $34000

SECTION "ROM Bank $0E", ROMX[$4000], BANK[$E]

INCBIN "baserom.gbc", $38000, $3bd22 - $38000

WarnerBrosCopyrightBugsBunnyTiles:
	INCBIN "gfx/warner_bros_copyright/bugs_bunny.2bpp.lz"

InfogramesCopyrightTilemap:
	INCBIN "gfx/infogrames_copyright/background.tilemap.lz"

SECTION "ROM Bank $0F", ROMX[$4000], BANK[$F]

INCBIN "baserom.gbc", $3C000, $3fceb - $3C000

WarnerBrosCopyrightTiles:
	INCBIN "gfx/warner_bros_copyright/background.2bpp.lz"

StudioCollisionAttributes:
	INCBIN "data/levels/studio_collision_attrs.bin.lz"

SECTION "ROM Bank $10", ROMX[$4000], BANK[$10]

INCBIN "baserom.gbc", $40000, $44000 - $40000

SECTION "ROM Bank $11", ROMX[$4000], BANK[$11]

INCBIN "baserom.gbc", $44000, $48000 - $44000

SECTION "ROM Bank $12", ROMX[$4000], BANK[$12]

INCBIN "baserom.gbc", $48000, $4C000 - $48000

SECTION "ROM Bank $13", ROMX[$4000], BANK[$13]

INCBIN "baserom.gbc", $4C000, $50000 - $4C000

SECTION "ROM Bank $14", ROMX[$4000], BANK[$14]

INCBIN "baserom.gbc", $50000, $54000 - $50000

SECTION "ROM Bank $15", ROMX[$4000], BANK[$15]

INCBIN "baserom.gbc", $54000, $58000 - $54000

SECTION "ROM Bank $16", ROMX[$4000], BANK[$16]

StudioTilesGBC:
	INCBIN "gfx/studio/tiles_gbc.2bpp.lz"
StudioCollisionAttributesGBC:
	INCBIN "data/levels/studio_collision_attrs_gbc.bin.lz"
StudioMetatilesGBC:
	INCBIN "gfx/studio/metatiles_gbc.bin.lz"
StudioMapGBC:
	INCBIN "data/levels/studio_gbc.vdmap.lz"
StudioTileAttributesGBC:
	INCBIN "gfx/studio/tile_attributes_gbc.bin.lz"
StudioCeilingFloorTilesGBC:
	INCBIN "gfx/studio/ceiling_floor_gbc.2bpp.lz"
StudioCeilingFloorTilemapGBC:
	INCBIN "gfx/studio/ceiling_floor_gbc.tilemap.lz"
StudioCeilingFloorTileAttributesGBC:
	INCBIN "gfx/studio/ceiling_floor_tile_attributes_gbc.bin.lz"

INCBIN "baserom.gbc", $58e87, $59d9d - $58e87

InfogramesCopyrightGBCTiles:
	INCBIN "gfx/infogrames_copyright/background_gbc.2bpp.lz"
InfogramesCopyrightGBCTilemap:
	INCBIN "gfx/infogrames_copyright/background_gbc.tilemap.lz"
InfogramesCopyrightGBCAttributesTilemap:
	INCBIN "gfx/infogrames_copyright/background_gbc.attrmap.lz"

SECTION "ROM Bank $20", ROMX[$4000], BANK[$20]
; force 1MB ROM
